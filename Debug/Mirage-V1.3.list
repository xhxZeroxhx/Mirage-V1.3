
Mirage-V1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001708  08001708  00011708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800172c  0800172c  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  0800172c  0800172c  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800172c  0800172c  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800172c  0800172c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08001734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  2000024c  08001980  0002024c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08001980  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011033  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f30  00000000  00000000  000312a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000745e  00000000  00000000  000331d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000009f0  00000000  00000000  0003a638  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009c0  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000155b1  00000000  00000000  0003b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000099aa  00000000  00000000  00050f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00071483  00000000  00000000  0005a943  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000cbdc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001a48  00000000  00000000  000cbe44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000024c 	.word	0x2000024c
 8000128:	00000000 	.word	0x00000000
 800012c:	080016f0 	.word	0x080016f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000250 	.word	0x20000250
 8000148:	080016f0 	.word	0x080016f0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f882 	bl	800026c <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f837 	bl	80001ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f80f 	bl	80001c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 f856 	bl	8001260 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001bc:	4b01      	ldr	r3, [pc, #4]	; (80001c4 <HAL_GetTick+0x8>)
 80001be:	6818      	ldr	r0, [r3, #0]
}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	20000364 	.word	0x20000364

080001c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001c8:	4a07      	ldr	r2, [pc, #28]	; (80001e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001d0:	041b      	lsls	r3, r3, #16
 80001d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d4:	0200      	lsls	r0, r0, #8
 80001d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001da:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001dc:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001e0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001e4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001e6:	4770      	bx	lr
 80001e8:	e000ed00 	.word	0xe000ed00

080001ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <HAL_NVIC_SetPriority+0x60>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001f6:	f1c3 0407 	rsb	r4, r3, #7
 80001fa:	2c04      	cmp	r4, #4
 80001fc:	bf28      	it	cs
 80001fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000200:	1d1d      	adds	r5, r3, #4
 8000202:	2d06      	cmp	r5, #6
 8000204:	d918      	bls.n	8000238 <HAL_NVIC_SetPriority+0x4c>
 8000206:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000208:	f04f 35ff 	mov.w	r5, #4294967295
 800020c:	fa05 f404 	lsl.w	r4, r5, r4
 8000210:	ea21 0104 	bic.w	r1, r1, r4
 8000214:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000216:	fa05 f303 	lsl.w	r3, r5, r3
 800021a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800021e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000220:	2800      	cmp	r0, #0
 8000222:	db0b      	blt.n	800023c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	0109      	lsls	r1, r1, #4
 8000226:	b2c9      	uxtb	r1, r1
 8000228:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800022c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000230:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000234:	bc30      	pop	{r4, r5}
 8000236:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	2300      	movs	r3, #0
 800023a:	e7e5      	b.n	8000208 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	f000 000f 	and.w	r0, r0, #15
 8000240:	0109      	lsls	r1, r1, #4
 8000242:	b2c9      	uxtb	r1, r1
 8000244:	4b02      	ldr	r3, [pc, #8]	; (8000250 <HAL_NVIC_SetPriority+0x64>)
 8000246:	5419      	strb	r1, [r3, r0]
 8000248:	e7f4      	b.n	8000234 <HAL_NVIC_SetPriority+0x48>
 800024a:	bf00      	nop
 800024c:	e000ed00 	.word	0xe000ed00
 8000250:	e000ed14 	.word	0xe000ed14

08000254 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000254:	f000 021f 	and.w	r2, r0, #31
 8000258:	0940      	lsrs	r0, r0, #5
 800025a:	2301      	movs	r3, #1
 800025c:	4093      	lsls	r3, r2
 800025e:	4a02      	ldr	r2, [pc, #8]	; (8000268 <HAL_NVIC_EnableIRQ+0x14>)
 8000260:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000e100 	.word	0xe000e100

0800026c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800026c:	3801      	subs	r0, #1
 800026e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000272:	d20a      	bcs.n	800028a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000274:	4b06      	ldr	r3, [pc, #24]	; (8000290 <HAL_SYSTICK_Config+0x24>)
 8000276:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <HAL_SYSTICK_Config+0x28>)
 800027a:	21f0      	movs	r1, #240	; 0xf0
 800027c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000280:	2000      	movs	r0, #0
 8000282:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000284:	2207      	movs	r2, #7
 8000286:	601a      	str	r2, [r3, #0]
 8000288:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800028a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	e000e010 	.word	0xe000e010
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000298:	b4f0      	push	{r4, r5, r6, r7}
 800029a:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800029c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800029e:	4635      	mov	r5, r6
 80002a0:	e0a1      	b.n	80003e6 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002a2:	2c00      	cmp	r4, #0
 80002a4:	d059      	beq.n	800035a <HAL_GPIO_Init+0xc2>
 80002a6:	2c01      	cmp	r4, #1
 80002a8:	d100      	bne.n	80002ac <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002aa:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002ac:	2bff      	cmp	r3, #255	; 0xff
 80002ae:	d868      	bhi.n	8000382 <HAL_GPIO_Init+0xea>
 80002b0:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002b2:	2bff      	cmp	r3, #255	; 0xff
 80002b4:	d868      	bhi.n	8000388 <HAL_GPIO_Init+0xf0>
 80002b6:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002b8:	f8dc 2000 	ldr.w	r2, [ip]
 80002bc:	270f      	movs	r7, #15
 80002be:	40a7      	lsls	r7, r4
 80002c0:	ea22 0207 	bic.w	r2, r2, r7
 80002c4:	fa06 f404 	lsl.w	r4, r6, r4
 80002c8:	4322      	orrs	r2, r4
 80002ca:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002ce:	684a      	ldr	r2, [r1, #4]
 80002d0:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80002d4:	f000 8086 	beq.w	80003e4 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002d8:	4a5e      	ldr	r2, [pc, #376]	; (8000454 <HAL_GPIO_Init+0x1bc>)
 80002da:	6994      	ldr	r4, [r2, #24]
 80002dc:	f044 0401 	orr.w	r4, r4, #1
 80002e0:	6194      	str	r4, [r2, #24]
 80002e2:	6992      	ldr	r2, [r2, #24]
 80002e4:	f002 0201 	and.w	r2, r2, #1
 80002e8:	9201      	str	r2, [sp, #4]
 80002ea:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80002ec:	08ac      	lsrs	r4, r5, #2
 80002ee:	1ca7      	adds	r7, r4, #2
 80002f0:	4a59      	ldr	r2, [pc, #356]	; (8000458 <HAL_GPIO_Init+0x1c0>)
 80002f2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80002f6:	f005 0703 	and.w	r7, r5, #3
 80002fa:	00bf      	lsls	r7, r7, #2
 80002fc:	f04f 0c0f 	mov.w	ip, #15
 8000300:	fa0c fc07 	lsl.w	ip, ip, r7
 8000304:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000308:	4a54      	ldr	r2, [pc, #336]	; (800045c <HAL_GPIO_Init+0x1c4>)
 800030a:	4290      	cmp	r0, r2
 800030c:	d042      	beq.n	8000394 <HAL_GPIO_Init+0xfc>
 800030e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000312:	4290      	cmp	r0, r2
 8000314:	d07f      	beq.n	8000416 <HAL_GPIO_Init+0x17e>
 8000316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800031a:	4290      	cmp	r0, r2
 800031c:	d07d      	beq.n	800041a <HAL_GPIO_Init+0x182>
 800031e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000322:	4290      	cmp	r0, r2
 8000324:	d034      	beq.n	8000390 <HAL_GPIO_Init+0xf8>
 8000326:	2204      	movs	r2, #4
 8000328:	e035      	b.n	8000396 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 800032a:	4f4d      	ldr	r7, [pc, #308]	; (8000460 <HAL_GPIO_Init+0x1c8>)
 800032c:	42bc      	cmp	r4, r7
 800032e:	d014      	beq.n	800035a <HAL_GPIO_Init+0xc2>
 8000330:	d90b      	bls.n	800034a <HAL_GPIO_Init+0xb2>
 8000332:	4f4c      	ldr	r7, [pc, #304]	; (8000464 <HAL_GPIO_Init+0x1cc>)
 8000334:	42bc      	cmp	r4, r7
 8000336:	d010      	beq.n	800035a <HAL_GPIO_Init+0xc2>
 8000338:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800033c:	42bc      	cmp	r4, r7
 800033e:	d00c      	beq.n	800035a <HAL_GPIO_Init+0xc2>
 8000340:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000344:	42bc      	cmp	r4, r7
 8000346:	d1b1      	bne.n	80002ac <HAL_GPIO_Init+0x14>
 8000348:	e007      	b.n	800035a <HAL_GPIO_Init+0xc2>
 800034a:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800034e:	42bc      	cmp	r4, r7
 8000350:	d003      	beq.n	800035a <HAL_GPIO_Init+0xc2>
 8000352:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000356:	42bc      	cmp	r4, r7
 8000358:	d1a8      	bne.n	80002ac <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800035a:	688c      	ldr	r4, [r1, #8]
 800035c:	b17c      	cbz	r4, 800037e <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800035e:	2c01      	cmp	r4, #1
 8000360:	d008      	beq.n	8000374 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 8000362:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000364:	2608      	movs	r6, #8
 8000366:	e7a1      	b.n	80002ac <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000368:	68ce      	ldr	r6, [r1, #12]
 800036a:	3608      	adds	r6, #8
          break;
 800036c:	e79e      	b.n	80002ac <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800036e:	68ce      	ldr	r6, [r1, #12]
 8000370:	360c      	adds	r6, #12
          break;
 8000372:	e79b      	b.n	80002ac <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000374:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000376:	2608      	movs	r6, #8
 8000378:	e798      	b.n	80002ac <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800037a:	2600      	movs	r6, #0
 800037c:	e796      	b.n	80002ac <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800037e:	2604      	movs	r6, #4
 8000380:	e794      	b.n	80002ac <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000382:	f100 0c04 	add.w	ip, r0, #4
 8000386:	e794      	b.n	80002b2 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000388:	f1a5 0408 	sub.w	r4, r5, #8
 800038c:	00a4      	lsls	r4, r4, #2
 800038e:	e793      	b.n	80002b8 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000390:	2203      	movs	r2, #3
 8000392:	e000      	b.n	8000396 <HAL_GPIO_Init+0xfe>
 8000394:	2200      	movs	r2, #0
 8000396:	40ba      	lsls	r2, r7
 8000398:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 800039c:	3402      	adds	r4, #2
 800039e:	4f2e      	ldr	r7, [pc, #184]	; (8000458 <HAL_GPIO_Init+0x1c0>)
 80003a0:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003a4:	684a      	ldr	r2, [r1, #4]
 80003a6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80003aa:	d038      	beq.n	800041e <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003ac:	4c2e      	ldr	r4, [pc, #184]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 80003ae:	6822      	ldr	r2, [r4, #0]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003b4:	684a      	ldr	r2, [r1, #4]
 80003b6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80003ba:	d036      	beq.n	800042a <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003bc:	4c2a      	ldr	r4, [pc, #168]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 80003be:	6862      	ldr	r2, [r4, #4]
 80003c0:	431a      	orrs	r2, r3
 80003c2:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003c4:	684a      	ldr	r2, [r1, #4]
 80003c6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80003ca:	d034      	beq.n	8000436 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003cc:	4c26      	ldr	r4, [pc, #152]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 80003ce:	68a2      	ldr	r2, [r4, #8]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003d4:	684a      	ldr	r2, [r1, #4]
 80003d6:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80003da:	d032      	beq.n	8000442 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003dc:	4c22      	ldr	r4, [pc, #136]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 80003de:	68e2      	ldr	r2, [r4, #12]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003e4:	3501      	adds	r5, #1
 80003e6:	2d0f      	cmp	r5, #15
 80003e8:	d831      	bhi.n	800044e <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 80003ea:	2201      	movs	r2, #1
 80003ec:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003ee:	680b      	ldr	r3, [r1, #0]
 80003f0:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d1f6      	bne.n	80003e4 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80003f6:	684c      	ldr	r4, [r1, #4]
 80003f8:	2c12      	cmp	r4, #18
 80003fa:	d0b8      	beq.n	800036e <HAL_GPIO_Init+0xd6>
 80003fc:	d895      	bhi.n	800032a <HAL_GPIO_Init+0x92>
 80003fe:	2c02      	cmp	r4, #2
 8000400:	d0b2      	beq.n	8000368 <HAL_GPIO_Init+0xd0>
 8000402:	f67f af4e 	bls.w	80002a2 <HAL_GPIO_Init+0xa>
 8000406:	2c03      	cmp	r4, #3
 8000408:	d0b7      	beq.n	800037a <HAL_GPIO_Init+0xe2>
 800040a:	2c11      	cmp	r4, #17
 800040c:	f47f af4e 	bne.w	80002ac <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000410:	68ce      	ldr	r6, [r1, #12]
 8000412:	3604      	adds	r6, #4
          break;
 8000414:	e74a      	b.n	80002ac <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2201      	movs	r2, #1
 8000418:	e7bd      	b.n	8000396 <HAL_GPIO_Init+0xfe>
 800041a:	2202      	movs	r2, #2
 800041c:	e7bb      	b.n	8000396 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800041e:	4c12      	ldr	r4, [pc, #72]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 8000420:	6822      	ldr	r2, [r4, #0]
 8000422:	ea22 0203 	bic.w	r2, r2, r3
 8000426:	6022      	str	r2, [r4, #0]
 8000428:	e7c4      	b.n	80003b4 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800042a:	4c0f      	ldr	r4, [pc, #60]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 800042c:	6862      	ldr	r2, [r4, #4]
 800042e:	ea22 0203 	bic.w	r2, r2, r3
 8000432:	6062      	str	r2, [r4, #4]
 8000434:	e7c6      	b.n	80003c4 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000436:	4c0c      	ldr	r4, [pc, #48]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 8000438:	68a2      	ldr	r2, [r4, #8]
 800043a:	ea22 0203 	bic.w	r2, r2, r3
 800043e:	60a2      	str	r2, [r4, #8]
 8000440:	e7c8      	b.n	80003d4 <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000442:	4c09      	ldr	r4, [pc, #36]	; (8000468 <HAL_GPIO_Init+0x1d0>)
 8000444:	68e2      	ldr	r2, [r4, #12]
 8000446:	ea22 0303 	bic.w	r3, r2, r3
 800044a:	60e3      	str	r3, [r4, #12]
 800044c:	e7ca      	b.n	80003e4 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 800044e:	b002      	add	sp, #8
 8000450:	bcf0      	pop	{r4, r5, r6, r7}
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000
 8000458:	40010000 	.word	0x40010000
 800045c:	40010800 	.word	0x40010800
 8000460:	10210000 	.word	0x10210000
 8000464:	10310000 	.word	0x10310000
 8000468:	40010400 	.word	0x40010400

0800046c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800046c:	b912      	cbnz	r2, 8000474 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800046e:	0409      	lsls	r1, r1, #16
 8000470:	6101      	str	r1, [r0, #16]
  }
}
 8000472:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000474:	6101      	str	r1, [r0, #16]
 8000476:	4770      	bx	lr

08000478 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000478:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <RCC_Delay+0x24>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a08      	ldr	r2, [pc, #32]	; (80004a0 <RCC_Delay+0x28>)
 8000480:	fba2 2303 	umull	r2, r3, r2, r3
 8000484:	0a5b      	lsrs	r3, r3, #9
 8000486:	fb00 f003 	mul.w	r0, r0, r3
 800048a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800048c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800048e:	9b01      	ldr	r3, [sp, #4]
 8000490:	1e5a      	subs	r2, r3, #1
 8000492:	9201      	str	r2, [sp, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d1f9      	bne.n	800048c <RCC_Delay+0x14>
}
 8000498:	b002      	add	sp, #8
 800049a:	4770      	bx	lr
 800049c:	20000008 	.word	0x20000008
 80004a0:	10624dd3 	.word	0x10624dd3

080004a4 <HAL_RCC_OscConfig>:
{
 80004a4:	b570      	push	{r4, r5, r6, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004aa:	6803      	ldr	r3, [r0, #0]
 80004ac:	f013 0f01 	tst.w	r3, #1
 80004b0:	d02c      	beq.n	800050c <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b2:	4bab      	ldr	r3, [pc, #684]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80004b4:	685b      	ldr	r3, [r3, #4]
 80004b6:	f003 030c 	and.w	r3, r3, #12
 80004ba:	2b04      	cmp	r3, #4
 80004bc:	d01d      	beq.n	80004fa <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004be:	4ba8      	ldr	r3, [pc, #672]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	f003 030c 	and.w	r3, r3, #12
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	d012      	beq.n	80004f0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004ca:	6863      	ldr	r3, [r4, #4]
 80004cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004d0:	d041      	beq.n	8000556 <HAL_RCC_OscConfig+0xb2>
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d155      	bne.n	8000582 <HAL_RCC_OscConfig+0xde>
 80004d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80004da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	e037      	b.n	8000560 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004f0:	4b9b      	ldr	r3, [pc, #620]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80004f8:	d0e7      	beq.n	80004ca <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fa:	4b99      	ldr	r3, [pc, #612]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000502:	d003      	beq.n	800050c <HAL_RCC_OscConfig+0x68>
 8000504:	6863      	ldr	r3, [r4, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	f000 81ae 	beq.w	8000868 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050c:	6823      	ldr	r3, [r4, #0]
 800050e:	f013 0f02 	tst.w	r3, #2
 8000512:	d076      	beq.n	8000602 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000514:	4b92      	ldr	r3, [pc, #584]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f013 0f0c 	tst.w	r3, #12
 800051c:	d05f      	beq.n	80005de <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800051e:	4b90      	ldr	r3, [pc, #576]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000520:	685b      	ldr	r3, [r3, #4]
 8000522:	f003 030c 	and.w	r3, r3, #12
 8000526:	2b08      	cmp	r3, #8
 8000528:	d054      	beq.n	80005d4 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800052a:	6923      	ldr	r3, [r4, #16]
 800052c:	2b00      	cmp	r3, #0
 800052e:	f000 808a 	beq.w	8000646 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8000532:	4b8c      	ldr	r3, [pc, #560]	; (8000764 <HAL_RCC_OscConfig+0x2c0>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000538:	f7ff fe40 	bl	80001bc <HAL_GetTick>
 800053c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800053e:	4b88      	ldr	r3, [pc, #544]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	f013 0f02 	tst.w	r3, #2
 8000546:	d175      	bne.n	8000634 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000548:	f7ff fe38 	bl	80001bc <HAL_GetTick>
 800054c:	1b40      	subs	r0, r0, r5
 800054e:	2802      	cmp	r0, #2
 8000550:	d9f5      	bls.n	800053e <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000552:	2003      	movs	r0, #3
 8000554:	e18b      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000556:	4a82      	ldr	r2, [pc, #520]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000558:	6813      	ldr	r3, [r2, #0]
 800055a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000560:	6863      	ldr	r3, [r4, #4]
 8000562:	b343      	cbz	r3, 80005b6 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000564:	f7ff fe2a 	bl	80001bc <HAL_GetTick>
 8000568:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800056a:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000572:	d1cb      	bne.n	800050c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000574:	f7ff fe22 	bl	80001bc <HAL_GetTick>
 8000578:	1b40      	subs	r0, r0, r5
 800057a:	2864      	cmp	r0, #100	; 0x64
 800057c:	d9f5      	bls.n	800056a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800057e:	2003      	movs	r0, #3
 8000580:	e175      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000582:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000586:	d009      	beq.n	800059c <HAL_RCC_OscConfig+0xf8>
 8000588:	4b75      	ldr	r3, [pc, #468]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	e7e1      	b.n	8000560 <HAL_RCC_OscConfig+0xbc>
 800059c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005a0:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	e7d4      	b.n	8000560 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80005b6:	f7ff fe01 	bl	80001bc <HAL_GetTick>
 80005ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005bc:	4b68      	ldr	r3, [pc, #416]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005c4:	d0a2      	beq.n	800050c <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c6:	f7ff fdf9 	bl	80001bc <HAL_GetTick>
 80005ca:	1b40      	subs	r0, r0, r5
 80005cc:	2864      	cmp	r0, #100	; 0x64
 80005ce:	d9f5      	bls.n	80005bc <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80005d0:	2003      	movs	r0, #3
 80005d2:	e14c      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005d4:	4b62      	ldr	r3, [pc, #392]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005dc:	d1a5      	bne.n	800052a <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005de:	4b60      	ldr	r3, [pc, #384]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f013 0f02 	tst.w	r3, #2
 80005e6:	d004      	beq.n	80005f2 <HAL_RCC_OscConfig+0x14e>
 80005e8:	6923      	ldr	r3, [r4, #16]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d001      	beq.n	80005f2 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80005ee:	2001      	movs	r0, #1
 80005f0:	e13d      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005f2:	4a5b      	ldr	r2, [pc, #364]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80005f4:	6813      	ldr	r3, [r2, #0]
 80005f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005fa:	6961      	ldr	r1, [r4, #20]
 80005fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000600:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	f013 0f08 	tst.w	r3, #8
 8000608:	d032      	beq.n	8000670 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800060a:	69a3      	ldr	r3, [r4, #24]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d05b      	beq.n	80006c8 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8000610:	4b55      	ldr	r3, [pc, #340]	; (8000768 <HAL_RCC_OscConfig+0x2c4>)
 8000612:	2201      	movs	r2, #1
 8000614:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000616:	f7ff fdd1 	bl	80001bc <HAL_GetTick>
 800061a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800061c:	4b50      	ldr	r3, [pc, #320]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800061e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000620:	f013 0f02 	tst.w	r3, #2
 8000624:	d121      	bne.n	800066a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000626:	f7ff fdc9 	bl	80001bc <HAL_GetTick>
 800062a:	1b40      	subs	r0, r0, r5
 800062c:	2802      	cmp	r0, #2
 800062e:	d9f5      	bls.n	800061c <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000630:	2003      	movs	r0, #3
 8000632:	e11c      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000634:	4a4a      	ldr	r2, [pc, #296]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000636:	6813      	ldr	r3, [r2, #0]
 8000638:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800063c:	6961      	ldr	r1, [r4, #20]
 800063e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	e7dd      	b.n	8000602 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000646:	4b47      	ldr	r3, [pc, #284]	; (8000764 <HAL_RCC_OscConfig+0x2c0>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800064c:	f7ff fdb6 	bl	80001bc <HAL_GetTick>
 8000650:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f013 0f02 	tst.w	r3, #2
 800065a:	d0d2      	beq.n	8000602 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800065c:	f7ff fdae 	bl	80001bc <HAL_GetTick>
 8000660:	1b40      	subs	r0, r0, r5
 8000662:	2802      	cmp	r0, #2
 8000664:	d9f5      	bls.n	8000652 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000666:	2003      	movs	r0, #3
 8000668:	e101      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800066a:	2001      	movs	r0, #1
 800066c:	f7ff ff04 	bl	8000478 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000670:	6823      	ldr	r3, [r4, #0]
 8000672:	f013 0f04 	tst.w	r3, #4
 8000676:	f000 8097 	beq.w	80007a8 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800067a:	4b39      	ldr	r3, [pc, #228]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000682:	d133      	bne.n	80006ec <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b36      	ldr	r3, [pc, #216]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800068c:	61da      	str	r2, [r3, #28]
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000698:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800069a:	4b34      	ldr	r3, [pc, #208]	; (800076c <HAL_RCC_OscConfig+0x2c8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f413 7f80 	tst.w	r3, #256	; 0x100
 80006a2:	d025      	beq.n	80006f0 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006a4:	68e3      	ldr	r3, [r4, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d036      	beq.n	8000718 <HAL_RCC_OscConfig+0x274>
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d14c      	bne.n	8000748 <HAL_RCC_OscConfig+0x2a4>
 80006ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006b6:	6a1a      	ldr	r2, [r3, #32]
 80006b8:	f022 0201 	bic.w	r2, r2, #1
 80006bc:	621a      	str	r2, [r3, #32]
 80006be:	6a1a      	ldr	r2, [r3, #32]
 80006c0:	f022 0204 	bic.w	r2, r2, #4
 80006c4:	621a      	str	r2, [r3, #32]
 80006c6:	e02c      	b.n	8000722 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <HAL_RCC_OscConfig+0x2c4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fd75 	bl	80001bc <HAL_GetTick>
 80006d2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 80006d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d8:	f013 0f02 	tst.w	r3, #2
 80006dc:	d0c8      	beq.n	8000670 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006de:	f7ff fd6d 	bl	80001bc <HAL_GetTick>
 80006e2:	1b40      	subs	r0, r0, r5
 80006e4:	2802      	cmp	r0, #2
 80006e6:	d9f5      	bls.n	80006d4 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 80006e8:	2003      	movs	r0, #3
 80006ea:	e0c0      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 80006ec:	2500      	movs	r5, #0
 80006ee:	e7d4      	b.n	800069a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006f0:	4a1e      	ldr	r2, [pc, #120]	; (800076c <HAL_RCC_OscConfig+0x2c8>)
 80006f2:	6813      	ldr	r3, [r2, #0]
 80006f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006f8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80006fa:	f7ff fd5f 	bl	80001bc <HAL_GetTick>
 80006fe:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <HAL_RCC_OscConfig+0x2c8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000708:	d1cc      	bne.n	80006a4 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800070a:	f7ff fd57 	bl	80001bc <HAL_GetTick>
 800070e:	1b80      	subs	r0, r0, r6
 8000710:	2864      	cmp	r0, #100	; 0x64
 8000712:	d9f5      	bls.n	8000700 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8000714:	2003      	movs	r0, #3
 8000716:	e0aa      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800071a:	6a13      	ldr	r3, [r2, #32]
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000722:	68e3      	ldr	r3, [r4, #12]
 8000724:	b373      	cbz	r3, 8000784 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 8000726:	f7ff fd49 	bl	80001bc <HAL_GetTick>
 800072a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800072e:	6a1b      	ldr	r3, [r3, #32]
 8000730:	f013 0f02 	tst.w	r3, #2
 8000734:	d137      	bne.n	80007a6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000736:	f7ff fd41 	bl	80001bc <HAL_GetTick>
 800073a:	1b80      	subs	r0, r0, r6
 800073c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000740:	4298      	cmp	r0, r3
 8000742:	d9f3      	bls.n	800072c <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8000744:	2003      	movs	r0, #3
 8000746:	e092      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	2b05      	cmp	r3, #5
 800074a:	d011      	beq.n	8000770 <HAL_RCC_OscConfig+0x2cc>
 800074c:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_RCC_OscConfig+0x2bc>)
 800074e:	6a1a      	ldr	r2, [r3, #32]
 8000750:	f022 0201 	bic.w	r2, r2, #1
 8000754:	621a      	str	r2, [r3, #32]
 8000756:	6a1a      	ldr	r2, [r3, #32]
 8000758:	f022 0204 	bic.w	r2, r2, #4
 800075c:	621a      	str	r2, [r3, #32]
 800075e:	e7e0      	b.n	8000722 <HAL_RCC_OscConfig+0x27e>
 8000760:	40021000 	.word	0x40021000
 8000764:	42420000 	.word	0x42420000
 8000768:	42420480 	.word	0x42420480
 800076c:	40007000 	.word	0x40007000
 8000770:	4b41      	ldr	r3, [pc, #260]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 8000772:	6a1a      	ldr	r2, [r3, #32]
 8000774:	f042 0204 	orr.w	r2, r2, #4
 8000778:	621a      	str	r2, [r3, #32]
 800077a:	6a1a      	ldr	r2, [r3, #32]
 800077c:	f042 0201 	orr.w	r2, r2, #1
 8000780:	621a      	str	r2, [r3, #32]
 8000782:	e7ce      	b.n	8000722 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8000784:	f7ff fd1a 	bl	80001bc <HAL_GetTick>
 8000788:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800078a:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 800078c:	6a1b      	ldr	r3, [r3, #32]
 800078e:	f013 0f02 	tst.w	r3, #2
 8000792:	d008      	beq.n	80007a6 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000794:	f7ff fd12 	bl	80001bc <HAL_GetTick>
 8000798:	1b80      	subs	r0, r0, r6
 800079a:	f241 3388 	movw	r3, #5000	; 0x1388
 800079e:	4298      	cmp	r0, r3
 80007a0:	d9f3      	bls.n	800078a <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80007a2:	2003      	movs	r0, #3
 80007a4:	e063      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80007a6:	b9e5      	cbnz	r5, 80007e2 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007a8:	69e3      	ldr	r3, [r4, #28]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d05e      	beq.n	800086c <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007ae:	4a32      	ldr	r2, [pc, #200]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 80007b0:	6852      	ldr	r2, [r2, #4]
 80007b2:	f002 020c 	and.w	r2, r2, #12
 80007b6:	2a08      	cmp	r2, #8
 80007b8:	d05b      	beq.n	8000872 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d017      	beq.n	80007ee <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80007be:	4b2f      	ldr	r3, [pc, #188]	; (800087c <HAL_RCC_OscConfig+0x3d8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007c4:	f7ff fcfa 	bl	80001bc <HAL_GetTick>
 80007c8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80007d2:	d047      	beq.n	8000864 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007d4:	f7ff fcf2 	bl	80001bc <HAL_GetTick>
 80007d8:	1b00      	subs	r0, r0, r4
 80007da:	2802      	cmp	r0, #2
 80007dc:	d9f5      	bls.n	80007ca <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80007de:	2003      	movs	r0, #3
 80007e0:	e045      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 80007e4:	69d3      	ldr	r3, [r2, #28]
 80007e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	e7dc      	b.n	80007a8 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <HAL_RCC_OscConfig+0x3d8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007f4:	f7ff fce2 	bl	80001bc <HAL_GetTick>
 80007f8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000802:	d006      	beq.n	8000812 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000804:	f7ff fcda 	bl	80001bc <HAL_GetTick>
 8000808:	1b40      	subs	r0, r0, r5
 800080a:	2802      	cmp	r0, #2
 800080c:	d9f5      	bls.n	80007fa <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 800080e:	2003      	movs	r0, #3
 8000810:	e02d      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000812:	6a23      	ldr	r3, [r4, #32]
 8000814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000818:	d01a      	beq.n	8000850 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800081a:	4917      	ldr	r1, [pc, #92]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 800081c:	684b      	ldr	r3, [r1, #4]
 800081e:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000822:	6a22      	ldr	r2, [r4, #32]
 8000824:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000826:	4302      	orrs	r2, r0
 8000828:	4313      	orrs	r3, r2
 800082a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_RCC_OscConfig+0x3d8>)
 800082e:	2201      	movs	r2, #1
 8000830:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000832:	f7ff fcc3 	bl	80001bc <HAL_GetTick>
 8000836:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000840:	d10e      	bne.n	8000860 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000842:	f7ff fcbb 	bl	80001bc <HAL_GetTick>
 8000846:	1b00      	subs	r0, r0, r4
 8000848:	2802      	cmp	r0, #2
 800084a:	d9f5      	bls.n	8000838 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 800084c:	2003      	movs	r0, #3
 800084e:	e00e      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <HAL_RCC_OscConfig+0x3d4>)
 8000852:	6853      	ldr	r3, [r2, #4]
 8000854:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000858:	68a1      	ldr	r1, [r4, #8]
 800085a:	430b      	orrs	r3, r1
 800085c:	6053      	str	r3, [r2, #4]
 800085e:	e7dc      	b.n	800081a <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000860:	2000      	movs	r0, #0
 8000862:	e004      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
 8000864:	2000      	movs	r0, #0
 8000866:	e002      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000868:	2001      	movs	r0, #1
 800086a:	e000      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800086c:	2000      	movs	r0, #0
}
 800086e:	b002      	add	sp, #8
 8000870:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000872:	2001      	movs	r0, #1
 8000874:	e7fb      	b.n	800086e <HAL_RCC_OscConfig+0x3ca>
 8000876:	bf00      	nop
 8000878:	40021000 	.word	0x40021000
 800087c:	42420060 	.word	0x42420060

08000880 <HAL_RCC_GetSysClockFreq>:
{
 8000880:	b410      	push	{r4}
 8000882:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000884:	4c16      	ldr	r4, [pc, #88]	; (80008e0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000886:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800088a:	f10d 0c18 	add.w	ip, sp, #24
 800088e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000892:	8a23      	ldrh	r3, [r4, #16]
 8000894:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x64>)
 800089a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800089c:	f003 020c 	and.w	r2, r3, #12
 80008a0:	2a08      	cmp	r2, #8
 80008a2:	d11a      	bne.n	80008da <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008a4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008a8:	4462      	add	r2, ip
 80008aa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008b2:	d105      	bne.n	80008c0 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008b4:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_RCC_GetSysClockFreq+0x68>)
 80008b6:	fb00 f002 	mul.w	r0, r0, r2
}
 80008ba:	b007      	add	sp, #28
 80008bc:	bc10      	pop	{r4}
 80008be:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_RCC_GetSysClockFreq+0x64>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80008c8:	4463      	add	r3, ip
 80008ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80008ce:	4807      	ldr	r0, [pc, #28]	; (80008ec <HAL_RCC_GetSysClockFreq+0x6c>)
 80008d0:	fb00 f002 	mul.w	r0, r0, r2
 80008d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80008d8:	e7ef      	b.n	80008ba <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80008dc:	e7ed      	b.n	80008ba <HAL_RCC_GetSysClockFreq+0x3a>
 80008de:	bf00      	nop
 80008e0:	08001708 	.word	0x08001708
 80008e4:	40021000 	.word	0x40021000
 80008e8:	003d0900 	.word	0x003d0900
 80008ec:	007a1200 	.word	0x007a1200

080008f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f0:	4b62      	ldr	r3, [pc, #392]	; (8000a7c <HAL_RCC_ClockConfig+0x18c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 0307 	and.w	r3, r3, #7
 80008f8:	428b      	cmp	r3, r1
 80008fa:	d20c      	bcs.n	8000916 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008fc:	4a5f      	ldr	r2, [pc, #380]	; (8000a7c <HAL_RCC_ClockConfig+0x18c>)
 80008fe:	6813      	ldr	r3, [r2, #0]
 8000900:	f023 0307 	bic.w	r3, r3, #7
 8000904:	430b      	orrs	r3, r1
 8000906:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000908:	6813      	ldr	r3, [r2, #0]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	428b      	cmp	r3, r1
 8000910:	d001      	beq.n	8000916 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8000912:	2001      	movs	r0, #1
}
 8000914:	4770      	bx	lr
{
 8000916:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	f013 0f02 	tst.w	r3, #2
 800091e:	d017      	beq.n	8000950 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000920:	f013 0f04 	tst.w	r3, #4
 8000924:	d004      	beq.n	8000930 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000926:	4a56      	ldr	r2, [pc, #344]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000928:	6853      	ldr	r3, [r2, #4]
 800092a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800092e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000930:	6803      	ldr	r3, [r0, #0]
 8000932:	f013 0f08 	tst.w	r3, #8
 8000936:	d004      	beq.n	8000942 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000938:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 800093a:	6853      	ldr	r3, [r2, #4]
 800093c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000940:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000942:	4a4f      	ldr	r2, [pc, #316]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000944:	6853      	ldr	r3, [r2, #4]
 8000946:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800094a:	6884      	ldr	r4, [r0, #8]
 800094c:	4323      	orrs	r3, r4
 800094e:	6053      	str	r3, [r2, #4]
 8000950:	460d      	mov	r5, r1
 8000952:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	f013 0f01 	tst.w	r3, #1
 800095a:	d052      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800095c:	6843      	ldr	r3, [r0, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d023      	beq.n	80009aa <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000962:	2b02      	cmp	r3, #2
 8000964:	d028      	beq.n	80009b8 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000966:	4a46      	ldr	r2, [pc, #280]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	f012 0f02 	tst.w	r2, #2
 800096e:	f000 8082 	beq.w	8000a76 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000972:	4943      	ldr	r1, [pc, #268]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000974:	684a      	ldr	r2, [r1, #4]
 8000976:	f022 0203 	bic.w	r2, r2, #3
 800097a:	4313      	orrs	r3, r2
 800097c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800097e:	f7ff fc1d 	bl	80001bc <HAL_GetTick>
 8000982:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d01d      	beq.n	80009c6 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098a:	2b02      	cmp	r3, #2
 800098c:	d02a      	beq.n	80009e4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f013 0f0c 	tst.w	r3, #12
 8000996:	d034      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000998:	f7ff fc10 	bl	80001bc <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	f241 3388 	movw	r3, #5000	; 0x1388
 80009a2:	4298      	cmp	r0, r3
 80009a4:	d9f3      	bls.n	800098e <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80009a6:	2003      	movs	r0, #3
 80009a8:	e064      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009aa:	4a35      	ldr	r2, [pc, #212]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 80009ac:	6812      	ldr	r2, [r2, #0]
 80009ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80009b2:	d1de      	bne.n	8000972 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009b4:	2001      	movs	r0, #1
 80009b6:	e05d      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009b8:	4a31      	ldr	r2, [pc, #196]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 80009ba:	6812      	ldr	r2, [r2, #0]
 80009bc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80009c0:	d1d7      	bne.n	8000972 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
 80009c4:	e056      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 030c 	and.w	r3, r3, #12
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d017      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d2:	f7ff fbf3 	bl	80001bc <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80009dc:	4298      	cmp	r0, r3
 80009de:	d9f2      	bls.n	80009c6 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 80009e0:	2003      	movs	r0, #3
 80009e2:	e047      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f003 030c 	and.w	r3, r3, #12
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d008      	beq.n	8000a02 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009f0:	f7ff fbe4 	bl	80001bc <HAL_GetTick>
 80009f4:	1b80      	subs	r0, r0, r6
 80009f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009fa:	4298      	cmp	r0, r3
 80009fc:	d9f2      	bls.n	80009e4 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 80009fe:	2003      	movs	r0, #3
 8000a00:	e038      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a02:	4b1e      	ldr	r3, [pc, #120]	; (8000a7c <HAL_RCC_ClockConfig+0x18c>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	42ab      	cmp	r3, r5
 8000a0c:	d90c      	bls.n	8000a28 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a0e:	4a1b      	ldr	r2, [pc, #108]	; (8000a7c <HAL_RCC_ClockConfig+0x18c>)
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	f023 0307 	bic.w	r3, r3, #7
 8000a16:	432b      	orrs	r3, r5
 8000a18:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d001      	beq.n	8000a28 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
 8000a26:	e025      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	f013 0f04 	tst.w	r3, #4
 8000a2e:	d006      	beq.n	8000a3e <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a30:	4a13      	ldr	r2, [pc, #76]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000a32:	6853      	ldr	r3, [r2, #4]
 8000a34:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a38:	68e1      	ldr	r1, [r4, #12]
 8000a3a:	430b      	orrs	r3, r1
 8000a3c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	f013 0f08 	tst.w	r3, #8
 8000a44:	d007      	beq.n	8000a56 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000a48:	6853      	ldr	r3, [r2, #4]
 8000a4a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a4e:	6921      	ldr	r1, [r4, #16]
 8000a50:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a54:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a56:	f7ff ff13 	bl	8000880 <HAL_RCC_GetSysClockFreq>
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_RCC_ClockConfig+0x190>)
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a62:	4a08      	ldr	r2, [pc, #32]	; (8000a84 <HAL_RCC_ClockConfig+0x194>)
 8000a64:	5cd3      	ldrb	r3, [r2, r3]
 8000a66:	40d8      	lsrs	r0, r3
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_RCC_ClockConfig+0x198>)
 8000a6a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fb6d 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a72:	2000      	movs	r0, #0
}
 8000a74:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000a76:	2001      	movs	r0, #1
 8000a78:	e7fc      	b.n	8000a74 <HAL_RCC_ClockConfig+0x184>
 8000a7a:	bf00      	nop
 8000a7c:	40022000 	.word	0x40022000
 8000a80:	40021000 	.word	0x40021000
 8000a84:	0800171c 	.word	0x0800171c
 8000a88:	20000008 	.word	0x20000008

08000a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8e:	4605      	mov	r5, r0
 8000a90:	460f      	mov	r7, r1
 8000a92:	4616      	mov	r6, r2
 8000a94:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000a96:	e03b      	b.n	8000b10 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000a98:	b12c      	cbz	r4, 8000aa6 <SPI_WaitFlagStateUntilTimeout+0x1a>
 8000a9a:	f7ff fb8f 	bl	80001bc <HAL_GetTick>
 8000a9e:	9b06      	ldr	r3, [sp, #24]
 8000aa0:	1ac0      	subs	r0, r0, r3
 8000aa2:	42a0      	cmp	r0, r4
 8000aa4:	d334      	bcc.n	8000b10 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000aa6:	682a      	ldr	r2, [r5, #0]
 8000aa8:	6853      	ldr	r3, [r2, #4]
 8000aaa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000aae:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ab0:	686b      	ldr	r3, [r5, #4]
 8000ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000ab6:	d00b      	beq.n	8000ad0 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000abe:	d014      	beq.n	8000aea <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8000acc:	2003      	movs	r0, #3
 8000ace:	e027      	b.n	8000b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000ad0:	68ab      	ldr	r3, [r5, #8]
 8000ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ad6:	d002      	beq.n	8000ade <SPI_WaitFlagStateUntilTimeout+0x52>
 8000ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000adc:	d1ec      	bne.n	8000ab8 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8000ade:	682a      	ldr	r2, [r5, #0]
 8000ae0:	6813      	ldr	r3, [r2, #0]
 8000ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	e7e6      	b.n	8000ab8 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8000aea:	682a      	ldr	r2, [r5, #0]
 8000aec:	6813      	ldr	r3, [r2, #0]
 8000aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	0c1b      	lsrs	r3, r3, #16
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	682a      	ldr	r2, [r5, #0]
 8000afa:	6813      	ldr	r3, [r2, #0]
 8000afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	e7dd      	b.n	8000ac0 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b04:	2301      	movs	r3, #1
 8000b06:	42b3      	cmp	r3, r6
 8000b08:	d009      	beq.n	8000b1e <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8000b0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b0e:	d1c3      	bne.n	8000a98 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	ea37 0303 	bics.w	r3, r7, r3
 8000b18:	d0f4      	beq.n	8000b04 <SPI_WaitFlagStateUntilTimeout+0x78>
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e7f3      	b.n	8000b06 <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8000b1e:	2000      	movs	r0, #0
}
 8000b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b22 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000b22:	b510      	push	{r4, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000b28:	9200      	str	r2, [sp, #0]
 8000b2a:	460b      	mov	r3, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	f7ff ffac 	bl	8000a8c <SPI_WaitFlagStateUntilTimeout>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b910      	cbnz	r0, 8000b3e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	b002      	add	sp, #8
 8000b3c:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000b40:	f043 0320 	orr.w	r3, r3, #32
 8000b44:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e7f6      	b.n	8000b38 <SPI_CheckFlag_BSY+0x16>

08000b4a <HAL_SPI_Transmit>:
{
 8000b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000b52:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	f000 80c8 	beq.w	8000cec <HAL_SPI_Transmit+0x1a2>
 8000b5c:	4604      	mov	r4, r0
 8000b5e:	460d      	mov	r5, r1
 8000b60:	4690      	mov	r8, r2
 8000b62:	2301      	movs	r3, #1
 8000b64:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000b68:	f7ff fb28 	bl	80001bc <HAL_GetTick>
 8000b6c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000b6e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d00a      	beq.n	8000b8e <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8000b78:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	b004      	add	sp, #16
 8000b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80a4 	beq.w	8000cdc <HAL_SPI_Transmit+0x192>
 8000b94:	f1b8 0f00 	cmp.w	r8, #0
 8000b98:	f000 80a2 	beq.w	8000ce0 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000ba6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000ba8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000bac:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000bb0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000bb2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000bb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000bb6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000bb8:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000bba:	68a3      	ldr	r3, [r4, #8]
 8000bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bc0:	d01b      	beq.n	8000bfa <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000bca:	d103      	bne.n	8000bd4 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bd2:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000bd4:	68e3      	ldr	r3, [r4, #12]
 8000bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000bda:	d014      	beq.n	8000c06 <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000bdc:	6863      	ldr	r3, [r4, #4]
 8000bde:	b11b      	cbz	r3, 8000be8 <HAL_SPI_Transmit+0x9e>
 8000be0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d13e      	bne.n	8000c66 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000be8:	6823      	ldr	r3, [r4, #0]
 8000bea:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000bee:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000bf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000bf8:	e035      	b.n	8000c66 <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e7dd      	b.n	8000bc2 <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000c06:	6863      	ldr	r3, [r4, #4]
 8000c08:	b11b      	cbz	r3, 8000c12 <HAL_SPI_Transmit+0xc8>
 8000c0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10d      	bne.n	8000c2e <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c18:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000c22:	e004      	b.n	8000c2e <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d05d      	beq.n	8000ce4 <HAL_SPI_Transmit+0x19a>
 8000c28:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000c2c:	d10f      	bne.n	8000c4e <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8000c2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b37b      	cbz	r3, 8000c94 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	f012 0f02 	tst.w	r2, #2
 8000c3c:	d0f2      	beq.n	8000c24 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000c3e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c42:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000c44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c46:	3b01      	subs	r3, #1
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000c4c:	e7ef      	b.n	8000c2e <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000c4e:	f7ff fab5 	bl	80001bc <HAL_GetTick>
 8000c52:	1bc0      	subs	r0, r0, r7
 8000c54:	42b0      	cmp	r0, r6
 8000c56:	d3ea      	bcc.n	8000c2e <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e78e      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d043      	beq.n	8000ce8 <HAL_SPI_Transmit+0x19e>
 8000c60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000c64:	d10f      	bne.n	8000c86 <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8000c66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	b19b      	cbz	r3, 8000c94 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	f012 0f02 	tst.w	r2, #2
 8000c74:	d0f2      	beq.n	8000c5c <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000c76:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000c7a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000c7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000c84:	e7ef      	b.n	8000c66 <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000c86:	f7ff fa99 	bl	80001bc <HAL_GetTick>
 8000c8a:	1bc0      	subs	r0, r0, r7
 8000c8c:	42b0      	cmp	r0, r6
 8000c8e:	d3ea      	bcc.n	8000c66 <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e772      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000c94:	9700      	str	r7, [sp, #0]
 8000c96:	4633      	mov	r3, r6
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff fef5 	bl	8000a8c <SPI_WaitFlagStateUntilTimeout>
 8000ca2:	b108      	cbz	r0, 8000ca8 <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	e768      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000ca8:	463a      	mov	r2, r7
 8000caa:	4631      	mov	r1, r6
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff ff38 	bl	8000b22 <SPI_CheckFlag_BSY>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	b118      	cbz	r0, 8000cbe <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
    goto error;
 8000cbc:	e75d      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000cbe:	68a2      	ldr	r2, [r4, #8]
 8000cc0:	b932      	cbnz	r2, 8000cd0 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000cc2:	9203      	str	r2, [sp, #12]
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	68d1      	ldr	r1, [r2, #12]
 8000cc8:	9103      	str	r1, [sp, #12]
 8000cca:	6892      	ldr	r2, [r2, #8]
 8000ccc:	9203      	str	r2, [sp, #12]
 8000cce:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	f43f af51 	beq.w	8000b7a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e74e      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e74c      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e74a      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	e748      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e746      	b.n	8000b7a <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8000cec:	2302      	movs	r3, #2
 8000cee:	e74a      	b.n	8000b86 <HAL_SPI_Transmit+0x3c>

08000cf0 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d03c      	beq.n	8000d6e <HAL_SPI_Init+0x7e>
{
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000cfc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d031      	beq.n	8000d68 <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d04:	2302      	movs	r3, #2
 8000d06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	6813      	ldr	r3, [r2, #0]
 8000d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d12:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	68a2      	ldr	r2, [r4, #8]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	68e2      	ldr	r2, [r4, #12]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	6922      	ldr	r2, [r4, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	6962      	ldr	r2, [r4, #20]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	69a2      	ldr	r2, [r4, #24]
 8000d28:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	69e2      	ldr	r2, [r4, #28]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	6a22      	ldr	r2, [r4, #32]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000d38:	6822      	ldr	r2, [r4, #0]
 8000d3a:	430b      	orrs	r3, r1
 8000d3c:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000d3e:	8b63      	ldrh	r3, [r4, #26]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	430b      	orrs	r3, r1
 8000d4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d50:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000d52:	6822      	ldr	r2, [r4, #0]
 8000d54:	69d3      	ldr	r3, [r2, #28]
 8000d56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d5a:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000d60:	2301      	movs	r3, #1
 8000d62:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000d66:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000d68:	f000 fa9c 	bl	80012a4 <HAL_SPI_MspInit>
 8000d6c:	e7ca      	b.n	8000d04 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000d6e:	2001      	movs	r0, #1
}
 8000d70:	4770      	bx	lr

08000d72 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000d72:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000d74:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d76:	6a04      	ldr	r4, [r0, #32]
 8000d78:	f024 0401 	bic.w	r4, r4, #1
 8000d7c:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d7e:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d80:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d84:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d88:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000d8c:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d8e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000d90:	6203      	str	r3, [r0, #32]
}
 8000d92:	bc10      	pop	{r4}
 8000d94:	4770      	bx	lr

08000d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000d96:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d98:	6a03      	ldr	r3, [r0, #32]
 8000d9a:	f023 0310 	bic.w	r3, r3, #16
 8000d9e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000da0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000da2:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000da4:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000da8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000db0:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000db4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000db6:	6203      	str	r3, [r0, #32]
}
 8000db8:	bc10      	pop	{r4}
 8000dba:	4770      	bx	lr

08000dbc <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000dbc:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dc2:	f041 0107 	orr.w	r1, r1, #7
 8000dc6:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000dc8:	6081      	str	r1, [r0, #8]
}
 8000dca:	4770      	bx	lr

08000dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000dcc:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000dce:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000dd0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000dd4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000dd8:	430b      	orrs	r3, r1
 8000dda:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ddc:	6083      	str	r3, [r0, #8]
}
 8000dde:	bc10      	pop	{r4}
 8000de0:	4770      	bx	lr

08000de2 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000de2:	6802      	ldr	r2, [r0, #0]
 8000de4:	68d3      	ldr	r3, [r2, #12]
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8000dec:	6802      	ldr	r2, [r0, #0]
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6013      	str	r3, [r2, #0]
}
 8000df6:	2000      	movs	r0, #0
 8000df8:	4770      	bx	lr

08000dfa <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000dfa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d07d      	beq.n	8000efe <HAL_TIM_ConfigClockSource+0x104>
{
 8000e02:	b510      	push	{r4, lr}
 8000e04:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000e06:	2301      	movs	r3, #1
 8000e08:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000e12:	6802      	ldr	r2, [r0, #0]
 8000e14:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000e1e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e20:	680b      	ldr	r3, [r1, #0]
 8000e22:	2b40      	cmp	r3, #64	; 0x40
 8000e24:	d057      	beq.n	8000ed6 <HAL_TIM_ConfigClockSource+0xdc>
 8000e26:	d910      	bls.n	8000e4a <HAL_TIM_ConfigClockSource+0x50>
 8000e28:	2b70      	cmp	r3, #112	; 0x70
 8000e2a:	d03e      	beq.n	8000eaa <HAL_TIM_ConfigClockSource+0xb0>
 8000e2c:	d81f      	bhi.n	8000e6e <HAL_TIM_ConfigClockSource+0x74>
 8000e2e:	2b50      	cmp	r3, #80	; 0x50
 8000e30:	d047      	beq.n	8000ec2 <HAL_TIM_ConfigClockSource+0xc8>
 8000e32:	2b60      	cmp	r3, #96	; 0x60
 8000e34:	d132      	bne.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000e36:	68ca      	ldr	r2, [r1, #12]
 8000e38:	6849      	ldr	r1, [r1, #4]
 8000e3a:	6800      	ldr	r0, [r0, #0]
 8000e3c:	f7ff ffab 	bl	8000d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000e40:	2160      	movs	r1, #96	; 0x60
 8000e42:	6820      	ldr	r0, [r4, #0]
 8000e44:	f7ff ffba 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000e48:	e028      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e4a:	2b10      	cmp	r3, #16
 8000e4c:	d04d      	beq.n	8000eea <HAL_TIM_ConfigClockSource+0xf0>
 8000e4e:	d908      	bls.n	8000e62 <HAL_TIM_ConfigClockSource+0x68>
 8000e50:	2b20      	cmp	r3, #32
 8000e52:	d04f      	beq.n	8000ef4 <HAL_TIM_ConfigClockSource+0xfa>
 8000e54:	2b30      	cmp	r3, #48	; 0x30
 8000e56:	d121      	bne.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8000e58:	2130      	movs	r1, #48	; 0x30
 8000e5a:	6800      	ldr	r0, [r0, #0]
 8000e5c:	f7ff ffae 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000e60:	e01c      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e62:	b9db      	cbnz	r3, 8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8000e64:	2100      	movs	r1, #0
 8000e66:	6800      	ldr	r0, [r0, #0]
 8000e68:	f7ff ffa8 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000e6c:	e016      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e72:	d00e      	beq.n	8000e92 <HAL_TIM_ConfigClockSource+0x98>
 8000e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e78:	d110      	bne.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8000e7a:	68cb      	ldr	r3, [r1, #12]
 8000e7c:	684a      	ldr	r2, [r1, #4]
 8000e7e:	6889      	ldr	r1, [r1, #8]
 8000e80:	6800      	ldr	r0, [r0, #0]
 8000e82:	f7ff ffa3 	bl	8000dcc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000e86:	6822      	ldr	r2, [r4, #0]
 8000e88:	6893      	ldr	r3, [r2, #8]
 8000e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8e:	6093      	str	r3, [r2, #8]
    break;
 8000e90:	e004      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000e92:	6802      	ldr	r2, [r0, #0]
 8000e94:	6893      	ldr	r3, [r2, #8]
 8000e96:	f023 0307 	bic.w	r3, r3, #7
 8000e9a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000ea8:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8000eaa:	68cb      	ldr	r3, [r1, #12]
 8000eac:	684a      	ldr	r2, [r1, #4]
 8000eae:	6889      	ldr	r1, [r1, #8]
 8000eb0:	6800      	ldr	r0, [r0, #0]
 8000eb2:	f7ff ff8b 	bl	8000dcc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000eb6:	6822      	ldr	r2, [r4, #0]
 8000eb8:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000eba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8000ebe:	6093      	str	r3, [r2, #8]
    break;
 8000ec0:	e7ec      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ec2:	68ca      	ldr	r2, [r1, #12]
 8000ec4:	6849      	ldr	r1, [r1, #4]
 8000ec6:	6800      	ldr	r0, [r0, #0]
 8000ec8:	f7ff ff53 	bl	8000d72 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000ecc:	2150      	movs	r1, #80	; 0x50
 8000ece:	6820      	ldr	r0, [r4, #0]
 8000ed0:	f7ff ff74 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000ed4:	e7e2      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000ed6:	68ca      	ldr	r2, [r1, #12]
 8000ed8:	6849      	ldr	r1, [r1, #4]
 8000eda:	6800      	ldr	r0, [r0, #0]
 8000edc:	f7ff ff49 	bl	8000d72 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000ee0:	2140      	movs	r1, #64	; 0x40
 8000ee2:	6820      	ldr	r0, [r4, #0]
 8000ee4:	f7ff ff6a 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000ee8:	e7d8      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8000eea:	2110      	movs	r1, #16
 8000eec:	6800      	ldr	r0, [r0, #0]
 8000eee:	f7ff ff65 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000ef2:	e7d3      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	6800      	ldr	r0, [r0, #0]
 8000ef8:	f7ff ff60 	bl	8000dbc <TIM_ITRx_SetConfig>
    break;
 8000efc:	e7ce      	b.n	8000e9c <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8000efe:	2002      	movs	r0, #2
}
 8000f00:	4770      	bx	lr
	...

08000f04 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8000f04:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f06:	4a1b      	ldr	r2, [pc, #108]	; (8000f74 <TIM_Base_SetConfig+0x70>)
 8000f08:	4290      	cmp	r0, r2
 8000f0a:	d00a      	beq.n	8000f22 <TIM_Base_SetConfig+0x1e>
 8000f0c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f10:	d007      	beq.n	8000f22 <TIM_Base_SetConfig+0x1e>
 8000f12:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f16:	4290      	cmp	r0, r2
 8000f18:	d003      	beq.n	8000f22 <TIM_Base_SetConfig+0x1e>
 8000f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f1e:	4290      	cmp	r0, r2
 8000f20:	d103      	bne.n	8000f2a <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f26:	684a      	ldr	r2, [r1, #4]
 8000f28:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <TIM_Base_SetConfig+0x70>)
 8000f2c:	4290      	cmp	r0, r2
 8000f2e:	d00a      	beq.n	8000f46 <TIM_Base_SetConfig+0x42>
 8000f30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f34:	d007      	beq.n	8000f46 <TIM_Base_SetConfig+0x42>
 8000f36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f3a:	4290      	cmp	r0, r2
 8000f3c:	d003      	beq.n	8000f46 <TIM_Base_SetConfig+0x42>
 8000f3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f42:	4290      	cmp	r0, r2
 8000f44:	d103      	bne.n	8000f4e <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f4a:	68ca      	ldr	r2, [r1, #12]
 8000f4c:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000f52:	694a      	ldr	r2, [r1, #20]
 8000f54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000f56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f58:	688b      	ldr	r3, [r1, #8]
 8000f5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f5c:	680b      	ldr	r3, [r1, #0]
 8000f5e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <TIM_Base_SetConfig+0x70>)
 8000f62:	4298      	cmp	r0, r3
 8000f64:	d002      	beq.n	8000f6c <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 8000f66:	2301      	movs	r3, #1
 8000f68:	6143      	str	r3, [r0, #20]
}
 8000f6a:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000f6c:	690b      	ldr	r3, [r1, #16]
 8000f6e:	6303      	str	r3, [r0, #48]	; 0x30
 8000f70:	e7f9      	b.n	8000f66 <TIM_Base_SetConfig+0x62>
 8000f72:	bf00      	nop
 8000f74:	40012c00 	.word	0x40012c00

08000f78 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8000f78:	b1a8      	cbz	r0, 8000fa6 <HAL_TIM_Base_Init+0x2e>
{
 8000f7a:	b510      	push	{r4, lr}
 8000f7c:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f82:	b15b      	cbz	r3, 8000f9c <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8000f84:	2302      	movs	r3, #2
 8000f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f8a:	1d21      	adds	r1, r4, #4
 8000f8c:	6820      	ldr	r0, [r4, #0]
 8000f8e:	f7ff ffb9 	bl	8000f04 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f98:	2000      	movs	r0, #0
}
 8000f9a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000f9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000fa0:	f000 f9b2 	bl	8001308 <HAL_TIM_Base_MspInit>
 8000fa4:	e7ee      	b.n	8000f84 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
}
 8000fa8:	4770      	bx	lr

08000faa <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000faa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d022      	beq.n	8000ff8 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 8000fb2:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fc0:	6804      	ldr	r4, [r0, #0]
 8000fc2:	6863      	ldr	r3, [r4, #4]
 8000fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fc8:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000fca:	6804      	ldr	r4, [r0, #0]
 8000fcc:	6863      	ldr	r3, [r4, #4]
 8000fce:	680d      	ldr	r5, [r1, #0]
 8000fd0:	432b      	orrs	r3, r5
 8000fd2:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000fd4:	6804      	ldr	r4, [r0, #0]
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fdc:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000fde:	6804      	ldr	r4, [r0, #0]
 8000fe0:	68a3      	ldr	r3, [r4, #8]
 8000fe2:	6849      	ldr	r1, [r1, #4]
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000fe8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000fec:	2300      	movs	r3, #0
 8000fee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8000ff2:	4618      	mov	r0, r3
}
 8000ff4:	bc30      	pop	{r4, r5}
 8000ff6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8000ff8:	2002      	movs	r0, #2
}
 8000ffa:	4770      	bx	lr

08000ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001002:	2400      	movs	r4, #0
 8001004:	9404      	str	r4, [sp, #16]
 8001006:	9405      	str	r4, [sp, #20]
 8001008:	9406      	str	r4, [sp, #24]
 800100a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100c:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <MX_GPIO_Init+0xcc>)
 800100e:	699a      	ldr	r2, [r3, #24]
 8001010:	f042 0210 	orr.w	r2, r2, #16
 8001014:	619a      	str	r2, [r3, #24]
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	f002 0210 	and.w	r2, r2, #16
 800101c:	9200      	str	r2, [sp, #0]
 800101e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001020:	699a      	ldr	r2, [r3, #24]
 8001022:	f042 0220 	orr.w	r2, r2, #32
 8001026:	619a      	str	r2, [r3, #24]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	f002 0220 	and.w	r2, r2, #32
 800102e:	9201      	str	r2, [sp, #4]
 8001030:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	699a      	ldr	r2, [r3, #24]
 8001034:	f042 0204 	orr.w	r2, r2, #4
 8001038:	619a      	str	r2, [r3, #24]
 800103a:	699a      	ldr	r2, [r3, #24]
 800103c:	f002 0204 	and.w	r2, r2, #4
 8001040:	9202      	str	r2, [sp, #8]
 8001042:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	f042 0208 	orr.w	r2, r2, #8
 800104a:	619a      	str	r2, [r3, #24]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	9303      	str	r3, [sp, #12]
 8001054:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Board_Led_GPIO_Port, Board_Led_Pin, GPIO_PIN_RESET);
 8001056:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80010d8 <MX_GPIO_Init+0xdc>
 800105a:	4622      	mov	r2, r4
 800105c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001060:	4640      	mov	r0, r8
 8001062:	f7ff fa03 	bl	800046c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TLC5947_BLANK4_Pin|TLC5947_BLANK3_Pin|TLC5947_BLANK2_Pin|TLC5947_BLANK1_Pin 
 8001066:	4d19      	ldr	r5, [pc, #100]	; (80010cc <MX_GPIO_Init+0xd0>)
 8001068:	4622      	mov	r2, r4
 800106a:	215b      	movs	r1, #91	; 0x5b
 800106c:	4628      	mov	r0, r5
 800106e:	f7ff f9fd 	bl	800046c <HAL_GPIO_WritePin>
                          |TLC5947_XLAT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Board_Led_Pin */
  GPIO_InitStruct.Pin = Board_Led_Pin;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2701      	movs	r7, #1
 800107a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2602      	movs	r6, #2
 8001080:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(Board_Led_GPIO_Port, &GPIO_InitStruct);
 8001082:	a904      	add	r1, sp, #16
 8001084:	4640      	mov	r0, r8
 8001086:	f7ff f907 	bl	8000298 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLC5947_BLANK4_Pin TLC5947_BLANK3_Pin TLC5947_BLANK2_Pin TLC5947_BLANK1_Pin 
                           TLC5947_XLAT_Pin */
  GPIO_InitStruct.Pin = TLC5947_BLANK4_Pin|TLC5947_BLANK3_Pin|TLC5947_BLANK2_Pin|TLC5947_BLANK1_Pin 
 800108a:	235b      	movs	r3, #91	; 0x5b
 800108c:	9304      	str	r3, [sp, #16]
                          |TLC5947_XLAT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	a904      	add	r1, sp, #16
 8001096:	4628      	mov	r0, r5
 8001098:	f7ff f8fe 	bl	8000298 <HAL_GPIO_Init>

  /*Configure GPIO pin : Hall_sensor_Pin */
  GPIO_InitStruct.Pin = Hall_sensor_Pin;
 800109c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <MX_GPIO_Init+0xd4>)
 80010a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Hall_sensor_GPIO_Port, &GPIO_InitStruct);
 80010a8:	a904      	add	r1, sp, #16
 80010aa:	480a      	ldr	r0, [pc, #40]	; (80010d4 <MX_GPIO_Init+0xd8>)
 80010ac:	f7ff f8f4 	bl	8000298 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010b0:	4622      	mov	r2, r4
 80010b2:	4621      	mov	r1, r4
 80010b4:	2028      	movs	r0, #40	; 0x28
 80010b6:	f7ff f899 	bl	80001ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ba:	2028      	movs	r0, #40	; 0x28
 80010bc:	f7ff f8ca 	bl	8000254 <HAL_NVIC_EnableIRQ>

}
 80010c0:	b008      	add	sp, #32
 80010c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010c00 	.word	0x40010c00
 80010d0:	10110000 	.word	0x10110000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	40011000 	.word	0x40011000

080010dc <MX_SPI1_Init>:
{
 80010dc:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_SPI1_Init+0x34>)
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x38>)
 80010e2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80010e8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	2300      	movs	r3, #0
 80010ec:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ee:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010f8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010fa:	2218      	movs	r2, #24
 80010fc:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fe:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001100:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001104:	230a      	movs	r3, #10
 8001106:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001108:	f7ff fdf2 	bl	8000cf0 <HAL_SPI_Init>
}
 800110c:	bd08      	pop	{r3, pc}
 800110e:	bf00      	nop
 8001110:	200003ac 	.word	0x200003ac
 8001114:	40013000 	.word	0x40013000

08001118 <MX_TIM4_Init>:
{
 8001118:	b530      	push	{r4, r5, lr}
 800111a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111c:	2400      	movs	r4, #0
 800111e:	9402      	str	r4, [sp, #8]
 8001120:	9403      	str	r4, [sp, #12]
 8001122:	9404      	str	r4, [sp, #16]
 8001124:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	9400      	str	r4, [sp, #0]
 8001128:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 800112a:	4d0f      	ldr	r5, [pc, #60]	; (8001168 <MX_TIM4_Init+0x50>)
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_TIM4_Init+0x54>)
 800112e:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 35999;
 8001130:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8001134:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001136:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 999;
 8001138:	f240 33e7 	movw	r3, #999	; 0x3e7
 800113c:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001144:	4628      	mov	r0, r5
 8001146:	f7ff ff17 	bl	8000f78 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001150:	a902      	add	r1, sp, #8
 8001152:	4628      	mov	r0, r5
 8001154:	f7ff fe51 	bl	8000dfa <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001158:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115c:	4669      	mov	r1, sp
 800115e:	4628      	mov	r0, r5
 8001160:	f7ff ff23 	bl	8000faa <HAL_TIMEx_MasterConfigSynchronization>
}
 8001164:	b007      	add	sp, #28
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	2000036c 	.word	0x2000036c
 800116c:	40000800 	.word	0x40000800

08001170 <SystemClock_Config>:
{
 8001170:	b530      	push	{r4, r5, lr}
 8001172:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001174:	2400      	movs	r4, #0
 8001176:	9408      	str	r4, [sp, #32]
 8001178:	9409      	str	r4, [sp, #36]	; 0x24
 800117a:	940b      	str	r4, [sp, #44]	; 0x2c
 800117c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117e:	9401      	str	r4, [sp, #4]
 8001180:	9402      	str	r4, [sp, #8]
 8001182:	9403      	str	r4, [sp, #12]
 8001184:	9404      	str	r4, [sp, #16]
 8001186:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001188:	2201      	movs	r2, #1
 800118a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800118c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001190:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001192:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2502      	movs	r5, #2
 8001196:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800119a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800119e:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	a806      	add	r0, sp, #24
 80011a2:	f7ff f97f 	bl	80004a4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a6:	230f      	movs	r3, #15
 80011a8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011aa:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b6:	4629      	mov	r1, r5
 80011b8:	a801      	add	r0, sp, #4
 80011ba:	f7ff fb99 	bl	80008f0 <HAL_RCC_ClockConfig>
}
 80011be:	b011      	add	sp, #68	; 0x44
 80011c0:	bd30      	pop	{r4, r5, pc}
	...

080011c4 <main>:
{
 80011c4:	b508      	push	{r3, lr}
  HAL_Init();
 80011c6:	f7fe ffe7 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 80011ca:	f7ff ffd1 	bl	8001170 <SystemClock_Config>
  MX_GPIO_Init();
 80011ce:	f7ff ff15 	bl	8000ffc <MX_GPIO_Init>
  MX_SPI1_Init();
 80011d2:	f7ff ff83 	bl	80010dc <MX_SPI1_Init>
  MX_TIM4_Init();
 80011d6:	f7ff ff9f 	bl	8001118 <MX_TIM4_Init>
  HAL_TIM_Base_Start_IT(&htim4);//Starts the TIM Base generation in interrupt mode. The oder mode just allows the count
 80011da:	4817      	ldr	r0, [pc, #92]	; (8001238 <main+0x74>)
 80011dc:	f7ff fe01 	bl	8000de2 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(TLC5947_BLANK1_GPIO_Port, TLC5947_BLANK1_Pin, GPIO_PIN_SET);//Turn off leds
 80011e0:	4c16      	ldr	r4, [pc, #88]	; (800123c <main+0x78>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	2110      	movs	r1, #16
 80011e6:	4620      	mov	r0, r4
 80011e8:	f7ff f940 	bl	800046c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5947_BLANK2_GPIO_Port, TLC5947_BLANK2_Pin, GPIO_PIN_SET);//Turn off leds
 80011ec:	2201      	movs	r2, #1
 80011ee:	2108      	movs	r1, #8
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff f93b 	bl	800046c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5947_BLANK3_GPIO_Port, TLC5947_BLANK3_Pin, GPIO_PIN_SET);//Turn off leds
 80011f6:	2201      	movs	r2, #1
 80011f8:	2102      	movs	r1, #2
 80011fa:	4620      	mov	r0, r4
 80011fc:	f7ff f936 	bl	800046c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TLC5947_BLANK4_GPIO_Port, TLC5947_BLANK4_Pin, GPIO_PIN_SET);//Turn off leds
 8001200:	2201      	movs	r2, #1
 8001202:	4611      	mov	r1, r2
 8001204:	4620      	mov	r0, r4
 8001206:	f7ff f931 	bl	800046c <HAL_GPIO_WritePin>
 800120a:	e006      	b.n	800121a <main+0x56>
	  FillArray(BLUE,BMWLOGO);
 800120c:	2105      	movs	r1, #5
 800120e:	2000      	movs	r0, #0
 8001210:	f000 f958 	bl	80014c4 <FillArray>
		  g_TLCFlag = 0;//disable TLC Update
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <main+0x7c>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
	  if(g_TLCFlag){//enter when TIM4 interrupts
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <main+0x7c>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0fb      	beq.n	800121a <main+0x56>
		  TLC_Update();//renew PWM
 8001222:	f000 f8dd 	bl	80013e0 <TLC_Update>
	  if(g_imain > 2 ) //only enables RGB
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <main+0x80>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d9ee      	bls.n	800120c <main+0x48>
		  g_imain = 0;
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <main+0x80>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	e7ea      	b.n	800120c <main+0x48>
 8001236:	bf00      	nop
 8001238:	2000036c 	.word	0x2000036c
 800123c:	40010c00 	.word	0x40010c00
 8001240:	20000268 	.word	0x20000268
 8001244:	2000026c 	.word	0x2000026c

08001248 <TLC_Write>:

}

void TLC_Write(uint8_t data[])
//void TLC_Write(uint8_t *data)
{
 8001248:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&hspi1,data, SPI_BYTE_AMOUNT,1000); // envio via el sp1 de 1 todos los bytes que tenga que mandar
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	2290      	movs	r2, #144	; 0x90
 8001250:	4601      	mov	r1, r0
 8001252:	4802      	ldr	r0, [pc, #8]	; (800125c <TLC_Write+0x14>)
 8001254:	f7ff fc79 	bl	8000b4a <HAL_SPI_Transmit>
//    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY); // espero a que termine la transferen
}
 8001258:	bd08      	pop	{r3, pc}
 800125a:	bf00      	nop
 800125c:	200003ac 	.word	0x200003ac

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_MspInit+0x3c>)
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	619a      	str	r2, [r3, #24]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	f002 0201 	and.w	r2, r2, #1
 8001272:	9200      	str	r2, [sp, #0]
 8001274:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	69da      	ldr	r2, [r3, #28]
 8001278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800127c:	61da      	str	r2, [r3, #28]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001284:	9301      	str	r3, [sp, #4]
 8001286:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001288:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_MspInit+0x40>)
 800128a:	6853      	ldr	r3, [r2, #4]
 800128c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001290:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001294:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	b002      	add	sp, #8
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	40010000 	.word	0x40010000

080012a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012a4:	b500      	push	{lr}
 80012a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	2300      	movs	r3, #0
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	9303      	str	r3, [sp, #12]
 80012ae:	9304      	str	r3, [sp, #16]
 80012b0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80012b2:	6802      	ldr	r2, [r0, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_SPI_MspInit+0x5c>)
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d002      	beq.n	80012c0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ba:	b007      	add	sp, #28
 80012bc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80012c4:	699a      	ldr	r2, [r3, #24]
 80012c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	699a      	ldr	r2, [r3, #24]
 80012d8:	f042 0204 	orr.w	r2, r2, #4
 80012dc:	619a      	str	r2, [r3, #24]
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012e8:	23a0      	movs	r3, #160	; 0xa0
 80012ea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f4:	a902      	add	r1, sp, #8
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <HAL_SPI_MspInit+0x60>)
 80012f8:	f7fe ffce 	bl	8000298 <HAL_GPIO_Init>
}
 80012fc:	e7dd      	b.n	80012ba <HAL_SPI_MspInit+0x16>
 80012fe:	bf00      	nop
 8001300:	40013000 	.word	0x40013000
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001308:	6802      	ldr	r2, [r0, #0]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_TIM_Base_MspInit+0x3c>)
 800130c:	429a      	cmp	r2, r3
 800130e:	d000      	beq.n	8001312 <HAL_TIM_Base_MspInit+0xa>
 8001310:	4770      	bx	lr
{
 8001312:	b500      	push	{lr}
 8001314:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001316:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	f042 0204 	orr.w	r2, r2, #4
 8001320:	61da      	str	r2, [r3, #28]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	9301      	str	r3, [sp, #4]
 800132a:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	4611      	mov	r1, r2
 8001330:	201e      	movs	r0, #30
 8001332:	f7fe ff5b 	bl	80001ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001336:	201e      	movs	r0, #30
 8001338:	f7fe ff8c 	bl	8000254 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800133c:	b003      	add	sp, #12
 800133e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001342:	bf00      	nop
 8001344:	40000800 	.word	0x40000800

08001348 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <SystemInit+0x40>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f042 0201 	orr.w	r2, r2, #1
 8001350:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001352:	6859      	ldr	r1, [r3, #4]
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <SystemInit+0x44>)
 8001356:	400a      	ands	r2, r1
 8001358:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001360:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001364:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800136c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001374:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001376:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800137a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SystemInit+0x48>)
 800137e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001382:	609a      	str	r2, [r3, #8]
#endif 
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	f8ff0000 	.word	0xf8ff0000
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001394:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001396:	e003      	b.n	80013a0 <LoopCopyDataInit>

08001398 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001398:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800139a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800139c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800139e:	3104      	adds	r1, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80013a0:	480a      	ldr	r0, [pc, #40]	; (80013cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80013a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80013a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80013a8:	d3f6      	bcc.n	8001398 <CopyDataInit>
  ldr r2, =_sbss
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80013ac:	e002      	b.n	80013b4 <LoopFillZerobss>

080013ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80013b0:	f842 3b04 	str.w	r3, [r2], #4

080013b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80013b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013b8:	d3f9      	bcc.n	80013ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ba:	f7ff ffc5 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f000 f973 	bl	80016a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff feff 	bl	80011c4 <main>
  bx lr
 80013c6:	4770      	bx	lr
  ldr r3, =_sidata
 80013c8:	08001734 	.word	0x08001734
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013d0:	2000024c 	.word	0x2000024c
  ldr r2, =_sbss
 80013d4:	2000024c 	.word	0x2000024c
  ldr r3, = _ebss
 80013d8:	20000408 	.word	0x20000408

080013dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013dc:	e7fe      	b.n	80013dc <ADC1_2_IRQHandler>
	...

080013e0 <TLC_Update>:
0,0,0,0,0,0,
0,0,0,0,0,0
};

void TLC_Update(void)
{
 80013e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t tlcDevice =1,matrixIndex = TLC5947_CHANNELS*tlcDevice-1,sendByteIndex = 0;//Lo uso para el vector a enviar via SPI



    HAL_GPIO_WritePin(TLC5947_BLANK1_GPIO_Port, TLC5947_BLANK1_Pin, GPIO_PIN_SET);
 80013e2:	4c34      	ldr	r4, [pc, #208]	; (80014b4 <TLC_Update+0xd4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	2110      	movs	r1, #16
 80013e8:	4620      	mov	r0, r4
 80013ea:	f7ff f83f 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK2_GPIO_Port, TLC5947_BLANK2_Pin, GPIO_PIN_SET);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2108      	movs	r1, #8
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff f83a 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK3_GPIO_Port, TLC5947_BLANK3_Pin, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2102      	movs	r1, #2
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff f835 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK4_GPIO_Port, TLC5947_BLANK4_Pin, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	4611      	mov	r1, r2
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff f830 	bl	800046c <HAL_GPIO_WritePin>



    for (int8_t i = TOTAL_CHANNELS-1; i >= 0 ; i -= 2) // It to start at the first channel of each TLC5947, starts at U4
 800140c:	205f      	movs	r0, #95	; 0x5f
	uint8_t tlcDevice =1,matrixIndex = TLC5947_CHANNELS*tlcDevice-1,sendByteIndex = 0;//Lo uso para el vector a enviar via SPI
 800140e:	2100      	movs	r1, #0
 8001410:	2317      	movs	r3, #23
 8001412:	2501      	movs	r5, #1
    for (int8_t i = TOTAL_CHANNELS-1; i >= 0 ; i -= 2) // It to start at the first channel of each TLC5947, starts at U4
 8001414:	e001      	b.n	800141a <TLC_Update+0x3a>
 8001416:	3802      	subs	r0, #2
 8001418:	b240      	sxtb	r0, r0
 800141a:	2800      	cmp	r0, #0
 800141c:	db27      	blt.n	800146e <TLC_Update+0x8e>
    {

        uint8_t send1 = 0;
        uint8_t send = g_LedsMatrix[0][matrixIndex] >> 4; // Sending MSB, for initial test we'll only use 0° since it's not spinning
 800141e:	4f26      	ldr	r7, [pc, #152]	; (80014b8 <TLC_Update+0xd8>)
 8001420:	5cfa      	ldrb	r2, [r7, r3]
 8001422:	0916      	lsrs	r6, r2, #4


        g_spi_send[sendByteIndex]=send;
 8001424:	4c25      	ldr	r4, [pc, #148]	; (80014bc <TLC_Update+0xdc>)
 8001426:	5466      	strb	r6, [r4, r1]
        sendByteIndex++;
 8001428:	1c4e      	adds	r6, r1, #1
 800142a:	b2f6      	uxtb	r6, r6

        send = (g_LedsMatrix[0][matrixIndex] & 0x000F);
        send <<= 4;

        send1 = (g_LedsMatrix[0][matrixIndex-1]) >> 8;
 800142c:	f103 3cff 	add.w	ip, r3, #4294967295
 8001430:	f817 700c 	ldrb.w	r7, [r7, ip]
        send |= send1; //me quedo con 4 bits menos significativos del canal i y 4 bits más significativos del canal i-1
 8001434:	0112      	lsls	r2, r2, #4

        g_spi_send[sendByteIndex]=send;//
 8001436:	55a2      	strb	r2, [r4, r6]
        sendByteIndex++;
 8001438:	1c8a      	adds	r2, r1, #2
 800143a:	b2d2      	uxtb	r2, r2

        send = g_LedsMatrix[0][matrixIndex-1];//Erasing 4 most significant bits from chanel i-1, and sending LSB from chanel i-1

        g_spi_send[sendByteIndex]=send;//
 800143c:	54a7      	strb	r7, [r4, r2]
        sendByteIndex++;
 800143e:	3103      	adds	r1, #3
 8001440:	b2c9      	uxtb	r1, r1
        matrixIndex-=2;
 8001442:	3b02      	subs	r3, #2
 8001444:	b2db      	uxtb	r3, r3
        if(sendByteIndex%36==0){
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <TLC_Update+0xe0>)
 8001448:	fba2 4201 	umull	r4, r2, r2, r1
 800144c:	08d2      	lsrs	r2, r2, #3
 800144e:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001452:	0094      	lsls	r4, r2, #2
 8001454:	1b0c      	subs	r4, r1, r4
 8001456:	f014 0fff 	tst.w	r4, #255	; 0xff
 800145a:	d1dc      	bne.n	8001416 <TLC_Update+0x36>
        	 * at the end of each and there is no logic checking this.
        	 * With the code i had, the first value of g_LedsMatrix was being assigned
        	 * to the first led of u4 so i shifted my starting point in g_LedsMatrix
        	 * so as to align with each tlc5947 ux
        	 */
        	tlcDevice++;
 800145c:	3501      	adds	r5, #1
 800145e:	b2ed      	uxtb	r5, r5
        	matrixIndex=TLC5947_CHANNELS*tlcDevice-1;
 8001460:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001464:	00d3      	lsls	r3, r2, #3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	3b01      	subs	r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	e7d3      	b.n	8001416 <TLC_Update+0x36>

    }



    TLC_Write(g_spi_send);
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <TLC_Update+0xdc>)
 8001470:	f7ff feea 	bl	8001248 <TLC_Write>

    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_SET);
 8001474:	4c0f      	ldr	r4, [pc, #60]	; (80014b4 <TLC_Update+0xd4>)
 8001476:	2201      	movs	r2, #1
 8001478:	2140      	movs	r1, #64	; 0x40
 800147a:	4620      	mov	r0, r4
 800147c:	f7fe fff6 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2140      	movs	r1, #64	; 0x40
 8001484:	4620      	mov	r0, r4
 8001486:	f7fe fff1 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK1_GPIO_Port, TLC5947_BLANK1_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2110      	movs	r1, #16
 800148e:	4620      	mov	r0, r4
 8001490:	f7fe ffec 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK2_GPIO_Port, TLC5947_BLANK2_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2108      	movs	r1, #8
 8001498:	4620      	mov	r0, r4
 800149a:	f7fe ffe7 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK3_GPIO_Port, TLC5947_BLANK3_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2102      	movs	r1, #2
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7fe ffe2 	bl	800046c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK4_GPIO_Port, TLC5947_BLANK4_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2101      	movs	r1, #1
 80014ac:	4620      	mov	r0, r4
 80014ae:	f7fe ffdd 	bl	800046c <HAL_GPIO_WritePin>

}
 80014b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b4:	40010c00 	.word	0x40010c00
 80014b8:	20000270 	.word	0x20000270
 80014bc:	200002d0 	.word	0x200002d0
 80014c0:	38e38e39 	.word	0x38e38e39

080014c4 <FillArray>:
 * por algún motivo al poner valores en dudo aparecian valores espúreos
 * en las últimas posiciones de 65535
 *
 */
void FillArray(uint8_t colorIntensity,uint8_t ledControl)
{
 80014c4:	b470      	push	{r4, r5, r6}
	static uint8_t increment = 3,array_index = 0,letCol = 0,letIndex=0,matiTestIndex=0;
	uint8_t letRow = 0;

	switch(ledControl){
 80014c6:	2905      	cmp	r1, #5
 80014c8:	d81f      	bhi.n	800150a <FillArray+0x46>
 80014ca:	e8df f001 	tbb	[pc, r1]
 80014ce:	2003      	.short	0x2003
 80014d0:	b79b6135 	.word	0xb79b6135

	case 0:
		//FABITEST
		for (array_index = 0; array_index<TOTAL_CHANNELS;array_index++)
 80014d4:	4b6c      	ldr	r3, [pc, #432]	; (8001688 <FillArray+0x1c4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
 80014da:	e005      	b.n	80014e8 <FillArray+0x24>
			g_LedsMatrix[0][array_index]=0;
 80014dc:	4a6b      	ldr	r2, [pc, #428]	; (800168c <FillArray+0x1c8>)
 80014de:	2100      	movs	r1, #0
 80014e0:	54d1      	strb	r1, [r2, r3]
		for (array_index = 0; array_index<TOTAL_CHANNELS;array_index++)
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <FillArray+0x1c4>)
 80014e6:	7013      	strb	r3, [r2, #0]
 80014e8:	4b67      	ldr	r3, [pc, #412]	; (8001688 <FillArray+0x1c4>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b5f      	cmp	r3, #95	; 0x5f
 80014ee:	d9f5      	bls.n	80014dc <FillArray+0x18>

		for (array_index=colorIntensity; array_index<TOTAL_CHANNELS;array_index+=increment)
 80014f0:	4b65      	ldr	r3, [pc, #404]	; (8001688 <FillArray+0x1c4>)
 80014f2:	7018      	strb	r0, [r3, #0]
 80014f4:	e005      	b.n	8001502 <FillArray+0x3e>
			g_LedsMatrix[0][array_index]=255;
 80014f6:	4a65      	ldr	r2, [pc, #404]	; (800168c <FillArray+0x1c8>)
 80014f8:	21ff      	movs	r1, #255	; 0xff
 80014fa:	54d1      	strb	r1, [r2, r3]
		for (array_index=colorIntensity; array_index<TOTAL_CHANNELS;array_index+=increment)
 80014fc:	3303      	adds	r3, #3
 80014fe:	4a62      	ldr	r2, [pc, #392]	; (8001688 <FillArray+0x1c4>)
 8001500:	7013      	strb	r3, [r2, #0]
 8001502:	4b61      	ldr	r3, [pc, #388]	; (8001688 <FillArray+0x1c4>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b5f      	cmp	r3, #95	; 0x5f
 8001508:	d9f5      	bls.n	80014f6 <FillArray+0x32>
		break;


	}

}
 800150a:	bc70      	pop	{r4, r5, r6}
 800150c:	4770      	bx	lr
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 800150e:	4b5e      	ldr	r3, [pc, #376]	; (8001688 <FillArray+0x1c4>)
 8001510:	7018      	strb	r0, [r3, #0]
 8001512:	e005      	b.n	8001520 <FillArray+0x5c>
				g_LedsMatrix[0][array_index]=255;
 8001514:	4a5d      	ldr	r2, [pc, #372]	; (800168c <FillArray+0x1c8>)
 8001516:	21ff      	movs	r1, #255	; 0xff
 8001518:	54d1      	strb	r1, [r2, r3]
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 800151a:	3303      	adds	r3, #3
 800151c:	4a5a      	ldr	r2, [pc, #360]	; (8001688 <FillArray+0x1c4>)
 800151e:	7013      	strb	r3, [r2, #0]
 8001520:	4b59      	ldr	r3, [pc, #356]	; (8001688 <FillArray+0x1c4>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b5f      	cmp	r3, #95	; 0x5f
 8001526:	d8f0      	bhi.n	800150a <FillArray+0x46>
			if(g_degreeCount == 179)//when the motor is plugged change this to 179
 8001528:	4a59      	ldr	r2, [pc, #356]	; (8001690 <FillArray+0x1cc>)
 800152a:	8812      	ldrh	r2, [r2, #0]
 800152c:	2ab3      	cmp	r2, #179	; 0xb3
 800152e:	d0f1      	beq.n	8001514 <FillArray+0x50>
				 g_LedsMatrix[0][array_index]=0;
 8001530:	4a56      	ldr	r2, [pc, #344]	; (800168c <FillArray+0x1c8>)
 8001532:	2100      	movs	r1, #0
 8001534:	54d1      	strb	r1, [r2, r3]
 8001536:	e7f0      	b.n	800151a <FillArray+0x56>
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <FillArray+0x1c4>)
 800153a:	7018      	strb	r0, [r3, #0]
	uint8_t letRow = 0;
 800153c:	2100      	movs	r1, #0
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 800153e:	e005      	b.n	800154c <FillArray+0x88>
				 g_LedsMatrix[0][array_index]=0;
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <FillArray+0x1c8>)
 8001542:	2000      	movs	r0, #0
 8001544:	54d0      	strb	r0, [r2, r3]
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 8001546:	3303      	adds	r3, #3
 8001548:	4a4f      	ldr	r2, [pc, #316]	; (8001688 <FillArray+0x1c4>)
 800154a:	7013      	strb	r3, [r2, #0]
 800154c:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <FillArray+0x1c4>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b5f      	cmp	r3, #95	; 0x5f
 8001552:	d8da      	bhi.n	800150a <FillArray+0x46>
			if(g_degreeCount >= 179 && g_degreeCount<= 184)
 8001554:	4a4e      	ldr	r2, [pc, #312]	; (8001690 <FillArray+0x1cc>)
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	3ab3      	subs	r2, #179	; 0xb3
 800155a:	b292      	uxth	r2, r2
 800155c:	2a05      	cmp	r2, #5
 800155e:	d8ef      	bhi.n	8001540 <FillArray+0x7c>
				g_LedsMatrix[0][array_index]=letterO[letRow][letCol];
 8001560:	4a4c      	ldr	r2, [pc, #304]	; (8001694 <FillArray+0x1d0>)
 8001562:	7812      	ldrb	r2, [r2, #0]
 8001564:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001568:	0044      	lsls	r4, r0, #1
 800156a:	484b      	ldr	r0, [pc, #300]	; (8001698 <FillArray+0x1d4>)
 800156c:	4420      	add	r0, r4
 800156e:	5c84      	ldrb	r4, [r0, r2]
 8001570:	4846      	ldr	r0, [pc, #280]	; (800168c <FillArray+0x1c8>)
 8001572:	54c4      	strb	r4, [r0, r3]
				letRow++;
 8001574:	3101      	adds	r1, #1
 8001576:	b2c9      	uxtb	r1, r1
				if(letRow==31)
 8001578:	291f      	cmp	r1, #31
 800157a:	d1e4      	bne.n	8001546 <FillArray+0x82>
					letCol++;
 800157c:	3201      	adds	r2, #1
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	4844      	ldr	r0, [pc, #272]	; (8001694 <FillArray+0x1d0>)
 8001582:	7002      	strb	r2, [r0, #0]
					if(letCol>=6)
 8001584:	2a05      	cmp	r2, #5
 8001586:	d9de      	bls.n	8001546 <FillArray+0x82>
						letCol =0;
 8001588:	4602      	mov	r2, r0
 800158a:	2000      	movs	r0, #0
 800158c:	7010      	strb	r0, [r2, #0]
 800158e:	e7da      	b.n	8001546 <FillArray+0x82>
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 8001590:	4b3d      	ldr	r3, [pc, #244]	; (8001688 <FillArray+0x1c4>)
 8001592:	7018      	strb	r0, [r3, #0]
	uint8_t letRow = 0;
 8001594:	2100      	movs	r1, #0
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 8001596:	e005      	b.n	80015a4 <FillArray+0xe0>
				 g_LedsMatrix[0][array_index]=0;
 8001598:	4a3c      	ldr	r2, [pc, #240]	; (800168c <FillArray+0x1c8>)
 800159a:	2000      	movs	r0, #0
 800159c:	54d0      	strb	r0, [r2, r3]
		for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 800159e:	3303      	adds	r3, #3
 80015a0:	4a39      	ldr	r2, [pc, #228]	; (8001688 <FillArray+0x1c4>)
 80015a2:	7013      	strb	r3, [r2, #0]
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <FillArray+0x1c4>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b5f      	cmp	r3, #95	; 0x5f
 80015aa:	d8ae      	bhi.n	800150a <FillArray+0x46>
						if(g_degreeCount >= 5 && g_degreeCount<= 17)
 80015ac:	4a38      	ldr	r2, [pc, #224]	; (8001690 <FillArray+0x1cc>)
 80015ae:	8812      	ldrh	r2, [r2, #0]
 80015b0:	3a05      	subs	r2, #5
 80015b2:	b292      	uxth	r2, r2
 80015b4:	2a0c      	cmp	r2, #12
 80015b6:	d8ef      	bhi.n	8001598 <FillArray+0xd4>
				g_LedsMatrix[0][array_index]=letters[letIndex][letRow][letCol];
 80015b8:	4a38      	ldr	r2, [pc, #224]	; (800169c <FillArray+0x1d8>)
 80015ba:	7814      	ldrb	r4, [r2, #0]
 80015bc:	4a35      	ldr	r2, [pc, #212]	; (8001694 <FillArray+0x1d0>)
 80015be:	7810      	ldrb	r0, [r2, #0]
 80015c0:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 80015c4:	006a      	lsls	r2, r5, #1
 80015c6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80015ca:	01b5      	lsls	r5, r6, #6
 80015cc:	442a      	add	r2, r5
 80015ce:	4d34      	ldr	r5, [pc, #208]	; (80016a0 <FillArray+0x1dc>)
 80015d0:	442a      	add	r2, r5
 80015d2:	5c15      	ldrb	r5, [r2, r0]
 80015d4:	4a2d      	ldr	r2, [pc, #180]	; (800168c <FillArray+0x1c8>)
 80015d6:	54d5      	strb	r5, [r2, r3]
				letRow++;
 80015d8:	3101      	adds	r1, #1
 80015da:	b2c9      	uxtb	r1, r1
				if(letRow==31)
 80015dc:	291f      	cmp	r1, #31
 80015de:	d1de      	bne.n	800159e <FillArray+0xda>
					letCol++;
 80015e0:	3001      	adds	r0, #1
 80015e2:	b2c0      	uxtb	r0, r0
 80015e4:	4a2b      	ldr	r2, [pc, #172]	; (8001694 <FillArray+0x1d0>)
 80015e6:	7010      	strb	r0, [r2, #0]
					if(letCol>=6){
 80015e8:	2805      	cmp	r0, #5
 80015ea:	d9d8      	bls.n	800159e <FillArray+0xda>
						letCol =0;
 80015ec:	2000      	movs	r0, #0
 80015ee:	7010      	strb	r0, [r2, #0]
						letIndex++;
 80015f0:	1c62      	adds	r2, r4, #1
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	4829      	ldr	r0, [pc, #164]	; (800169c <FillArray+0x1d8>)
 80015f6:	7002      	strb	r2, [r0, #0]
						if(letIndex>=2)
 80015f8:	2a01      	cmp	r2, #1
 80015fa:	d9d0      	bls.n	800159e <FillArray+0xda>
							letIndex = 0;
 80015fc:	4602      	mov	r2, r0
 80015fe:	2000      	movs	r0, #0
 8001600:	7010      	strb	r0, [r2, #0]
 8001602:	e7cc      	b.n	800159e <FillArray+0xda>
		for (array_index = 0; array_index<TOTAL_CHANNELS;array_index++)
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <FillArray+0x1c4>)
 8001606:	2200      	movs	r2, #0
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	e005      	b.n	8001618 <FillArray+0x154>
			g_LedsMatrix[0][array_index]=0;
 800160c:	4a1f      	ldr	r2, [pc, #124]	; (800168c <FillArray+0x1c8>)
 800160e:	2100      	movs	r1, #0
 8001610:	54d1      	strb	r1, [r2, r3]
		for (array_index = 0; array_index<TOTAL_CHANNELS;array_index++)
 8001612:	3301      	adds	r3, #1
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <FillArray+0x1c4>)
 8001616:	7013      	strb	r3, [r2, #0]
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <FillArray+0x1c4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b5f      	cmp	r3, #95	; 0x5f
 800161e:	d9f5      	bls.n	800160c <FillArray+0x148>
			g_LedsMatrix[0][matiTestIndex]=255;
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <FillArray+0x1e0>)
 8001622:	7813      	ldrb	r3, [r2, #0]
 8001624:	4919      	ldr	r1, [pc, #100]	; (800168c <FillArray+0x1c8>)
 8001626:	24ff      	movs	r4, #255	; 0xff
 8001628:	54cc      	strb	r4, [r1, r3]
			matiTestIndex+=increment;
 800162a:	3303      	adds	r3, #3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	7013      	strb	r3, [r2, #0]
			switch(matiTestIndex)
 8001630:	2b61      	cmp	r3, #97	; 0x61
 8001632:	d00a      	beq.n	800164a <FillArray+0x186>
 8001634:	2b62      	cmp	r3, #98	; 0x62
 8001636:	d00c      	beq.n	8001652 <FillArray+0x18e>
 8001638:	2b60      	cmp	r3, #96	; 0x60
 800163a:	d002      	beq.n	8001642 <FillArray+0x17e>
			for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <FillArray+0x1c4>)
 800163e:	7018      	strb	r0, [r3, #0]
 8001640:	e011      	b.n	8001666 <FillArray+0x1a2>
				matiTestIndex = 1;
 8001642:	4613      	mov	r3, r2
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
				break;
 8001648:	e7f8      	b.n	800163c <FillArray+0x178>
				matiTestIndex = 2;
 800164a:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <FillArray+0x1e0>)
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]
				break;
 8001650:	e7f4      	b.n	800163c <FillArray+0x178>
				matiTestIndex = 0;
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <FillArray+0x1e0>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
				break;
 8001658:	e7f0      	b.n	800163c <FillArray+0x178>
					g_LedsMatrix[0][array_index]=0;
 800165a:	4a0c      	ldr	r2, [pc, #48]	; (800168c <FillArray+0x1c8>)
 800165c:	2100      	movs	r1, #0
 800165e:	54d1      	strb	r1, [r2, r3]
			for (array_index = colorIntensity; array_index <TOTAL_CHANNELS;array_index+=increment){
 8001660:	3303      	adds	r3, #3
 8001662:	4a09      	ldr	r2, [pc, #36]	; (8001688 <FillArray+0x1c4>)
 8001664:	7013      	strb	r3, [r2, #0]
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <FillArray+0x1c4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b5f      	cmp	r3, #95	; 0x5f
 800166c:	f63f af4d 	bhi.w	800150a <FillArray+0x46>
				if(g_degreeCount <=90||(g_degreeCount>=180 && g_degreeCount <=270))
 8001670:	4a07      	ldr	r2, [pc, #28]	; (8001690 <FillArray+0x1cc>)
 8001672:	8812      	ldrh	r2, [r2, #0]
 8001674:	2a5a      	cmp	r2, #90	; 0x5a
 8001676:	d9f0      	bls.n	800165a <FillArray+0x196>
 8001678:	3ab4      	subs	r2, #180	; 0xb4
 800167a:	b292      	uxth	r2, r2
 800167c:	2a5a      	cmp	r2, #90	; 0x5a
 800167e:	d9ec      	bls.n	800165a <FillArray+0x196>
					 g_LedsMatrix[0][array_index]=255;
 8001680:	4a02      	ldr	r2, [pc, #8]	; (800168c <FillArray+0x1c8>)
 8001682:	21ff      	movs	r1, #255	; 0xff
 8001684:	54d1      	strb	r1, [r2, r3]
 8001686:	e7eb      	b.n	8001660 <FillArray+0x19c>
 8001688:	2000026d 	.word	0x2000026d
 800168c:	20000270 	.word	0x20000270
 8001690:	2000026a 	.word	0x2000026a
 8001694:	20000360 	.word	0x20000360
 8001698:	2000000c 	.word	0x2000000c
 800169c:	20000361 	.word	0x20000361
 80016a0:	200000cc 	.word	0x200000cc
 80016a4:	20000362 	.word	0x20000362

080016a8 <__libc_init_array>:
 80016a8:	b570      	push	{r4, r5, r6, lr}
 80016aa:	2500      	movs	r5, #0
 80016ac:	4e0c      	ldr	r6, [pc, #48]	; (80016e0 <__libc_init_array+0x38>)
 80016ae:	4c0d      	ldr	r4, [pc, #52]	; (80016e4 <__libc_init_array+0x3c>)
 80016b0:	1ba4      	subs	r4, r4, r6
 80016b2:	10a4      	asrs	r4, r4, #2
 80016b4:	42a5      	cmp	r5, r4
 80016b6:	d109      	bne.n	80016cc <__libc_init_array+0x24>
 80016b8:	f000 f81a 	bl	80016f0 <_init>
 80016bc:	2500      	movs	r5, #0
 80016be:	4e0a      	ldr	r6, [pc, #40]	; (80016e8 <__libc_init_array+0x40>)
 80016c0:	4c0a      	ldr	r4, [pc, #40]	; (80016ec <__libc_init_array+0x44>)
 80016c2:	1ba4      	subs	r4, r4, r6
 80016c4:	10a4      	asrs	r4, r4, #2
 80016c6:	42a5      	cmp	r5, r4
 80016c8:	d105      	bne.n	80016d6 <__libc_init_array+0x2e>
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
 80016cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016d0:	4798      	blx	r3
 80016d2:	3501      	adds	r5, #1
 80016d4:	e7ee      	b.n	80016b4 <__libc_init_array+0xc>
 80016d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016da:	4798      	blx	r3
 80016dc:	3501      	adds	r5, #1
 80016de:	e7f2      	b.n	80016c6 <__libc_init_array+0x1e>
 80016e0:	0800172c 	.word	0x0800172c
 80016e4:	0800172c 	.word	0x0800172c
 80016e8:	0800172c 	.word	0x0800172c
 80016ec:	08001730 	.word	0x08001730

080016f0 <_init>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr

080016fc <_fini>:
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	bf00      	nop
 8001700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001702:	bc08      	pop	{r3}
 8001704:	469e      	mov	lr, r3
 8001706:	4770      	bx	lr
