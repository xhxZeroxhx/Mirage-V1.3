
Mirage-V1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001910  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001a1c  08001a1c  00011a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a48  08001a48  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08001a48  08001a48  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a48  08001a48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a4c  08001a4c  00011a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08001a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  20000014  08001a64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08001a64  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140b7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023f7  00000000  00000000  000340f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008892  00000000  00000000  000364eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c48  00000000  00000000  0003ed80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000bf8  00000000  00000000  0003f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00015dbd  00000000  00000000  000405c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000b676  00000000  00000000  0005637d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0007353b  00000000  00000000  000619f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d4f2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002044  00000000  00000000  000d4fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a04 	.word	0x08001a04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001a04 	.word	0x08001a04

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f843 	bl	8000204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	2000000c 	.word	0x2000000c
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f81b 	bl	80001e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 fa5e 	bl	8001670 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000008c 	.word	0x2000008c
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	2000008c 	.word	0x2000008c

080001e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e8:	041b      	lsls	r3, r3, #16
 80001ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ec:	0200      	lsls	r0, r0, #8
 80001ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001fc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001fe:	4770      	bx	lr
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000204:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_NVIC_SetPriority+0x60>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020e:	f1c3 0407 	rsb	r4, r3, #7
 8000212:	2c04      	cmp	r4, #4
 8000214:	bf28      	it	cs
 8000216:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	1d1d      	adds	r5, r3, #4
 800021a:	2d06      	cmp	r5, #6
 800021c:	d918      	bls.n	8000250 <HAL_NVIC_SetPriority+0x4c>
 800021e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	f04f 35ff 	mov.w	r5, #4294967295
 8000224:	fa05 f404 	lsl.w	r4, r5, r4
 8000228:	ea21 0104 	bic.w	r1, r1, r4
 800022c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022e:	fa05 f303 	lsl.w	r3, r5, r3
 8000232:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
 800023a:	db0b      	blt.n	8000254 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	0109      	lsls	r1, r1, #4
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800024c:	bc30      	pop	{r4, r5}
 800024e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	2300      	movs	r3, #0
 8000252:	e7e5      	b.n	8000220 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	f000 000f 	and.w	r0, r0, #15
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	b2c9      	uxtb	r1, r1
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <HAL_NVIC_SetPriority+0x64>)
 800025e:	5419      	strb	r1, [r3, r0]
 8000260:	e7f4      	b.n	800024c <HAL_NVIC_SetPriority+0x48>
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000ed14 	.word	0xe000ed14

0800026c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800026c:	f000 021f 	and.w	r2, r0, #31
 8000270:	0940      	lsrs	r0, r0, #5
 8000272:	2301      	movs	r3, #1
 8000274:	4093      	lsls	r3, r2
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_NVIC_EnableIRQ+0x14>)
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
 8000292:	21f0      	movs	r1, #240	; 0xf0
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
 800029a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b4:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b6:	4635      	mov	r5, r6
 80002b8:	e0a1      	b.n	80003fe <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002ba:	2c00      	cmp	r4, #0
 80002bc:	d059      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 80002be:	2c01      	cmp	r4, #1
 80002c0:	d100      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80002c2:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002c4:	2bff      	cmp	r3, #255	; 0xff
 80002c6:	d868      	bhi.n	800039a <HAL_GPIO_Init+0xea>
 80002c8:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80002ca:	2bff      	cmp	r3, #255	; 0xff
 80002cc:	d868      	bhi.n	80003a0 <HAL_GPIO_Init+0xf0>
 80002ce:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002d0:	f8dc 2000 	ldr.w	r2, [ip]
 80002d4:	270f      	movs	r7, #15
 80002d6:	40a7      	lsls	r7, r4
 80002d8:	ea22 0207 	bic.w	r2, r2, r7
 80002dc:	fa06 f404 	lsl.w	r4, r6, r4
 80002e0:	4322      	orrs	r2, r4
 80002e2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002e6:	684a      	ldr	r2, [r1, #4]
 80002e8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80002ec:	f000 8086 	beq.w	80003fc <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002f0:	4a5e      	ldr	r2, [pc, #376]	; (800046c <HAL_GPIO_Init+0x1bc>)
 80002f2:	6994      	ldr	r4, [r2, #24]
 80002f4:	f044 0401 	orr.w	r4, r4, #1
 80002f8:	6194      	str	r4, [r2, #24]
 80002fa:	6992      	ldr	r2, [r2, #24]
 80002fc:	f002 0201 	and.w	r2, r2, #1
 8000300:	9201      	str	r2, [sp, #4]
 8000302:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 8000304:	08ac      	lsrs	r4, r5, #2
 8000306:	1ca7      	adds	r7, r4, #2
 8000308:	4a59      	ldr	r2, [pc, #356]	; (8000470 <HAL_GPIO_Init+0x1c0>)
 800030a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800030e:	f005 0703 	and.w	r7, r5, #3
 8000312:	00bf      	lsls	r7, r7, #2
 8000314:	f04f 0c0f 	mov.w	ip, #15
 8000318:	fa0c fc07 	lsl.w	ip, ip, r7
 800031c:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000320:	4a54      	ldr	r2, [pc, #336]	; (8000474 <HAL_GPIO_Init+0x1c4>)
 8000322:	4290      	cmp	r0, r2
 8000324:	d042      	beq.n	80003ac <HAL_GPIO_Init+0xfc>
 8000326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800032a:	4290      	cmp	r0, r2
 800032c:	d07f      	beq.n	800042e <HAL_GPIO_Init+0x17e>
 800032e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000332:	4290      	cmp	r0, r2
 8000334:	d07d      	beq.n	8000432 <HAL_GPIO_Init+0x182>
 8000336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800033a:	4290      	cmp	r0, r2
 800033c:	d034      	beq.n	80003a8 <HAL_GPIO_Init+0xf8>
 800033e:	2204      	movs	r2, #4
 8000340:	e035      	b.n	80003ae <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8000342:	4f4d      	ldr	r7, [pc, #308]	; (8000478 <HAL_GPIO_Init+0x1c8>)
 8000344:	42bc      	cmp	r4, r7
 8000346:	d014      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000348:	d90b      	bls.n	8000362 <HAL_GPIO_Init+0xb2>
 800034a:	4f4c      	ldr	r7, [pc, #304]	; (800047c <HAL_GPIO_Init+0x1cc>)
 800034c:	42bc      	cmp	r4, r7
 800034e:	d010      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000350:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000354:	42bc      	cmp	r4, r7
 8000356:	d00c      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 8000358:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800035c:	42bc      	cmp	r4, r7
 800035e:	d1b1      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
 8000360:	e007      	b.n	8000372 <HAL_GPIO_Init+0xc2>
 8000362:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000366:	42bc      	cmp	r4, r7
 8000368:	d003      	beq.n	8000372 <HAL_GPIO_Init+0xc2>
 800036a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800036e:	42bc      	cmp	r4, r7
 8000370:	d1a8      	bne.n	80002c4 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000372:	688c      	ldr	r4, [r1, #8]
 8000374:	b17c      	cbz	r4, 8000396 <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000376:	2c01      	cmp	r4, #1
 8000378:	d008      	beq.n	800038c <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800037a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800037c:	2608      	movs	r6, #8
 800037e:	e7a1      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000380:	68ce      	ldr	r6, [r1, #12]
 8000382:	3608      	adds	r6, #8
          break;
 8000384:	e79e      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000386:	68ce      	ldr	r6, [r1, #12]
 8000388:	360c      	adds	r6, #12
          break;
 800038a:	e79b      	b.n	80002c4 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800038c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800038e:	2608      	movs	r6, #8
 8000390:	e798      	b.n	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000392:	2600      	movs	r6, #0
 8000394:	e796      	b.n	80002c4 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000396:	2604      	movs	r6, #4
 8000398:	e794      	b.n	80002c4 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800039a:	f100 0c04 	add.w	ip, r0, #4
 800039e:	e794      	b.n	80002ca <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 80003a0:	f1a5 0408 	sub.w	r4, r5, #8
 80003a4:	00a4      	lsls	r4, r4, #2
 80003a6:	e793      	b.n	80002d0 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003a8:	2203      	movs	r2, #3
 80003aa:	e000      	b.n	80003ae <HAL_GPIO_Init+0xfe>
 80003ac:	2200      	movs	r2, #0
 80003ae:	40ba      	lsls	r2, r7
 80003b0:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 80003b4:	3402      	adds	r4, #2
 80003b6:	4f2e      	ldr	r7, [pc, #184]	; (8000470 <HAL_GPIO_Init+0x1c0>)
 80003b8:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003bc:	684a      	ldr	r2, [r1, #4]
 80003be:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80003c2:	d038      	beq.n	8000436 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c4:	4c2e      	ldr	r4, [pc, #184]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003c6:	6822      	ldr	r2, [r4, #0]
 80003c8:	431a      	orrs	r2, r3
 80003ca:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003cc:	684a      	ldr	r2, [r1, #4]
 80003ce:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80003d2:	d036      	beq.n	8000442 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	4c2a      	ldr	r4, [pc, #168]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003d6:	6862      	ldr	r2, [r4, #4]
 80003d8:	431a      	orrs	r2, r3
 80003da:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003dc:	684a      	ldr	r2, [r1, #4]
 80003de:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80003e2:	d034      	beq.n	800044e <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e4:	4c26      	ldr	r4, [pc, #152]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003e6:	68a2      	ldr	r2, [r4, #8]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003ec:	684a      	ldr	r2, [r1, #4]
 80003ee:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80003f2:	d032      	beq.n	800045a <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f4:	4c22      	ldr	r4, [pc, #136]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 80003f6:	68e2      	ldr	r2, [r4, #12]
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003fc:	3501      	adds	r5, #1
 80003fe:	2d0f      	cmp	r5, #15
 8000400:	d831      	bhi.n	8000466 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 8000402:	2201      	movs	r2, #1
 8000404:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000406:	680b      	ldr	r3, [r1, #0]
 8000408:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 800040a:	429a      	cmp	r2, r3
 800040c:	d1f6      	bne.n	80003fc <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 800040e:	684c      	ldr	r4, [r1, #4]
 8000410:	2c12      	cmp	r4, #18
 8000412:	d0b8      	beq.n	8000386 <HAL_GPIO_Init+0xd6>
 8000414:	d895      	bhi.n	8000342 <HAL_GPIO_Init+0x92>
 8000416:	2c02      	cmp	r4, #2
 8000418:	d0b2      	beq.n	8000380 <HAL_GPIO_Init+0xd0>
 800041a:	f67f af4e 	bls.w	80002ba <HAL_GPIO_Init+0xa>
 800041e:	2c03      	cmp	r4, #3
 8000420:	d0b7      	beq.n	8000392 <HAL_GPIO_Init+0xe2>
 8000422:	2c11      	cmp	r4, #17
 8000424:	f47f af4e 	bne.w	80002c4 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000428:	68ce      	ldr	r6, [r1, #12]
 800042a:	3604      	adds	r6, #4
          break;
 800042c:	e74a      	b.n	80002c4 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800042e:	2201      	movs	r2, #1
 8000430:	e7bd      	b.n	80003ae <HAL_GPIO_Init+0xfe>
 8000432:	2202      	movs	r2, #2
 8000434:	e7bb      	b.n	80003ae <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000436:	4c12      	ldr	r4, [pc, #72]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000438:	6822      	ldr	r2, [r4, #0]
 800043a:	ea22 0203 	bic.w	r2, r2, r3
 800043e:	6022      	str	r2, [r4, #0]
 8000440:	e7c4      	b.n	80003cc <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000442:	4c0f      	ldr	r4, [pc, #60]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000444:	6862      	ldr	r2, [r4, #4]
 8000446:	ea22 0203 	bic.w	r2, r2, r3
 800044a:	6062      	str	r2, [r4, #4]
 800044c:	e7c6      	b.n	80003dc <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800044e:	4c0c      	ldr	r4, [pc, #48]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 8000450:	68a2      	ldr	r2, [r4, #8]
 8000452:	ea22 0203 	bic.w	r2, r2, r3
 8000456:	60a2      	str	r2, [r4, #8]
 8000458:	e7c8      	b.n	80003ec <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800045a:	4c09      	ldr	r4, [pc, #36]	; (8000480 <HAL_GPIO_Init+0x1d0>)
 800045c:	68e2      	ldr	r2, [r4, #12]
 800045e:	ea22 0303 	bic.w	r3, r2, r3
 8000462:	60e3      	str	r3, [r4, #12]
 8000464:	e7ca      	b.n	80003fc <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8000466:	b002      	add	sp, #8
 8000468:	bcf0      	pop	{r4, r5, r6, r7}
 800046a:	4770      	bx	lr
 800046c:	40021000 	.word	0x40021000
 8000470:	40010000 	.word	0x40010000
 8000474:	40010800 	.word	0x40010800
 8000478:	10210000 	.word	0x10210000
 800047c:	10310000 	.word	0x10310000
 8000480:	40010400 	.word	0x40010400

08000484 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000484:	b912      	cbnz	r2, 800048c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000486:	0409      	lsls	r1, r1, #16
 8000488:	6101      	str	r1, [r0, #16]
  }
}
 800048a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800048c:	6101      	str	r1, [r0, #16]
 800048e:	4770      	bx	lr

08000490 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000490:	4770      	bx	lr
	...

08000494 <HAL_GPIO_EXTI_IRQHandler>:
{
 8000494:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000496:	4b05      	ldr	r3, [pc, #20]	; (80004ac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4203      	tst	r3, r0
 800049c:	d100      	bne.n	80004a0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800049e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004a0:	4b02      	ldr	r3, [pc, #8]	; (80004ac <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80004a2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004a4:	f7ff fff4 	bl	8000490 <HAL_GPIO_EXTI_Callback>
}
 80004a8:	e7f9      	b.n	800049e <HAL_GPIO_EXTI_IRQHandler+0xa>
 80004aa:	bf00      	nop
 80004ac:	40010400 	.word	0x40010400

080004b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80004b0:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80004b2:	4b08      	ldr	r3, [pc, #32]	; (80004d4 <RCC_Delay+0x24>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <RCC_Delay+0x28>)
 80004b8:	fba2 2303 	umull	r2, r3, r2, r3
 80004bc:	0a5b      	lsrs	r3, r3, #9
 80004be:	fb00 f003 	mul.w	r0, r0, r3
 80004c2:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80004c4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80004c6:	9b01      	ldr	r3, [sp, #4]
 80004c8:	1e5a      	subs	r2, r3, #1
 80004ca:	9201      	str	r2, [sp, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1f9      	bne.n	80004c4 <RCC_Delay+0x14>
}
 80004d0:	b002      	add	sp, #8
 80004d2:	4770      	bx	lr
 80004d4:	2000000c 	.word	0x2000000c
 80004d8:	10624dd3 	.word	0x10624dd3

080004dc <HAL_RCC_OscConfig>:
{
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	6803      	ldr	r3, [r0, #0]
 80004e4:	f013 0f01 	tst.w	r3, #1
 80004e8:	d02c      	beq.n	8000544 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ea:	4bab      	ldr	r3, [pc, #684]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	f003 030c 	and.w	r3, r3, #12
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d01d      	beq.n	8000532 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004f6:	4ba8      	ldr	r3, [pc, #672]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	f003 030c 	and.w	r3, r3, #12
 80004fe:	2b08      	cmp	r3, #8
 8000500:	d012      	beq.n	8000528 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000502:	6863      	ldr	r3, [r4, #4]
 8000504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000508:	d041      	beq.n	800058e <HAL_RCC_OscConfig+0xb2>
 800050a:	2b00      	cmp	r3, #0
 800050c:	d155      	bne.n	80005ba <HAL_RCC_OscConfig+0xde>
 800050e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000512:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	e037      	b.n	8000598 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000528:	4b9b      	ldr	r3, [pc, #620]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000530:	d0e7      	beq.n	8000502 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000532:	4b99      	ldr	r3, [pc, #612]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800053a:	d003      	beq.n	8000544 <HAL_RCC_OscConfig+0x68>
 800053c:	6863      	ldr	r3, [r4, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	f000 81ae 	beq.w	80008a0 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	f013 0f02 	tst.w	r3, #2
 800054a:	d076      	beq.n	800063a <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800054c:	4b92      	ldr	r3, [pc, #584]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	f013 0f0c 	tst.w	r3, #12
 8000554:	d05f      	beq.n	8000616 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000556:	4b90      	ldr	r3, [pc, #576]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	f003 030c 	and.w	r3, r3, #12
 800055e:	2b08      	cmp	r3, #8
 8000560:	d054      	beq.n	800060c <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000562:	6923      	ldr	r3, [r4, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	f000 808a 	beq.w	800067e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800056a:	4b8c      	ldr	r3, [pc, #560]	; (800079c <HAL_RCC_OscConfig+0x2c0>)
 800056c:	2201      	movs	r2, #1
 800056e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000570:	f7ff fe30 	bl	80001d4 <HAL_GetTick>
 8000574:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000576:	4b88      	ldr	r3, [pc, #544]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f013 0f02 	tst.w	r3, #2
 800057e:	d175      	bne.n	800066c <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000580:	f7ff fe28 	bl	80001d4 <HAL_GetTick>
 8000584:	1b40      	subs	r0, r0, r5
 8000586:	2802      	cmp	r0, #2
 8000588:	d9f5      	bls.n	8000576 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 800058a:	2003      	movs	r0, #3
 800058c:	e18b      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	4a82      	ldr	r2, [pc, #520]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000590:	6813      	ldr	r3, [r2, #0]
 8000592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000596:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	b343      	cbz	r3, 80005ee <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800059c:	f7ff fe1a 	bl	80001d4 <HAL_GetTick>
 80005a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005a2:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005aa:	d1cb      	bne.n	8000544 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ac:	f7ff fe12 	bl	80001d4 <HAL_GetTick>
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	2864      	cmp	r0, #100	; 0x64
 80005b4:	d9f5      	bls.n	80005a2 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80005b6:	2003      	movs	r0, #3
 80005b8:	e175      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005be:	d009      	beq.n	80005d4 <HAL_RCC_OscConfig+0xf8>
 80005c0:	4b75      	ldr	r3, [pc, #468]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	e7e1      	b.n	8000598 <HAL_RCC_OscConfig+0xbc>
 80005d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005d8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	e7d4      	b.n	8000598 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 80005ee:	f7ff fdf1 	bl	80001d4 <HAL_GetTick>
 80005f2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f4:	4b68      	ldr	r3, [pc, #416]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005fc:	d0a2      	beq.n	8000544 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005fe:	f7ff fde9 	bl	80001d4 <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	2864      	cmp	r0, #100	; 0x64
 8000606:	d9f5      	bls.n	80005f4 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000608:	2003      	movs	r0, #3
 800060a:	e14c      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800060c:	4b62      	ldr	r3, [pc, #392]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000614:	d1a5      	bne.n	8000562 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f013 0f02 	tst.w	r3, #2
 800061e:	d004      	beq.n	800062a <HAL_RCC_OscConfig+0x14e>
 8000620:	6923      	ldr	r3, [r4, #16]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d001      	beq.n	800062a <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000626:	2001      	movs	r0, #1
 8000628:	e13d      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800062a:	4a5b      	ldr	r2, [pc, #364]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800062c:	6813      	ldr	r3, [r2, #0]
 800062e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000632:	6961      	ldr	r1, [r4, #20]
 8000634:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000638:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	f013 0f08 	tst.w	r3, #8
 8000640:	d032      	beq.n	80006a8 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000642:	69a3      	ldr	r3, [r4, #24]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d05b      	beq.n	8000700 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8000648:	4b55      	ldr	r3, [pc, #340]	; (80007a0 <HAL_RCC_OscConfig+0x2c4>)
 800064a:	2201      	movs	r2, #1
 800064c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800064e:	f7ff fdc1 	bl	80001d4 <HAL_GetTick>
 8000652:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000654:	4b50      	ldr	r3, [pc, #320]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000658:	f013 0f02 	tst.w	r3, #2
 800065c:	d121      	bne.n	80006a2 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800065e:	f7ff fdb9 	bl	80001d4 <HAL_GetTick>
 8000662:	1b40      	subs	r0, r0, r5
 8000664:	2802      	cmp	r0, #2
 8000666:	d9f5      	bls.n	8000654 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000668:	2003      	movs	r0, #3
 800066a:	e11c      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800066c:	4a4a      	ldr	r2, [pc, #296]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800066e:	6813      	ldr	r3, [r2, #0]
 8000670:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000674:	6961      	ldr	r1, [r4, #20]
 8000676:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	e7dd      	b.n	800063a <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800067e:	4b47      	ldr	r3, [pc, #284]	; (800079c <HAL_RCC_OscConfig+0x2c0>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000684:	f7ff fda6 	bl	80001d4 <HAL_GetTick>
 8000688:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800068a:	4b43      	ldr	r3, [pc, #268]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f013 0f02 	tst.w	r3, #2
 8000692:	d0d2      	beq.n	800063a <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000694:	f7ff fd9e 	bl	80001d4 <HAL_GetTick>
 8000698:	1b40      	subs	r0, r0, r5
 800069a:	2802      	cmp	r0, #2
 800069c:	d9f5      	bls.n	800068a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800069e:	2003      	movs	r0, #3
 80006a0:	e101      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff04 	bl	80004b0 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	f013 0f04 	tst.w	r3, #4
 80006ae:	f000 8097 	beq.w	80007e0 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80006ba:	d133      	bne.n	8000724 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 80006be:	69da      	ldr	r2, [r3, #28]
 80006c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006c4:	61da      	str	r2, [r3, #28]
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80006d0:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_RCC_OscConfig+0x2c8>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80006da:	d025      	beq.n	8000728 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006dc:	68e3      	ldr	r3, [r4, #12]
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d036      	beq.n	8000750 <HAL_RCC_OscConfig+0x274>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d14c      	bne.n	8000780 <HAL_RCC_OscConfig+0x2a4>
 80006e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80006ea:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	f022 0201 	bic.w	r2, r2, #1
 80006f4:	621a      	str	r2, [r3, #32]
 80006f6:	6a1a      	ldr	r2, [r3, #32]
 80006f8:	f022 0204 	bic.w	r2, r2, #4
 80006fc:	621a      	str	r2, [r3, #32]
 80006fe:	e02c      	b.n	800075a <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8000700:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <HAL_RCC_OscConfig+0x2c4>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000706:	f7ff fd65 	bl	80001d4 <HAL_GetTick>
 800070a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 800070e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000710:	f013 0f02 	tst.w	r3, #2
 8000714:	d0c8      	beq.n	80006a8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000716:	f7ff fd5d 	bl	80001d4 <HAL_GetTick>
 800071a:	1b40      	subs	r0, r0, r5
 800071c:	2802      	cmp	r0, #2
 800071e:	d9f5      	bls.n	800070c <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8000720:	2003      	movs	r0, #3
 8000722:	e0c0      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8000724:	2500      	movs	r5, #0
 8000726:	e7d4      	b.n	80006d2 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_RCC_OscConfig+0x2c8>)
 800072a:	6813      	ldr	r3, [r2, #0]
 800072c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000730:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000732:	f7ff fd4f 	bl	80001d4 <HAL_GetTick>
 8000736:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000738:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <HAL_RCC_OscConfig+0x2c8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000740:	d1cc      	bne.n	80006dc <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000742:	f7ff fd47 	bl	80001d4 <HAL_GetTick>
 8000746:	1b80      	subs	r0, r0, r6
 8000748:	2864      	cmp	r0, #100	; 0x64
 800074a:	d9f5      	bls.n	8000738 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 800074c:	2003      	movs	r0, #3
 800074e:	e0aa      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000752:	6a13      	ldr	r3, [r2, #32]
 8000754:	f043 0301 	orr.w	r3, r3, #1
 8000758:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800075a:	68e3      	ldr	r3, [r4, #12]
 800075c:	b373      	cbz	r3, 80007bc <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 800075e:	f7ff fd39 	bl	80001d4 <HAL_GetTick>
 8000762:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000766:	6a1b      	ldr	r3, [r3, #32]
 8000768:	f013 0f02 	tst.w	r3, #2
 800076c:	d137      	bne.n	80007de <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800076e:	f7ff fd31 	bl	80001d4 <HAL_GetTick>
 8000772:	1b80      	subs	r0, r0, r6
 8000774:	f241 3388 	movw	r3, #5000	; 0x1388
 8000778:	4298      	cmp	r0, r3
 800077a:	d9f3      	bls.n	8000764 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 800077c:	2003      	movs	r0, #3
 800077e:	e092      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000780:	2b05      	cmp	r3, #5
 8000782:	d011      	beq.n	80007a8 <HAL_RCC_OscConfig+0x2cc>
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_RCC_OscConfig+0x2bc>)
 8000786:	6a1a      	ldr	r2, [r3, #32]
 8000788:	f022 0201 	bic.w	r2, r2, #1
 800078c:	621a      	str	r2, [r3, #32]
 800078e:	6a1a      	ldr	r2, [r3, #32]
 8000790:	f022 0204 	bic.w	r2, r2, #4
 8000794:	621a      	str	r2, [r3, #32]
 8000796:	e7e0      	b.n	800075a <HAL_RCC_OscConfig+0x27e>
 8000798:	40021000 	.word	0x40021000
 800079c:	42420000 	.word	0x42420000
 80007a0:	42420480 	.word	0x42420480
 80007a4:	40007000 	.word	0x40007000
 80007a8:	4b41      	ldr	r3, [pc, #260]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 80007aa:	6a1a      	ldr	r2, [r3, #32]
 80007ac:	f042 0204 	orr.w	r2, r2, #4
 80007b0:	621a      	str	r2, [r3, #32]
 80007b2:	6a1a      	ldr	r2, [r3, #32]
 80007b4:	f042 0201 	orr.w	r2, r2, #1
 80007b8:	621a      	str	r2, [r3, #32]
 80007ba:	e7ce      	b.n	800075a <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 80007bc:	f7ff fd0a 	bl	80001d4 <HAL_GetTick>
 80007c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c2:	4b3b      	ldr	r3, [pc, #236]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	f013 0f02 	tst.w	r3, #2
 80007ca:	d008      	beq.n	80007de <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007cc:	f7ff fd02 	bl	80001d4 <HAL_GetTick>
 80007d0:	1b80      	subs	r0, r0, r6
 80007d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80007d6:	4298      	cmp	r0, r3
 80007d8:	d9f3      	bls.n	80007c2 <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80007da:	2003      	movs	r0, #3
 80007dc:	e063      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80007de:	b9e5      	cbnz	r5, 800081a <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e0:	69e3      	ldr	r3, [r4, #28]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d05e      	beq.n	80008a4 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007e6:	4a32      	ldr	r2, [pc, #200]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 80007e8:	6852      	ldr	r2, [r2, #4]
 80007ea:	f002 020c 	and.w	r2, r2, #12
 80007ee:	2a08      	cmp	r2, #8
 80007f0:	d05b      	beq.n	80008aa <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	d017      	beq.n	8000826 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80007f6:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <HAL_RCC_OscConfig+0x3d8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007fc:	f7ff fcea 	bl	80001d4 <HAL_GetTick>
 8000800:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000802:	4b2b      	ldr	r3, [pc, #172]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800080a:	d047      	beq.n	800089c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800080c:	f7ff fce2 	bl	80001d4 <HAL_GetTick>
 8000810:	1b00      	subs	r0, r0, r4
 8000812:	2802      	cmp	r0, #2
 8000814:	d9f5      	bls.n	8000802 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8000816:	2003      	movs	r0, #3
 8000818:	e045      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 800081c:	69d3      	ldr	r3, [r2, #28]
 800081e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000822:	61d3      	str	r3, [r2, #28]
 8000824:	e7dc      	b.n	80007e0 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8000826:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <HAL_RCC_OscConfig+0x3d8>)
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800082c:	f7ff fcd2 	bl	80001d4 <HAL_GetTick>
 8000830:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000832:	4b1f      	ldr	r3, [pc, #124]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800083a:	d006      	beq.n	800084a <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800083c:	f7ff fcca 	bl	80001d4 <HAL_GetTick>
 8000840:	1b40      	subs	r0, r0, r5
 8000842:	2802      	cmp	r0, #2
 8000844:	d9f5      	bls.n	8000832 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8000846:	2003      	movs	r0, #3
 8000848:	e02d      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800084a:	6a23      	ldr	r3, [r4, #32]
 800084c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000850:	d01a      	beq.n	8000888 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000852:	4917      	ldr	r1, [pc, #92]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 8000854:	684b      	ldr	r3, [r1, #4]
 8000856:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800085a:	6a22      	ldr	r2, [r4, #32]
 800085c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800085e:	4302      	orrs	r2, r0
 8000860:	4313      	orrs	r3, r2
 8000862:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_RCC_OscConfig+0x3d8>)
 8000866:	2201      	movs	r2, #1
 8000868:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800086a:	f7ff fcb3 	bl	80001d4 <HAL_GetTick>
 800086e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000878:	d10e      	bne.n	8000898 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800087a:	f7ff fcab 	bl	80001d4 <HAL_GetTick>
 800087e:	1b00      	subs	r0, r0, r4
 8000880:	2802      	cmp	r0, #2
 8000882:	d9f5      	bls.n	8000870 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8000884:	2003      	movs	r0, #3
 8000886:	e00e      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000888:	4a09      	ldr	r2, [pc, #36]	; (80008b0 <HAL_RCC_OscConfig+0x3d4>)
 800088a:	6853      	ldr	r3, [r2, #4]
 800088c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000890:	68a1      	ldr	r1, [r4, #8]
 8000892:	430b      	orrs	r3, r1
 8000894:	6053      	str	r3, [r2, #4]
 8000896:	e7dc      	b.n	8000852 <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000898:	2000      	movs	r0, #0
 800089a:	e004      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
 800089c:	2000      	movs	r0, #0
 800089e:	e002      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 80008a0:	2001      	movs	r0, #1
 80008a2:	e000      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 80008a4:	2000      	movs	r0, #0
}
 80008a6:	b002      	add	sp, #8
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80008aa:	2001      	movs	r0, #1
 80008ac:	e7fb      	b.n	80008a6 <HAL_RCC_OscConfig+0x3ca>
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	42420060 	.word	0x42420060

080008b8 <HAL_RCC_GetSysClockFreq>:
{
 80008b8:	b410      	push	{r4}
 80008ba:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80008bc:	4c16      	ldr	r4, [pc, #88]	; (8000918 <HAL_RCC_GetSysClockFreq+0x60>)
 80008be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c2:	f10d 0c18 	add.w	ip, sp, #24
 80008c6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80008ca:	8a23      	ldrh	r3, [r4, #16]
 80008cc:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_RCC_GetSysClockFreq+0x64>)
 80008d2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80008d4:	f003 020c 	and.w	r2, r3, #12
 80008d8:	2a08      	cmp	r2, #8
 80008da:	d11a      	bne.n	8000912 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80008dc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80008e0:	4462      	add	r2, ip
 80008e2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80008e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80008ea:	d105      	bne.n	80008f8 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80008ec:	480c      	ldr	r0, [pc, #48]	; (8000920 <HAL_RCC_GetSysClockFreq+0x68>)
 80008ee:	fb00 f002 	mul.w	r0, r0, r2
}
 80008f2:	b007      	add	sp, #28
 80008f4:	bc10      	pop	{r4}
 80008f6:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_RCC_GetSysClockFreq+0x64>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000900:	4463      	add	r3, ip
 8000902:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000908:	fb00 f002 	mul.w	r0, r0, r2
 800090c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000910:	e7ef      	b.n	80008f2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8000914:	e7ed      	b.n	80008f2 <HAL_RCC_GetSysClockFreq+0x3a>
 8000916:	bf00      	nop
 8000918:	08001a1c 	.word	0x08001a1c
 800091c:	40021000 	.word	0x40021000
 8000920:	003d0900 	.word	0x003d0900
 8000924:	007a1200 	.word	0x007a1200

08000928 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_RCC_ClockConfig+0x18c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	428b      	cmp	r3, r1
 8000932:	d20c      	bcs.n	800094e <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000934:	4a5f      	ldr	r2, [pc, #380]	; (8000ab4 <HAL_RCC_ClockConfig+0x18c>)
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f023 0307 	bic.w	r3, r3, #7
 800093c:	430b      	orrs	r3, r1
 800093e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000940:	6813      	ldr	r3, [r2, #0]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	428b      	cmp	r3, r1
 8000948:	d001      	beq.n	800094e <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 800094a:	2001      	movs	r0, #1
}
 800094c:	4770      	bx	lr
{
 800094e:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	f013 0f02 	tst.w	r3, #2
 8000956:	d017      	beq.n	8000988 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000958:	f013 0f04 	tst.w	r3, #4
 800095c:	d004      	beq.n	8000968 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800095e:	4a56      	ldr	r2, [pc, #344]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000960:	6853      	ldr	r3, [r2, #4]
 8000962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000966:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000968:	6803      	ldr	r3, [r0, #0]
 800096a:	f013 0f08 	tst.w	r3, #8
 800096e:	d004      	beq.n	800097a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000970:	4a51      	ldr	r2, [pc, #324]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000972:	6853      	ldr	r3, [r2, #4]
 8000974:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000978:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800097a:	4a4f      	ldr	r2, [pc, #316]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 800097c:	6853      	ldr	r3, [r2, #4]
 800097e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000982:	6884      	ldr	r4, [r0, #8]
 8000984:	4323      	orrs	r3, r4
 8000986:	6053      	str	r3, [r2, #4]
 8000988:	460d      	mov	r5, r1
 800098a:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800098c:	6803      	ldr	r3, [r0, #0]
 800098e:	f013 0f01 	tst.w	r3, #1
 8000992:	d052      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000994:	6843      	ldr	r3, [r0, #4]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d023      	beq.n	80009e2 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800099a:	2b02      	cmp	r3, #2
 800099c:	d028      	beq.n	80009f0 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800099e:	4a46      	ldr	r2, [pc, #280]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	f012 0f02 	tst.w	r2, #2
 80009a6:	f000 8082 	beq.w	8000aae <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009aa:	4943      	ldr	r1, [pc, #268]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 80009ac:	684a      	ldr	r2, [r1, #4]
 80009ae:	f022 0203 	bic.w	r2, r2, #3
 80009b2:	4313      	orrs	r3, r2
 80009b4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80009b6:	f7ff fc0d 	bl	80001d4 <HAL_GetTick>
 80009ba:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d01d      	beq.n	80009fe <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d02a      	beq.n	8000a1c <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f013 0f0c 	tst.w	r3, #12
 80009ce:	d034      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d0:	f7ff fc00 	bl	80001d4 <HAL_GetTick>
 80009d4:	1b80      	subs	r0, r0, r6
 80009d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009da:	4298      	cmp	r0, r3
 80009dc:	d9f3      	bls.n	80009c6 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80009de:	2003      	movs	r0, #3
 80009e0:	e064      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e2:	4a35      	ldr	r2, [pc, #212]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80009ea:	d1de      	bne.n	80009aa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
 80009ee:	e05d      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009f0:	4a31      	ldr	r2, [pc, #196]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 80009f2:	6812      	ldr	r2, [r2, #0]
 80009f4:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80009f8:	d1d7      	bne.n	80009aa <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80009fa:	2001      	movs	r0, #1
 80009fc:	e056      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009fe:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 030c 	and.w	r3, r3, #12
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d017      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a0a:	f7ff fbe3 	bl	80001d4 <HAL_GetTick>
 8000a0e:	1b80      	subs	r0, r0, r6
 8000a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a14:	4298      	cmp	r0, r3
 8000a16:	d9f2      	bls.n	80009fe <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000a18:	2003      	movs	r0, #3
 8000a1a:	e047      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 030c 	and.w	r3, r3, #12
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d008      	beq.n	8000a3a <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a28:	f7ff fbd4 	bl	80001d4 <HAL_GetTick>
 8000a2c:	1b80      	subs	r0, r0, r6
 8000a2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d9f2      	bls.n	8000a1c <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000a36:	2003      	movs	r0, #3
 8000a38:	e038      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <HAL_RCC_ClockConfig+0x18c>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f003 0307 	and.w	r3, r3, #7
 8000a42:	42ab      	cmp	r3, r5
 8000a44:	d90c      	bls.n	8000a60 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a46:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <HAL_RCC_ClockConfig+0x18c>)
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f023 0307 	bic.w	r3, r3, #7
 8000a4e:	432b      	orrs	r3, r5
 8000a50:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a52:	6813      	ldr	r3, [r2, #0]
 8000a54:	f003 0307 	and.w	r3, r3, #7
 8000a58:	42ab      	cmp	r3, r5
 8000a5a:	d001      	beq.n	8000a60 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	e025      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	f013 0f04 	tst.w	r3, #4
 8000a66:	d006      	beq.n	8000a76 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000a6a:	6853      	ldr	r3, [r2, #4]
 8000a6c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a70:	68e1      	ldr	r1, [r4, #12]
 8000a72:	430b      	orrs	r3, r1
 8000a74:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a76:	6823      	ldr	r3, [r4, #0]
 8000a78:	f013 0f08 	tst.w	r3, #8
 8000a7c:	d007      	beq.n	8000a8e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000a80:	6853      	ldr	r3, [r2, #4]
 8000a82:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a86:	6921      	ldr	r1, [r4, #16]
 8000a88:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a8c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a8e:	f7ff ff13 	bl	80008b8 <HAL_RCC_GetSysClockFreq>
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_RCC_ClockConfig+0x190>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HAL_RCC_ClockConfig+0x194>)
 8000a9c:	5cd3      	ldrb	r3, [r2, r3]
 8000a9e:	40d8      	lsrs	r0, r3
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <HAL_RCC_ClockConfig+0x198>)
 8000aa2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f7ff fb51 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000aaa:	2000      	movs	r0, #0
}
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000aae:	2001      	movs	r0, #1
 8000ab0:	e7fc      	b.n	8000aac <HAL_RCC_ClockConfig+0x184>
 8000ab2:	bf00      	nop
 8000ab4:	40022000 	.word	0x40022000
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	08001a30 	.word	0x08001a30
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <HAL_RCC_GetHCLKFreq>:
}
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <HAL_RCC_GetHCLKFreq+0x8>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	2000000c 	.word	0x2000000c

08000ad0 <HAL_RCC_GetPCLK1Freq>:
{
 8000ad0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ad2:	f7ff fff7 	bl	8000ac4 <HAL_RCC_GetHCLKFreq>
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ade:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ae0:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000ae2:	40d8      	lsrs	r0, r3
 8000ae4:	bd08      	pop	{r3, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	08001a40 	.word	0x08001a40

08000af0 <HAL_RCC_GetPCLK2Freq>:
{
 8000af0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000af2:	f7ff ffe7 	bl	8000ac4 <HAL_RCC_GetHCLKFreq>
 8000af6:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000afe:	4a03      	ldr	r2, [pc, #12]	; (8000b0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b00:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000b02:	40d8      	lsrs	r0, r3
 8000b04:	bd08      	pop	{r3, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	08001a40 	.word	0x08001a40

08000b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	4605      	mov	r5, r0
 8000b14:	460f      	mov	r7, r1
 8000b16:	4616      	mov	r6, r2
 8000b18:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b1a:	e03b      	b.n	8000b94 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b1c:	b12c      	cbz	r4, 8000b2a <SPI_WaitFlagStateUntilTimeout+0x1a>
 8000b1e:	f7ff fb59 	bl	80001d4 <HAL_GetTick>
 8000b22:	9b06      	ldr	r3, [sp, #24]
 8000b24:	1ac0      	subs	r0, r0, r3
 8000b26:	42a0      	cmp	r0, r4
 8000b28:	d334      	bcc.n	8000b94 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000b2a:	682a      	ldr	r2, [r5, #0]
 8000b2c:	6853      	ldr	r3, [r2, #4]
 8000b2e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000b32:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b34:	686b      	ldr	r3, [r5, #4]
 8000b36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b3a:	d00b      	beq.n	8000b54 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000b3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b42:	d014      	beq.n	8000b6e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000b44:	2301      	movs	r3, #1
 8000b46:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8000b50:	2003      	movs	r0, #3
 8000b52:	e027      	b.n	8000ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000b54:	68ab      	ldr	r3, [r5, #8]
 8000b56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b5a:	d002      	beq.n	8000b62 <SPI_WaitFlagStateUntilTimeout+0x52>
 8000b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b60:	d1ec      	bne.n	8000b3c <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8000b62:	682a      	ldr	r2, [r5, #0]
 8000b64:	6813      	ldr	r3, [r2, #0]
 8000b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b6a:	6013      	str	r3, [r2, #0]
 8000b6c:	e7e6      	b.n	8000b3c <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8000b6e:	682a      	ldr	r2, [r5, #0]
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b76:	041b      	lsls	r3, r3, #16
 8000b78:	0c1b      	lsrs	r3, r3, #16
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	682a      	ldr	r2, [r5, #0]
 8000b7e:	6813      	ldr	r3, [r2, #0]
 8000b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b84:	6013      	str	r3, [r2, #0]
 8000b86:	e7dd      	b.n	8000b44 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b88:	2301      	movs	r3, #1
 8000b8a:	42b3      	cmp	r3, r6
 8000b8c:	d009      	beq.n	8000ba2 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8000b8e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000b92:	d1c3      	bne.n	8000b1c <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b94:	682b      	ldr	r3, [r5, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	ea37 0303 	bics.w	r3, r7, r3
 8000b9c:	d0f4      	beq.n	8000b88 <SPI_WaitFlagStateUntilTimeout+0x78>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e7f3      	b.n	8000b8a <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8000ba2:	2000      	movs	r0, #0
}
 8000ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ba6 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000ba6:	b510      	push	{r4, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000bac:	9200      	str	r2, [sp, #0]
 8000bae:	460b      	mov	r3, r1
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2180      	movs	r1, #128	; 0x80
 8000bb4:	f7ff ffac 	bl	8000b10 <SPI_WaitFlagStateUntilTimeout>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	b910      	cbnz	r0, 8000bc2 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000bc2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e7f6      	b.n	8000bbc <SPI_CheckFlag_BSY+0x16>

08000bce <HAL_SPI_Transmit>:
{
 8000bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000bd6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	f000 80c8 	beq.w	8000d70 <HAL_SPI_Transmit+0x1a2>
 8000be0:	4604      	mov	r4, r0
 8000be2:	460d      	mov	r5, r1
 8000be4:	4690      	mov	r8, r2
 8000be6:	2301      	movs	r3, #1
 8000be8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000bec:	f7ff faf2 	bl	80001d4 <HAL_GetTick>
 8000bf0:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000bf2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d00a      	beq.n	8000c12 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8000bfc:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	b004      	add	sp, #16
 8000c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	f000 80a4 	beq.w	8000d60 <HAL_SPI_Transmit+0x192>
 8000c18:	f1b8 0f00 	cmp.w	r8, #0
 8000c1c:	f000 80a2 	beq.w	8000d64 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c20:	2303      	movs	r3, #3
 8000c22:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000c2a:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000c2c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000c30:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000c34:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000c36:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000c38:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000c3a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000c3c:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000c3e:	68a3      	ldr	r3, [r4, #8]
 8000c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c44:	d01b      	beq.n	8000c7e <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000c4e:	d103      	bne.n	8000c58 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c56:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000c58:	68e3      	ldr	r3, [r4, #12]
 8000c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c5e:	d014      	beq.n	8000c8a <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000c60:	6863      	ldr	r3, [r4, #4]
 8000c62:	b11b      	cbz	r3, 8000c6c <HAL_SPI_Transmit+0x9e>
 8000c64:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d13e      	bne.n	8000cea <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000c6c:	6823      	ldr	r3, [r4, #0]
 8000c6e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000c72:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c76:	3b01      	subs	r3, #1
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000c7c:	e035      	b.n	8000cea <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8000c7e:	6822      	ldr	r2, [r4, #0]
 8000c80:	6813      	ldr	r3, [r2, #0]
 8000c82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c86:	6013      	str	r3, [r2, #0]
 8000c88:	e7dd      	b.n	8000c46 <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000c8a:	6863      	ldr	r3, [r4, #4]
 8000c8c:	b11b      	cbz	r3, 8000c96 <HAL_SPI_Transmit+0xc8>
 8000c8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d10d      	bne.n	8000cb2 <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000c9c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000ca6:	e004      	b.n	8000cb2 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d05d      	beq.n	8000d68 <HAL_SPI_Transmit+0x19a>
 8000cac:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000cb0:	d10f      	bne.n	8000cd2 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8000cb2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	b37b      	cbz	r3, 8000d18 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000cb8:	6823      	ldr	r3, [r4, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	f012 0f02 	tst.w	r2, #2
 8000cc0:	d0f2      	beq.n	8000ca8 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000cc2:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000cc6:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000cc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000cd0:	e7ef      	b.n	8000cb2 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000cd2:	f7ff fa7f 	bl	80001d4 <HAL_GetTick>
 8000cd6:	1bc0      	subs	r0, r0, r7
 8000cd8:	42b0      	cmp	r0, r6
 8000cda:	d3ea      	bcc.n	8000cb2 <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e78e      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d043      	beq.n	8000d6c <HAL_SPI_Transmit+0x19e>
 8000ce4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000ce8:	d10f      	bne.n	8000d0a <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8000cea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	b19b      	cbz	r3, 8000d18 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	f012 0f02 	tst.w	r2, #2
 8000cf8:	d0f2      	beq.n	8000ce0 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000cfa:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cfe:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d02:	3b01      	subs	r3, #1
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d08:	e7ef      	b.n	8000cea <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d0a:	f7ff fa63 	bl	80001d4 <HAL_GetTick>
 8000d0e:	1bc0      	subs	r0, r0, r7
 8000d10:	42b0      	cmp	r0, r6
 8000d12:	d3ea      	bcc.n	8000cea <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e772      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000d18:	9700      	str	r7, [sp, #0]
 8000d1a:	4633      	mov	r3, r6
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2102      	movs	r1, #2
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fef5 	bl	8000b10 <SPI_WaitFlagStateUntilTimeout>
 8000d26:	b108      	cbz	r0, 8000d2c <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e768      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000d2c:	463a      	mov	r2, r7
 8000d2e:	4631      	mov	r1, r6
 8000d30:	4620      	mov	r0, r4
 8000d32:	f7ff ff38 	bl	8000ba6 <SPI_CheckFlag_BSY>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b118      	cbz	r0, 8000d42 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
    goto error;
 8000d40:	e75d      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000d42:	68a2      	ldr	r2, [r4, #8]
 8000d44:	b932      	cbnz	r2, 8000d54 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000d46:	9203      	str	r2, [sp, #12]
 8000d48:	6822      	ldr	r2, [r4, #0]
 8000d4a:	68d1      	ldr	r1, [r2, #12]
 8000d4c:	9103      	str	r1, [sp, #12]
 8000d4e:	6892      	ldr	r2, [r2, #8]
 8000d50:	9203      	str	r2, [sp, #12]
 8000d52:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000d54:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f43f af51 	beq.w	8000bfe <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e74e      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e74c      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
 8000d64:	2301      	movs	r3, #1
 8000d66:	e74a      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e748      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	e746      	b.n	8000bfe <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8000d70:	2302      	movs	r3, #2
 8000d72:	e74a      	b.n	8000c0a <HAL_SPI_Transmit+0x3c>

08000d74 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000d74:	2800      	cmp	r0, #0
 8000d76:	d03c      	beq.n	8000df2 <HAL_SPI_Init+0x7e>
{
 8000d78:	b510      	push	{r4, lr}
 8000d7a:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000d80:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d031      	beq.n	8000dec <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000d8e:	6822      	ldr	r2, [r4, #0]
 8000d90:	6813      	ldr	r3, [r2, #0]
 8000d92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d96:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000d98:	6863      	ldr	r3, [r4, #4]
 8000d9a:	68a2      	ldr	r2, [r4, #8]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	68e2      	ldr	r2, [r4, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	6922      	ldr	r2, [r4, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	6962      	ldr	r2, [r4, #20]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	69a2      	ldr	r2, [r4, #24]
 8000dac:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000db0:	4313      	orrs	r3, r2
 8000db2:	69e2      	ldr	r2, [r4, #28]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	6a22      	ldr	r2, [r4, #32]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000dbc:	6822      	ldr	r2, [r4, #0]
 8000dbe:	430b      	orrs	r3, r1
 8000dc0:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000dc2:	8b63      	ldrh	r3, [r4, #26]
 8000dc4:	f003 0304 	and.w	r3, r3, #4
 8000dc8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000dca:	6822      	ldr	r2, [r4, #0]
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000dd4:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000dd6:	6822      	ldr	r2, [r4, #0]
 8000dd8:	69d3      	ldr	r3, [r2, #28]
 8000dda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dde:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000de0:	2000      	movs	r0, #0
 8000de2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000de4:	2301      	movs	r3, #1
 8000de6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000dea:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000dec:	f000 fc62 	bl	80016b4 <HAL_SPI_MspInit>
 8000df0:	e7ca      	b.n	8000d88 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000df2:	2001      	movs	r0, #1
}
 8000df4:	4770      	bx	lr

08000df6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000df6:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000df8:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dfa:	6a04      	ldr	r4, [r0, #32]
 8000dfc:	f024 0401 	bic.w	r4, r4, #1
 8000e00:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e02:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e04:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000e08:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e0c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000e10:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000e12:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e14:	6203      	str	r3, [r0, #32]
}
 8000e16:	bc10      	pop	{r4}
 8000e18:	4770      	bx	lr

08000e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000e1a:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e1c:	6a03      	ldr	r3, [r0, #32]
 8000e1e:	f023 0310 	bic.w	r3, r3, #16
 8000e22:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e24:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e26:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e28:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e2c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e34:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000e38:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e3a:	6203      	str	r3, [r0, #32]
}
 8000e3c:	bc10      	pop	{r4}
 8000e3e:	4770      	bx	lr

08000e40 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000e40:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e46:	f041 0107 	orr.w	r1, r1, #7
 8000e4a:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000e4c:	6081      	str	r1, [r0, #8]
}
 8000e4e:	4770      	bx	lr

08000e50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e50:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000e52:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e54:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e58:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e60:	6083      	str	r3, [r0, #8]
}
 8000e62:	bc10      	pop	{r4}
 8000e64:	4770      	bx	lr

08000e66 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000e66:	6802      	ldr	r2, [r0, #0]
 8000e68:	68d3      	ldr	r3, [r2, #12]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8000e70:	6802      	ldr	r2, [r0, #0]
 8000e72:	6813      	ldr	r3, [r2, #0]
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	4770      	bx	lr

08000e7e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000e7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d07d      	beq.n	8000f82 <HAL_TIM_ConfigClockSource+0x104>
{
 8000e86:	b510      	push	{r4, lr}
 8000e88:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000e90:	2302      	movs	r3, #2
 8000e92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000e96:	6802      	ldr	r2, [r0, #0]
 8000e98:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000ea2:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000ea4:	680b      	ldr	r3, [r1, #0]
 8000ea6:	2b40      	cmp	r3, #64	; 0x40
 8000ea8:	d057      	beq.n	8000f5a <HAL_TIM_ConfigClockSource+0xdc>
 8000eaa:	d910      	bls.n	8000ece <HAL_TIM_ConfigClockSource+0x50>
 8000eac:	2b70      	cmp	r3, #112	; 0x70
 8000eae:	d03e      	beq.n	8000f2e <HAL_TIM_ConfigClockSource+0xb0>
 8000eb0:	d81f      	bhi.n	8000ef2 <HAL_TIM_ConfigClockSource+0x74>
 8000eb2:	2b50      	cmp	r3, #80	; 0x50
 8000eb4:	d047      	beq.n	8000f46 <HAL_TIM_ConfigClockSource+0xc8>
 8000eb6:	2b60      	cmp	r3, #96	; 0x60
 8000eb8:	d132      	bne.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000eba:	68ca      	ldr	r2, [r1, #12]
 8000ebc:	6849      	ldr	r1, [r1, #4]
 8000ebe:	6800      	ldr	r0, [r0, #0]
 8000ec0:	f7ff ffab 	bl	8000e1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000ec4:	2160      	movs	r1, #96	; 0x60
 8000ec6:	6820      	ldr	r0, [r4, #0]
 8000ec8:	f7ff ffba 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000ecc:	e028      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d04d      	beq.n	8000f6e <HAL_TIM_ConfigClockSource+0xf0>
 8000ed2:	d908      	bls.n	8000ee6 <HAL_TIM_ConfigClockSource+0x68>
 8000ed4:	2b20      	cmp	r3, #32
 8000ed6:	d04f      	beq.n	8000f78 <HAL_TIM_ConfigClockSource+0xfa>
 8000ed8:	2b30      	cmp	r3, #48	; 0x30
 8000eda:	d121      	bne.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8000edc:	2130      	movs	r1, #48	; 0x30
 8000ede:	6800      	ldr	r0, [r0, #0]
 8000ee0:	f7ff ffae 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000ee4:	e01c      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000ee6:	b9db      	cbnz	r3, 8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6800      	ldr	r0, [r0, #0]
 8000eec:	f7ff ffa8 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000ef0:	e016      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ef6:	d00e      	beq.n	8000f16 <HAL_TIM_ConfigClockSource+0x98>
 8000ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000efc:	d110      	bne.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8000efe:	68cb      	ldr	r3, [r1, #12]
 8000f00:	684a      	ldr	r2, [r1, #4]
 8000f02:	6889      	ldr	r1, [r1, #8]
 8000f04:	6800      	ldr	r0, [r0, #0]
 8000f06:	f7ff ffa3 	bl	8000e50 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f0a:	6822      	ldr	r2, [r4, #0]
 8000f0c:	6893      	ldr	r3, [r2, #8]
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6093      	str	r3, [r2, #8]
    break;
 8000f14:	e004      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f16:	6802      	ldr	r2, [r0, #0]
 8000f18:	6893      	ldr	r3, [r2, #8]
 8000f1a:	f023 0307 	bic.w	r3, r3, #7
 8000f1e:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000f20:	2301      	movs	r3, #1
 8000f22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000f2c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8000f2e:	68cb      	ldr	r3, [r1, #12]
 8000f30:	684a      	ldr	r2, [r1, #4]
 8000f32:	6889      	ldr	r1, [r1, #8]
 8000f34:	6800      	ldr	r0, [r0, #0]
 8000f36:	f7ff ff8b 	bl	8000e50 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000f3a:	6822      	ldr	r2, [r4, #0]
 8000f3c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f3e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8000f42:	6093      	str	r3, [r2, #8]
    break;
 8000f44:	e7ec      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f46:	68ca      	ldr	r2, [r1, #12]
 8000f48:	6849      	ldr	r1, [r1, #4]
 8000f4a:	6800      	ldr	r0, [r0, #0]
 8000f4c:	f7ff ff53 	bl	8000df6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000f50:	2150      	movs	r1, #80	; 0x50
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	f7ff ff74 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000f58:	e7e2      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000f5a:	68ca      	ldr	r2, [r1, #12]
 8000f5c:	6849      	ldr	r1, [r1, #4]
 8000f5e:	6800      	ldr	r0, [r0, #0]
 8000f60:	f7ff ff49 	bl	8000df6 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	f7ff ff6a 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000f6c:	e7d8      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8000f6e:	2110      	movs	r1, #16
 8000f70:	6800      	ldr	r0, [r0, #0]
 8000f72:	f7ff ff65 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000f76:	e7d3      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8000f78:	2120      	movs	r1, #32
 8000f7a:	6800      	ldr	r0, [r0, #0]
 8000f7c:	f7ff ff60 	bl	8000e40 <TIM_ITRx_SetConfig>
    break;
 8000f80:	e7ce      	b.n	8000f20 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8000f82:	2002      	movs	r0, #2
}
 8000f84:	4770      	bx	lr

08000f86 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8000f86:	4770      	bx	lr

08000f88 <HAL_TIM_IC_CaptureCallback>:
}
 8000f88:	4770      	bx	lr

08000f8a <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_TIM_TriggerCallback>:
}
 8000f8c:	4770      	bx	lr

08000f8e <HAL_TIM_IRQHandler>:
{
 8000f8e:	b510      	push	{r4, lr}
 8000f90:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000f92:	6803      	ldr	r3, [r0, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	f012 0f02 	tst.w	r2, #2
 8000f9a:	d011      	beq.n	8000fc0 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000f9c:	68da      	ldr	r2, [r3, #12]
 8000f9e:	f012 0f02 	tst.w	r2, #2
 8000fa2:	d00d      	beq.n	8000fc0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fa4:	f06f 0202 	mvn.w	r2, #2
 8000fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fae:	6803      	ldr	r3, [r0, #0]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f013 0f03 	tst.w	r3, #3
 8000fb6:	d070      	beq.n	800109a <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8000fb8:	f7ff ffe6 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000fc0:	6823      	ldr	r3, [r4, #0]
 8000fc2:	691a      	ldr	r2, [r3, #16]
 8000fc4:	f012 0f04 	tst.w	r2, #4
 8000fc8:	d012      	beq.n	8000ff0 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	f012 0f04 	tst.w	r2, #4
 8000fd0:	d00e      	beq.n	8000ff0 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000fd2:	f06f 0204 	mvn.w	r2, #4
 8000fd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f413 7f40 	tst.w	r3, #768	; 0x300
 8000fe4:	d05f      	beq.n	80010a6 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f7ff ffce 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000fec:	2300      	movs	r3, #0
 8000fee:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ff0:	6823      	ldr	r3, [r4, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	f012 0f08 	tst.w	r2, #8
 8000ff8:	d012      	beq.n	8001020 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000ffa:	68da      	ldr	r2, [r3, #12]
 8000ffc:	f012 0f08 	tst.w	r2, #8
 8001000:	d00e      	beq.n	8001020 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001002:	f06f 0208 	mvn.w	r2, #8
 8001006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001008:	2304      	movs	r3, #4
 800100a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	f013 0f03 	tst.w	r3, #3
 8001014:	d04e      	beq.n	80010b4 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff ffb6 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800101c:	2300      	movs	r3, #0
 800101e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	f012 0f10 	tst.w	r2, #16
 8001028:	d012      	beq.n	8001050 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	f012 0f10 	tst.w	r2, #16
 8001030:	d00e      	beq.n	8001050 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001032:	f06f 0210 	mvn.w	r2, #16
 8001036:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001038:	2308      	movs	r3, #8
 800103a:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800103c:	6823      	ldr	r3, [r4, #0]
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001044:	d03d      	beq.n	80010c2 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8001046:	4620      	mov	r0, r4
 8001048:	f7ff ff9e 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800104c:	2300      	movs	r3, #0
 800104e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001050:	6823      	ldr	r3, [r4, #0]
 8001052:	691a      	ldr	r2, [r3, #16]
 8001054:	f012 0f01 	tst.w	r2, #1
 8001058:	d003      	beq.n	8001062 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	f012 0f01 	tst.w	r2, #1
 8001060:	d136      	bne.n	80010d0 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	691a      	ldr	r2, [r3, #16]
 8001066:	f012 0f80 	tst.w	r2, #128	; 0x80
 800106a:	d003      	beq.n	8001074 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800106c:	68da      	ldr	r2, [r3, #12]
 800106e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001072:	d134      	bne.n	80010de <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	691a      	ldr	r2, [r3, #16]
 8001078:	f012 0f40 	tst.w	r2, #64	; 0x40
 800107c:	d003      	beq.n	8001086 <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001084:	d132      	bne.n	80010ec <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	f012 0f20 	tst.w	r2, #32
 800108e:	d003      	beq.n	8001098 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	f012 0f20 	tst.w	r2, #32
 8001096:	d130      	bne.n	80010fa <HAL_TIM_IRQHandler+0x16c>
}
 8001098:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800109a:	f7ff ff74 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800109e:	4620      	mov	r0, r4
 80010a0:	f7ff ff73 	bl	8000f8a <HAL_TIM_PWM_PulseFinishedCallback>
 80010a4:	e78a      	b.n	8000fbc <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010a6:	4620      	mov	r0, r4
 80010a8:	f7ff ff6d 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ac:	4620      	mov	r0, r4
 80010ae:	f7ff ff6c 	bl	8000f8a <HAL_TIM_PWM_PulseFinishedCallback>
 80010b2:	e79b      	b.n	8000fec <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010b4:	4620      	mov	r0, r4
 80010b6:	f7ff ff66 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ff65 	bl	8000f8a <HAL_TIM_PWM_PulseFinishedCallback>
 80010c0:	e7ac      	b.n	800101c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010c2:	4620      	mov	r0, r4
 80010c4:	f7ff ff5f 	bl	8000f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010c8:	4620      	mov	r0, r4
 80010ca:	f7ff ff5e 	bl	8000f8a <HAL_TIM_PWM_PulseFinishedCallback>
 80010ce:	e7bd      	b.n	800104c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80010d0:	f06f 0201 	mvn.w	r2, #1
 80010d4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80010d6:	4620      	mov	r0, r4
 80010d8:	f000 fab0 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
 80010dc:	e7c1      	b.n	8001062 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80010e2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010e4:	4620      	mov	r0, r4
 80010e6:	f000 f88c 	bl	8001202 <HAL_TIMEx_BreakCallback>
 80010ea:	e7c3      	b.n	8001074 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80010f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff ff4a 	bl	8000f8c <HAL_TIM_TriggerCallback>
 80010f8:	e7c5      	b.n	8001086 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010fa:	f06f 0220 	mvn.w	r2, #32
 80010fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001100:	4620      	mov	r0, r4
 8001102:	f000 f87d 	bl	8001200 <HAL_TIMEx_CommutationCallback>
}
 8001106:	e7c7      	b.n	8001098 <HAL_TIM_IRQHandler+0x10a>

08001108 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001108:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800110a:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <TIM_Base_SetConfig+0x70>)
 800110c:	4290      	cmp	r0, r2
 800110e:	d00a      	beq.n	8001126 <TIM_Base_SetConfig+0x1e>
 8001110:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001114:	d007      	beq.n	8001126 <TIM_Base_SetConfig+0x1e>
 8001116:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800111a:	4290      	cmp	r0, r2
 800111c:	d003      	beq.n	8001126 <TIM_Base_SetConfig+0x1e>
 800111e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001122:	4290      	cmp	r0, r2
 8001124:	d103      	bne.n	800112e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800112a:	684a      	ldr	r2, [r1, #4]
 800112c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800112e:	4a12      	ldr	r2, [pc, #72]	; (8001178 <TIM_Base_SetConfig+0x70>)
 8001130:	4290      	cmp	r0, r2
 8001132:	d00a      	beq.n	800114a <TIM_Base_SetConfig+0x42>
 8001134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001138:	d007      	beq.n	800114a <TIM_Base_SetConfig+0x42>
 800113a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800113e:	4290      	cmp	r0, r2
 8001140:	d003      	beq.n	800114a <TIM_Base_SetConfig+0x42>
 8001142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001146:	4290      	cmp	r0, r2
 8001148:	d103      	bne.n	8001152 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800114a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800114e:	68ca      	ldr	r2, [r1, #12]
 8001150:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001156:	694a      	ldr	r2, [r1, #20]
 8001158:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800115a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800115c:	688b      	ldr	r3, [r1, #8]
 800115e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001160:	680b      	ldr	r3, [r1, #0]
 8001162:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <TIM_Base_SetConfig+0x70>)
 8001166:	4298      	cmp	r0, r3
 8001168:	d002      	beq.n	8001170 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800116a:	2301      	movs	r3, #1
 800116c:	6143      	str	r3, [r0, #20]
}
 800116e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001170:	690b      	ldr	r3, [r1, #16]
 8001172:	6303      	str	r3, [r0, #48]	; 0x30
 8001174:	e7f9      	b.n	800116a <TIM_Base_SetConfig+0x62>
 8001176:	bf00      	nop
 8001178:	40012c00 	.word	0x40012c00

0800117c <HAL_TIM_Base_Init>:
  if(htim == NULL)
 800117c:	b1a8      	cbz	r0, 80011aa <HAL_TIM_Base_Init+0x2e>
{
 800117e:	b510      	push	{r4, lr}
 8001180:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8001182:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001186:	b15b      	cbz	r3, 80011a0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001188:	2302      	movs	r3, #2
 800118a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800118e:	1d21      	adds	r1, r4, #4
 8001190:	6820      	ldr	r0, [r4, #0]
 8001192:	f7ff ffb9 	bl	8001108 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001196:	2301      	movs	r3, #1
 8001198:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800119c:	2000      	movs	r0, #0
}
 800119e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80011a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80011a4:	f000 fab8 	bl	8001718 <HAL_TIM_Base_MspInit>
 80011a8:	e7ee      	b.n	8001188 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80011aa:	2001      	movs	r0, #1
}
 80011ac:	4770      	bx	lr

080011ae <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80011ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d022      	beq.n	80011fc <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80011b6:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80011b8:	2201      	movs	r2, #1
 80011ba:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80011be:	2302      	movs	r3, #2
 80011c0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80011c4:	6804      	ldr	r4, [r0, #0]
 80011c6:	6863      	ldr	r3, [r4, #4]
 80011c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011cc:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80011ce:	6804      	ldr	r4, [r0, #0]
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	680d      	ldr	r5, [r1, #0]
 80011d4:	432b      	orrs	r3, r5
 80011d6:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80011d8:	6804      	ldr	r4, [r0, #0]
 80011da:	68a3      	ldr	r3, [r4, #8]
 80011dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011e0:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80011e2:	6804      	ldr	r4, [r0, #0]
 80011e4:	68a3      	ldr	r3, [r4, #8]
 80011e6:	6849      	ldr	r1, [r1, #4]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 80011ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80011f0:	2300      	movs	r3, #0
 80011f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80011f6:	4618      	mov	r0, r3
}
 80011f8:	bc30      	pop	{r4, r5}
 80011fa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80011fc:	2002      	movs	r0, #2
}
 80011fe:	4770      	bx	lr

08001200 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001200:	4770      	bx	lr

08001202 <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001202:	4770      	bx	lr

08001204 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001208:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800120a:	6802      	ldr	r2, [r0, #0]
 800120c:	6913      	ldr	r3, [r2, #16]
 800120e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001212:	68c1      	ldr	r1, [r0, #12]
 8001214:	430b      	orrs	r3, r1
 8001216:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	6902      	ldr	r2, [r0, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	6942      	ldr	r2, [r0, #20]
 8001220:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8001222:	6801      	ldr	r1, [r0, #0]
 8001224:	68ca      	ldr	r2, [r1, #12]
 8001226:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800122a:	f022 020c 	bic.w	r2, r2, #12
 800122e:	4313      	orrs	r3, r2
 8001230:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001232:	6802      	ldr	r2, [r0, #0]
 8001234:	6953      	ldr	r3, [r2, #20]
 8001236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800123a:	6981      	ldr	r1, [r0, #24]
 800123c:	430b      	orrs	r3, r1
 800123e:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001240:	6802      	ldr	r2, [r0, #0]
 8001242:	4b59      	ldr	r3, [pc, #356]	; (80013a8 <UART_SetConfig+0x1a4>)
 8001244:	429a      	cmp	r2, r3
 8001246:	d057      	beq.n	80012f8 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001248:	f7ff fc42 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 800124c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001250:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001254:	686c      	ldr	r4, [r5, #4]
 8001256:	00a4      	lsls	r4, r4, #2
 8001258:	fbb0 f4f4 	udiv	r4, r0, r4
 800125c:	4f53      	ldr	r7, [pc, #332]	; (80013ac <UART_SetConfig+0x1a8>)
 800125e:	fba7 3404 	umull	r3, r4, r7, r4
 8001262:	0964      	lsrs	r4, r4, #5
 8001264:	0126      	lsls	r6, r4, #4
 8001266:	f7ff fc33 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 800126a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800126e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001272:	686c      	ldr	r4, [r5, #4]
 8001274:	00a4      	lsls	r4, r4, #2
 8001276:	fbb0 f9f4 	udiv	r9, r0, r4
 800127a:	f7ff fc29 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 800127e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001282:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001286:	686c      	ldr	r4, [r5, #4]
 8001288:	00a4      	lsls	r4, r4, #2
 800128a:	fbb0 f4f4 	udiv	r4, r0, r4
 800128e:	fba7 3404 	umull	r3, r4, r7, r4
 8001292:	0964      	lsrs	r4, r4, #5
 8001294:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001298:	fb08 9414 	mls	r4, r8, r4, r9
 800129c:	0124      	lsls	r4, r4, #4
 800129e:	3432      	adds	r4, #50	; 0x32
 80012a0:	fba7 3404 	umull	r3, r4, r7, r4
 80012a4:	0964      	lsrs	r4, r4, #5
 80012a6:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80012aa:	4434      	add	r4, r6
 80012ac:	f7ff fc10 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 80012b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012b8:	686e      	ldr	r6, [r5, #4]
 80012ba:	00b6      	lsls	r6, r6, #2
 80012bc:	fbb0 f6f6 	udiv	r6, r0, r6
 80012c0:	f7ff fc06 	bl	8000ad0 <HAL_RCC_GetPCLK1Freq>
 80012c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012cc:	686b      	ldr	r3, [r5, #4]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80012d4:	fba7 3000 	umull	r3, r0, r7, r0
 80012d8:	0940      	lsrs	r0, r0, #5
 80012da:	fb08 6810 	mls	r8, r8, r0, r6
 80012de:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80012e2:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80012e6:	fba7 3708 	umull	r3, r7, r7, r8
 80012ea:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	4427      	add	r7, r4
 80012f2:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80012f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80012f8:	f7ff fbfa 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 80012fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001304:	686c      	ldr	r4, [r5, #4]
 8001306:	00a4      	lsls	r4, r4, #2
 8001308:	fbb0 f4f4 	udiv	r4, r0, r4
 800130c:	4f27      	ldr	r7, [pc, #156]	; (80013ac <UART_SetConfig+0x1a8>)
 800130e:	fba7 3404 	umull	r3, r4, r7, r4
 8001312:	0964      	lsrs	r4, r4, #5
 8001314:	0126      	lsls	r6, r4, #4
 8001316:	f7ff fbeb 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 800131a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800131e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001322:	686c      	ldr	r4, [r5, #4]
 8001324:	00a4      	lsls	r4, r4, #2
 8001326:	fbb0 f9f4 	udiv	r9, r0, r4
 800132a:	f7ff fbe1 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 800132e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001332:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001336:	686c      	ldr	r4, [r5, #4]
 8001338:	00a4      	lsls	r4, r4, #2
 800133a:	fbb0 f4f4 	udiv	r4, r0, r4
 800133e:	fba7 3404 	umull	r3, r4, r7, r4
 8001342:	0964      	lsrs	r4, r4, #5
 8001344:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001348:	fb08 9414 	mls	r4, r8, r4, r9
 800134c:	0124      	lsls	r4, r4, #4
 800134e:	3432      	adds	r4, #50	; 0x32
 8001350:	fba7 3404 	umull	r3, r4, r7, r4
 8001354:	0964      	lsrs	r4, r4, #5
 8001356:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800135a:	4434      	add	r4, r6
 800135c:	f7ff fbc8 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8001360:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001364:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001368:	686e      	ldr	r6, [r5, #4]
 800136a:	00b6      	lsls	r6, r6, #2
 800136c:	fbb0 f6f6 	udiv	r6, r0, r6
 8001370:	f7ff fbbe 	bl	8000af0 <HAL_RCC_GetPCLK2Freq>
 8001374:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800137c:	686b      	ldr	r3, [r5, #4]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	fbb0 f0f3 	udiv	r0, r0, r3
 8001384:	fba7 3000 	umull	r3, r0, r7, r0
 8001388:	0940      	lsrs	r0, r0, #5
 800138a:	fb08 6810 	mls	r8, r8, r0, r6
 800138e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001392:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001396:	fba7 3708 	umull	r3, r7, r7, r8
 800139a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	4427      	add	r7, r4
 80013a2:	609f      	str	r7, [r3, #8]
 80013a4:	e7a6      	b.n	80012f4 <UART_SetConfig+0xf0>
 80013a6:	bf00      	nop
 80013a8:	40013800 	.word	0x40013800
 80013ac:	51eb851f 	.word	0x51eb851f

080013b0 <HAL_UART_Init>:
  if(huart == NULL)
 80013b0:	b358      	cbz	r0, 800140a <HAL_UART_Init+0x5a>
{
 80013b2:	b510      	push	{r4, lr}
 80013b4:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80013b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013ba:	b30b      	cbz	r3, 8001400 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80013bc:	2324      	movs	r3, #36	; 0x24
 80013be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	68d3      	ldr	r3, [r2, #12]
 80013c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff19 	bl	8001204 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	6913      	ldr	r3, [r2, #16]
 80013d6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80013da:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	6953      	ldr	r3, [r2, #20]
 80013e0:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80013e4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80013e6:	6822      	ldr	r2, [r4, #0]
 80013e8:	68d3      	ldr	r3, [r2, #12]
 80013ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ee:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013f0:	2000      	movs	r0, #0
 80013f2:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80013f4:	2320      	movs	r3, #32
 80013f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80013fa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80013fe:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001400:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001404:	f000 f9a8 	bl	8001758 <HAL_UART_MspInit>
 8001408:	e7d8      	b.n	80013bc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800140a:	2001      	movs	r0, #1
}
 800140c:	4770      	bx	lr
	...

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b530      	push	{r4, r5, lr}
 8001412:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	2400      	movs	r4, #0
 8001416:	9404      	str	r4, [sp, #16]
 8001418:	9405      	str	r4, [sp, #20]
 800141a:	9406      	str	r4, [sp, #24]
 800141c:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <MX_GPIO_Init+0xa4>)
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	f042 0210 	orr.w	r2, r2, #16
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	f002 0210 	and.w	r2, r2, #16
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	f042 0220 	orr.w	r2, r2, #32
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	699a      	ldr	r2, [r3, #24]
 800143c:	f002 0220 	and.w	r2, r2, #32
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	699a      	ldr	r2, [r3, #24]
 8001446:	f042 0204 	orr.w	r2, r2, #4
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	699a      	ldr	r2, [r3, #24]
 800144e:	f002 0204 	and.w	r2, r2, #4
 8001452:	9202      	str	r2, [sp, #8]
 8001454:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001456:	699a      	ldr	r2, [r3, #24]
 8001458:	f042 0208 	orr.w	r2, r2, #8
 800145c:	619a      	str	r2, [r3, #24]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	9303      	str	r3, [sp, #12]
 8001466:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5947_BLANK_Pin|TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 8001468:	4d13      	ldr	r5, [pc, #76]	; (80014b8 <MX_GPIO_Init+0xa8>)
 800146a:	4622      	mov	r2, r4
 800146c:	210a      	movs	r1, #10
 800146e:	4628      	mov	r0, r5
 8001470:	f7ff f808 	bl	8000484 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TLC5947_BLANK_Pin TLC5947_XLAT_Pin */
  GPIO_InitStruct.Pin = TLC5947_BLANK_Pin|TLC5947_XLAT_Pin;
 8001474:	230a      	movs	r3, #10
 8001476:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2302      	movs	r3, #2
 8001480:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	a904      	add	r1, sp, #16
 8001484:	4628      	mov	r0, r5
 8001486:	f7fe ff13 	bl	80002b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Hall_sensor_Pin */
  GPIO_InitStruct.Pin = Hall_sensor_Pin;
 800148a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800148e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_GPIO_Init+0xac>)
 8001492:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(Hall_sensor_GPIO_Port, &GPIO_InitStruct);
 8001496:	a904      	add	r1, sp, #16
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <MX_GPIO_Init+0xb0>)
 800149a:	f7fe ff09 	bl	80002b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800149e:	4622      	mov	r2, r4
 80014a0:	4621      	mov	r1, r4
 80014a2:	2017      	movs	r0, #23
 80014a4:	f7fe feae 	bl	8000204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014a8:	2017      	movs	r0, #23
 80014aa:	f7fe fedf 	bl	800026c <HAL_NVIC_EnableIRQ>

}
 80014ae:	b009      	add	sp, #36	; 0x24
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010800 	.word	0x40010800
 80014bc:	10110000 	.word	0x10110000
 80014c0:	40010c00 	.word	0x40010c00

080014c4 <MX_SPI1_Init>:
{
 80014c4:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 80014c6:	480c      	ldr	r0, [pc, #48]	; (80014f8 <MX_SPI1_Init+0x34>)
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_SPI1_Init+0x38>)
 80014ca:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80014d0:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	2300      	movs	r3, #0
 80014d4:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d6:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014da:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e0:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014e2:	2218      	movs	r2, #24
 80014e4:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014e8:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ea:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014ec:	230a      	movs	r3, #10
 80014ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014f0:	f7ff fc40 	bl	8000d74 <HAL_SPI_Init>
}
 80014f4:	bd08      	pop	{r3, pc}
 80014f6:	bf00      	nop
 80014f8:	20000118 	.word	0x20000118
 80014fc:	40013000 	.word	0x40013000

08001500 <MX_USART3_UART_Init>:
{
 8001500:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001502:	4808      	ldr	r0, [pc, #32]	; (8001524 <MX_USART3_UART_Init+0x24>)
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART3_UART_Init+0x28>)
 8001506:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001508:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800150c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800150e:	2300      	movs	r3, #0
 8001510:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001512:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001514:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001516:	220c      	movs	r2, #12
 8001518:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800151e:	f7ff ff47 	bl	80013b0 <HAL_UART_Init>
}
 8001522:	bd08      	pop	{r3, pc}
 8001524:	200000d4 	.word	0x200000d4
 8001528:	40004800 	.word	0x40004800

0800152c <MX_TIM4_Init>:
{
 800152c:	b530      	push	{r4, r5, lr}
 800152e:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001530:	2400      	movs	r4, #0
 8001532:	9402      	str	r4, [sp, #8]
 8001534:	9403      	str	r4, [sp, #12]
 8001536:	9404      	str	r4, [sp, #16]
 8001538:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153a:	9400      	str	r4, [sp, #0]
 800153c:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 800153e:	4d0f      	ldr	r5, [pc, #60]	; (800157c <MX_TIM4_Init+0x50>)
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_TIM4_Init+0x54>)
 8001542:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 35999;
 8001544:	f648 439f 	movw	r3, #35999	; 0x8c9f
 8001548:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154a:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 2000;
 800154c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001550:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001558:	4628      	mov	r0, r5
 800155a:	f7ff fe0f 	bl	800117c <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001564:	a902      	add	r1, sp, #8
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff fc89 	bl	8000e7e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156e:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001570:	4669      	mov	r1, sp
 8001572:	4628      	mov	r0, r5
 8001574:	f7ff fe1b 	bl	80011ae <HAL_TIMEx_MasterConfigSynchronization>
}
 8001578:	b007      	add	sp, #28
 800157a:	bd30      	pop	{r4, r5, pc}
 800157c:	20000094 	.word	0x20000094
 8001580:	40000800 	.word	0x40000800

08001584 <SystemClock_Config>:
{
 8001584:	b530      	push	{r4, r5, lr}
 8001586:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001588:	2400      	movs	r4, #0
 800158a:	9408      	str	r4, [sp, #32]
 800158c:	9409      	str	r4, [sp, #36]	; 0x24
 800158e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001590:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001592:	9401      	str	r4, [sp, #4]
 8001594:	9402      	str	r4, [sp, #8]
 8001596:	9403      	str	r4, [sp, #12]
 8001598:	9404      	str	r4, [sp, #16]
 800159a:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800159c:	2201      	movs	r2, #1
 800159e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015a4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a6:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a8:	2502      	movs	r5, #2
 80015aa:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ac:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015b2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b4:	a806      	add	r0, sp, #24
 80015b6:	f7fe ff91 	bl	80004dc <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015be:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015ca:	4629      	mov	r1, r5
 80015cc:	a801      	add	r0, sp, #4
 80015ce:	f7ff f9ab 	bl	8000928 <HAL_RCC_ClockConfig>
}
 80015d2:	b011      	add	sp, #68	; 0x44
 80015d4:	bd30      	pop	{r4, r5, pc}
	...

080015d8 <main>:
{
 80015d8:	b508      	push	{r3, lr}
  HAL_Init();
 80015da:	f7fe fddd 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 80015de:	f7ff ffd1 	bl	8001584 <SystemClock_Config>
  MX_GPIO_Init();
 80015e2:	f7ff ff15 	bl	8001410 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015e6:	f7ff ff6d 	bl	80014c4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80015ea:	f7ff ff89 	bl	8001500 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80015ee:	f7ff ff9d 	bl	800152c <MX_TIM4_Init>
  FillArray(BLUE);//it will be red
 80015f2:	2032      	movs	r0, #50	; 0x32
 80015f4:	f000 f990 	bl	8001918 <FillArray>
  HAL_TIM_Base_Start_IT(&htim4);
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <main+0x58>)
 80015fa:	f7ff fc34 	bl	8000e66 <HAL_TIM_Base_Start_IT>
 80015fe:	e006      	b.n	800160e <main+0x36>
		  FillArray(imain);
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <main+0x5c>)
 8001602:	7818      	ldrb	r0, [r3, #0]
 8001604:	f000 f988 	bl	8001918 <FillArray>
		  TLCFlag = 0;//disable TLC Update
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <main+0x60>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	  if(TLCFlag){//enter when TIM4 interrupts
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <main+0x60>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0fb      	beq.n	800160e <main+0x36>
		  TLC_Update();//renew PWM
 8001616:	f000 f941 	bl	800189c <TLC_Update>
		  imain ++;
 800161a:	4a06      	ldr	r2, [pc, #24]	; (8001634 <main+0x5c>)
 800161c:	7813      	ldrb	r3, [r2, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	7013      	strb	r3, [r2, #0]
		  if(imain > 54 )
 8001624:	2b36      	cmp	r3, #54	; 0x36
 8001626:	d9eb      	bls.n	8001600 <main+0x28>
		  	imain = 47;
 8001628:	4613      	mov	r3, r2
 800162a:	222f      	movs	r2, #47	; 0x2f
 800162c:	701a      	strb	r2, [r3, #0]
 800162e:	e7e7      	b.n	8001600 <main+0x28>
 8001630:	20000094 	.word	0x20000094
 8001634:	20000008 	.word	0x20000008
 8001638:	20000030 	.word	0x20000030

0800163c <HAL_TIM_PeriodElapsedCallback>:

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance== TIM4)
 800163c:	6802      	ldr	r2, [r0, #0]
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001640:	429a      	cmp	r2, r3
 8001642:	d000      	beq.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xa>
		TLCFlag = 1;//enable TLC Update

}
 8001644:	4770      	bx	lr
		TLCFlag = 1;//enable TLC Update
 8001646:	4b03      	ldr	r3, [pc, #12]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	e7fa      	b.n	8001644 <HAL_TIM_PeriodElapsedCallback+0x8>
 800164e:	bf00      	nop
 8001650:	40000800 	.word	0x40000800
 8001654:	20000030 	.word	0x20000030

08001658 <TLC_Write>:
void TLC_Write(uint8_t data[])
//void TLC_Write(uint8_t *data)
{
 8001658:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&hspi1,data, SPI_BYTE_AMOUNT,1000); // envio via el sp1 de 1 todos los bytes que tenga que mandar
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	2224      	movs	r2, #36	; 0x24
 8001660:	4601      	mov	r1, r0
 8001662:	4802      	ldr	r0, [pc, #8]	; (800166c <TLC_Write+0x14>)
 8001664:	f7ff fab3 	bl	8000bce <HAL_SPI_Transmit>
//    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY); // espero a que termine la transferen
}
 8001668:	bd08      	pop	{r3, pc}
 800166a:	bf00      	nop
 800166c:	20000118 	.word	0x20000118

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_MspInit+0x3c>)
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	f002 0201 	and.w	r2, r2, #1
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	69da      	ldr	r2, [r3, #28]
 8001688:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800168c:	61da      	str	r2, [r3, #28]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001698:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_MspInit+0x40>)
 800169a:	6853      	ldr	r3, [r2, #4]
 800169c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	b002      	add	sp, #8
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000

080016b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b4:	b500      	push	{lr}
 80016b6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	9302      	str	r3, [sp, #8]
 80016bc:	9303      	str	r3, [sp, #12]
 80016be:	9304      	str	r3, [sp, #16]
 80016c0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80016c2:	6802      	ldr	r2, [r0, #0]
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_SPI_MspInit+0x5c>)
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d002      	beq.n	80016d0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016ca:	b007      	add	sp, #28
 80016cc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016da:	619a      	str	r2, [r3, #24]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016e2:	9200      	str	r2, [sp, #0]
 80016e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	699a      	ldr	r2, [r3, #24]
 80016e8:	f042 0204 	orr.w	r2, r2, #4
 80016ec:	619a      	str	r2, [r3, #24]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80016f8:	23a0      	movs	r3, #160	; 0xa0
 80016fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001704:	a902      	add	r1, sp, #8
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <HAL_SPI_MspInit+0x60>)
 8001708:	f7fe fdd2 	bl	80002b0 <HAL_GPIO_Init>
}
 800170c:	e7dd      	b.n	80016ca <HAL_SPI_MspInit+0x16>
 800170e:	bf00      	nop
 8001710:	40013000 	.word	0x40013000
 8001714:	40010800 	.word	0x40010800

08001718 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001718:	6802      	ldr	r2, [r0, #0]
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <HAL_TIM_Base_MspInit+0x3c>)
 800171c:	429a      	cmp	r2, r3
 800171e:	d000      	beq.n	8001722 <HAL_TIM_Base_MspInit+0xa>
 8001720:	4770      	bx	lr
{
 8001722:	b500      	push	{lr}
 8001724:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001726:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	f042 0204 	orr.w	r2, r2, #4
 8001730:	61da      	str	r2, [r3, #28]
 8001732:	69db      	ldr	r3, [r3, #28]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	4611      	mov	r1, r2
 8001740:	201e      	movs	r0, #30
 8001742:	f7fe fd5f 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001746:	201e      	movs	r0, #30
 8001748:	f7fe fd90 	bl	800026c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800174c:	b003      	add	sp, #12
 800174e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001752:	bf00      	nop
 8001754:	40000800 	.word	0x40000800

08001758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001758:	b510      	push	{r4, lr}
 800175a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	2300      	movs	r3, #0
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	9303      	str	r3, [sp, #12]
 8001762:	9304      	str	r3, [sp, #16]
 8001764:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8001766:	6802      	ldr	r2, [r0, #0]
 8001768:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <HAL_UART_MspInit+0x70>)
 800176a:	429a      	cmp	r2, r3
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800176e:	b006      	add	sp, #24
 8001770:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001772:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800177c:	61da      	str	r2, [r3, #28]
 800177e:	69da      	ldr	r2, [r3, #28]
 8001780:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	f042 0208 	orr.w	r2, r2, #8
 800178e:	619a      	str	r2, [r3, #24]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800179a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	4c08      	ldr	r4, [pc, #32]	; (80017cc <HAL_UART_MspInit+0x74>)
 80017aa:	a902      	add	r1, sp, #8
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7fe fd7f 	bl	80002b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017b6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	a902      	add	r1, sp, #8
 80017c0:	4620      	mov	r0, r4
 80017c2:	f7fe fd75 	bl	80002b0 <HAL_GPIO_Init>
}
 80017c6:	e7d2      	b.n	800176e <HAL_UART_MspInit+0x16>
 80017c8:	40004800 	.word	0x40004800
 80017cc:	40010c00 	.word	0x40010c00

080017d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d0:	4770      	bx	lr

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler>

080017da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f7fe fceb 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bd08      	pop	{r3, pc}

080017e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80017ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017ee:	f7fe fe51 	bl	8000494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f2:	bd08      	pop	{r3, pc}

080017f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017f6:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM4_IRQHandler+0xc>)
 80017f8:	f7ff fbc9 	bl	8000f8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017fc:	bd08      	pop	{r3, pc}
 80017fe:	bf00      	nop
 8001800:	20000094 	.word	0x20000094

08001804 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <SystemInit+0x40>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800180e:	6859      	ldr	r1, [r3, #4]
 8001810:	4a0d      	ldr	r2, [pc, #52]	; (8001848 <SystemInit+0x44>)
 8001812:	400a      	ands	r2, r1
 8001814:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800181c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001820:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001828:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001830:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001832:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001836:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <SystemInit+0x48>)
 800183a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40021000 	.word	0x40021000
 8001848:	f8ff0000 	.word	0xf8ff0000
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001850:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001856:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001858:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800185c:	480a      	ldr	r0, [pc, #40]	; (8001888 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001860:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001862:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001872:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001876:	f7ff ffc5 	bl	8001804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800187a:	f000 f89f 	bl	80019bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800187e:	f7ff feab 	bl	80015d8 <main>
  bx lr
 8001882:	4770      	bx	lr
  ldr r3, =_sidata
 8001884:	08001a50 	.word	0x08001a50
  ldr r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800188c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8001890:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8001894:	20000170 	.word	0x20000170

08001898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC1_2_IRQHandler>
	...

0800189c <TLC_Update>:

uint16_t leds[24] = {}; // todo en 0, le pongo valores con FillArray
uint8_t spi_send[SPI_BYTE_AMOUNT]={};

void TLC_Update(void)
{
 800189c:	b570      	push	{r4, r5, r6, lr}
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI

    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2102      	movs	r1, #2
 80018a2:	481a      	ldr	r0, [pc, #104]	; (800190c <TLC_Update+0x70>)
 80018a4:	f7fe fdee 	bl	8000484 <HAL_GPIO_WritePin>

    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 80018a8:	2200      	movs	r2, #0
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI
 80018aa:	4611      	mov	r1, r2
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 80018ac:	e017      	b.n	80018de <TLC_Update+0x42>
    {
        uint8_t send1 = 0;
        uint8_t send = leds[i] >> 4; // mando MSB
 80018ae:	4d18      	ldr	r5, [pc, #96]	; (8001910 <TLC_Update+0x74>)
 80018b0:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 80018b4:	f3c3 1407 	ubfx	r4, r3, #4, #8

        spi_send[si]=send;//
 80018b8:	4816      	ldr	r0, [pc, #88]	; (8001914 <TLC_Update+0x78>)
 80018ba:	5444      	strb	r4, [r0, r1]
        si++;
 80018bc:	1c4c      	adds	r4, r1, #1
 80018be:	b2e4      	uxtb	r4, r4

        send = (leds[i] & 0x000F);
 80018c0:	b2db      	uxtb	r3, r3
        send <<= 4;
        send1 = (leds[i+1]) >> 8;
 80018c2:	1c56      	adds	r6, r2, #1
 80018c4:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
        send |= send1; //me quedo con 4 bits menos significativos del canal i y 4 bits más significativos del canal i-1
 80018c8:	011b      	lsls	r3, r3, #4
 80018ca:	ea43 2315 	orr.w	r3, r3, r5, lsr #8

        spi_send[si]=send;//
 80018ce:	5503      	strb	r3, [r0, r4]
        si++;
 80018d0:	1c8b      	adds	r3, r1, #2
 80018d2:	b2db      	uxtb	r3, r3


        send = leds[i+1];//borro 4 bits más significativos del canal i-1 y mando LSB del canal i-1

        spi_send[si]=send;//
 80018d4:	54c5      	strb	r5, [r0, r3]
        si++;
 80018d6:	3103      	adds	r1, #3
 80018d8:	b2c9      	uxtb	r1, r1
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 80018da:	3202      	adds	r2, #2
 80018dc:	b252      	sxtb	r2, r2
 80018de:	2a17      	cmp	r2, #23
 80018e0:	dde5      	ble.n	80018ae <TLC_Update+0x12>

    }

    TLC_Write(spi_send);
 80018e2:	480c      	ldr	r0, [pc, #48]	; (8001914 <TLC_Update+0x78>)
 80018e4:	f7ff feb8 	bl	8001658 <TLC_Write>

    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_SET);
 80018e8:	4c08      	ldr	r4, [pc, #32]	; (800190c <TLC_Update+0x70>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	2108      	movs	r1, #8
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7fe fdc8 	bl	8000484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2108      	movs	r1, #8
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7fe fdc3 	bl	8000484 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_RESET);
 80018fe:	2200      	movs	r2, #0
 8001900:	2102      	movs	r1, #2
 8001902:	4620      	mov	r0, r4
 8001904:	f7fe fdbe 	bl	8000484 <HAL_GPIO_WritePin>

}
 8001908:	bd70      	pop	{r4, r5, r6, pc}
 800190a:	bf00      	nop
 800190c:	40010800 	.word	0x40010800
 8001910:	20000034 	.word	0x20000034
 8001914:	20000068 	.word	0x20000068

08001918 <FillArray>:
void FillArray(uint8_t colorIntensity)
{
	static uint8_t position = 0, increment = 3,array_index = 0;
	static uint16_t intensity = 4095;

	  if(colorIntensity == 48)
 8001918:	2830      	cmp	r0, #48	; 0x30
 800191a:	d011      	beq.n	8001940 <FillArray+0x28>
		  //0
		  position = 0;//RED

	  if(colorIntensity == 49)
 800191c:	2831      	cmp	r0, #49	; 0x31
 800191e:	d013      	beq.n	8001948 <FillArray+0x30>
		  //1
		  position = 1;//GREEN

	  if(colorIntensity == 50)
 8001920:	2832      	cmp	r0, #50	; 0x32
 8001922:	d015      	beq.n	8001950 <FillArray+0x38>
		  //2
		  position = 2;//BLUE

	  if(colorIntensity == 52)
 8001924:	2834      	cmp	r0, #52	; 0x34
 8001926:	d017      	beq.n	8001958 <FillArray+0x40>
		  //HIGH - 4
		  intensity = 4095;

	  if(colorIntensity == 53)
 8001928:	2835      	cmp	r0, #53	; 0x35
 800192a:	d01a      	beq.n	8001962 <FillArray+0x4a>
		  //MID - 5
		  intensity = 1024;

	  if(colorIntensity == 54)
 800192c:	2836      	cmp	r0, #54	; 0x36
 800192e:	d01d      	beq.n	800196c <FillArray+0x54>
		  //LOW - 6
		  intensity = 32;

if(position >-1 && position<3)
 8001930:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <FillArray+0x94>)
 8001932:	7818      	ldrb	r0, [r3, #0]
 8001934:	2802      	cmp	r0, #2
 8001936:	d828      	bhi.n	800198a <FillArray+0x72>
{

	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 8001938:	4b1d      	ldr	r3, [pc, #116]	; (80019b0 <FillArray+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	e020      	b.n	8001982 <FillArray+0x6a>
		  position = 0;//RED
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <FillArray+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	e7e9      	b.n	800191c <FillArray+0x4>
		  position = 1;//GREEN
 8001948:	4b18      	ldr	r3, [pc, #96]	; (80019ac <FillArray+0x94>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e7e7      	b.n	8001920 <FillArray+0x8>
		  position = 2;//BLUE
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <FillArray+0x94>)
 8001952:	2202      	movs	r2, #2
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e7e5      	b.n	8001924 <FillArray+0xc>
		  intensity = 4095;
 8001958:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <FillArray+0x9c>)
 800195a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800195e:	801a      	strh	r2, [r3, #0]
 8001960:	e7e2      	b.n	8001928 <FillArray+0x10>
		  intensity = 1024;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <FillArray+0x9c>)
 8001964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e7df      	b.n	800192c <FillArray+0x14>
		  intensity = 32;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <FillArray+0x9c>)
 800196e:	2220      	movs	r2, #32
 8001970:	801a      	strh	r2, [r3, #0]
 8001972:	e7dd      	b.n	8001930 <FillArray+0x18>
		leds[array_index] = 0;//all previous values are erased
 8001974:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <FillArray+0xa0>)
 8001976:	2100      	movs	r1, #0
 8001978:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 800197c:	3301      	adds	r3, #1
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <FillArray+0x98>)
 8001980:	7013      	strb	r3, [r2, #0]
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <FillArray+0x98>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b17      	cmp	r3, #23
 8001988:	d9f4      	bls.n	8001974 <FillArray+0x5c>
}




	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <FillArray+0x98>)
 800198c:	7018      	strb	r0, [r3, #0]
 800198e:	e007      	b.n	80019a0 <FillArray+0x88>
		leds[array_index] = intensity;
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <FillArray+0x9c>)
 8001992:	8811      	ldrh	r1, [r2, #0]
 8001994:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <FillArray+0xa0>)
 8001996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 800199a:	3303      	adds	r3, #3
 800199c:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <FillArray+0x98>)
 800199e:	7013      	strb	r3, [r2, #0]
 80019a0:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <FillArray+0x98>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b17      	cmp	r3, #23
 80019a6:	d9f3      	bls.n	8001990 <FillArray+0x78>

}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000064 	.word	0x20000064
 80019b0:	20000031 	.word	0x20000031
 80019b4:	20000010 	.word	0x20000010
 80019b8:	20000034 	.word	0x20000034

080019bc <__libc_init_array>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	2500      	movs	r5, #0
 80019c0:	4e0c      	ldr	r6, [pc, #48]	; (80019f4 <__libc_init_array+0x38>)
 80019c2:	4c0d      	ldr	r4, [pc, #52]	; (80019f8 <__libc_init_array+0x3c>)
 80019c4:	1ba4      	subs	r4, r4, r6
 80019c6:	10a4      	asrs	r4, r4, #2
 80019c8:	42a5      	cmp	r5, r4
 80019ca:	d109      	bne.n	80019e0 <__libc_init_array+0x24>
 80019cc:	f000 f81a 	bl	8001a04 <_init>
 80019d0:	2500      	movs	r5, #0
 80019d2:	4e0a      	ldr	r6, [pc, #40]	; (80019fc <__libc_init_array+0x40>)
 80019d4:	4c0a      	ldr	r4, [pc, #40]	; (8001a00 <__libc_init_array+0x44>)
 80019d6:	1ba4      	subs	r4, r4, r6
 80019d8:	10a4      	asrs	r4, r4, #2
 80019da:	42a5      	cmp	r5, r4
 80019dc:	d105      	bne.n	80019ea <__libc_init_array+0x2e>
 80019de:	bd70      	pop	{r4, r5, r6, pc}
 80019e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e4:	4798      	blx	r3
 80019e6:	3501      	adds	r5, #1
 80019e8:	e7ee      	b.n	80019c8 <__libc_init_array+0xc>
 80019ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019ee:	4798      	blx	r3
 80019f0:	3501      	adds	r5, #1
 80019f2:	e7f2      	b.n	80019da <__libc_init_array+0x1e>
 80019f4:	08001a48 	.word	0x08001a48
 80019f8:	08001a48 	.word	0x08001a48
 80019fc:	08001a48 	.word	0x08001a48
 8001a00:	08001a4c 	.word	0x08001a4c

08001a04 <_init>:
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	bf00      	nop
 8001a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	469e      	mov	lr, r3
 8001a0e:	4770      	bx	lr

08001a10 <_fini>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr
