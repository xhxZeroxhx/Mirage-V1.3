
Mirage-V1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000191c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a5c  08001a5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001a5c  08001a5c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a5c  08001a5c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a5c  08001a5c  00011a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08001a74  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001a74  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f686  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000020ab  00000000  00000000  0002f6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000049f2  00000000  00000000  0003176a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000800  00000000  00000000  00036160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007c0  00000000  00000000  00036960  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001512f  00000000  00000000  00037120  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000087a9  00000000  00000000  0004c24f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0006c999  00000000  00000000  000549f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000c1391  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000013c0  00000000  00000000  000c140c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a10 	.word	0x08001a10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001a10 	.word	0x08001a10

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f8a2 	bl	80002ac <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f857 	bl	800022c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f82f 	bl	8000208 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 fa76 	bl	80016a0 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000088 	.word	0x20000088

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001e0:	b538      	push	{r3, r4, r5, lr}
 80001e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e4:	f7ff fff6 	bl	80001d4 <HAL_GetTick>
 80001e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001ea:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ee:	d002      	beq.n	80001f6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <HAL_Delay+0x24>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f6:	f7ff ffed 	bl	80001d4 <HAL_GetTick>
 80001fa:	1b40      	subs	r0, r0, r5
 80001fc:	42a0      	cmp	r0, r4
 80001fe:	d3fa      	bcc.n	80001f6 <HAL_Delay+0x16>
  {
  }
}
 8000200:	bd38      	pop	{r3, r4, r5, pc}
 8000202:	bf00      	nop
 8000204:	20000000 	.word	0x20000000

08000208 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800020a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000210:	041b      	lsls	r3, r3, #16
 8000212:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000214:	0200      	lsls	r0, r0, #8
 8000216:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800021a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800021c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000220:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000224:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800022c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800022e:	4b17      	ldr	r3, [pc, #92]	; (800028c <HAL_NVIC_SetPriority+0x60>)
 8000230:	68db      	ldr	r3, [r3, #12]
 8000232:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000236:	f1c3 0407 	rsb	r4, r3, #7
 800023a:	2c04      	cmp	r4, #4
 800023c:	bf28      	it	cs
 800023e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	1d1d      	adds	r5, r3, #4
 8000242:	2d06      	cmp	r5, #6
 8000244:	d918      	bls.n	8000278 <HAL_NVIC_SetPriority+0x4c>
 8000246:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000248:	f04f 35ff 	mov.w	r5, #4294967295
 800024c:	fa05 f404 	lsl.w	r4, r5, r4
 8000250:	ea21 0104 	bic.w	r1, r1, r4
 8000254:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000256:	fa05 f303 	lsl.w	r3, r5, r3
 800025a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000260:	2800      	cmp	r0, #0
 8000262:	db0b      	blt.n	800027c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000264:	0109      	lsls	r1, r1, #4
 8000266:	b2c9      	uxtb	r1, r1
 8000268:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800026c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000270:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000278:	2300      	movs	r3, #0
 800027a:	e7e5      	b.n	8000248 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	f000 000f 	and.w	r0, r0, #15
 8000280:	0109      	lsls	r1, r1, #4
 8000282:	b2c9      	uxtb	r1, r1
 8000284:	4b02      	ldr	r3, [pc, #8]	; (8000290 <HAL_NVIC_SetPriority+0x64>)
 8000286:	5419      	strb	r1, [r3, r0]
 8000288:	e7f4      	b.n	8000274 <HAL_NVIC_SetPriority+0x48>
 800028a:	bf00      	nop
 800028c:	e000ed00 	.word	0xe000ed00
 8000290:	e000ed14 	.word	0xe000ed14

08000294 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000294:	f000 021f 	and.w	r2, r0, #31
 8000298:	0940      	lsrs	r0, r0, #5
 800029a:	2301      	movs	r3, #1
 800029c:	4093      	lsls	r3, r2
 800029e:	4a02      	ldr	r2, [pc, #8]	; (80002a8 <HAL_NVIC_EnableIRQ+0x14>)
 80002a0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ac:	3801      	subs	r0, #1
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d20a      	bcs.n	80002ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <HAL_SYSTICK_Config+0x24>)
 80002b6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002b8:	4a06      	ldr	r2, [pc, #24]	; (80002d4 <HAL_SYSTICK_Config+0x28>)
 80002ba:	21f0      	movs	r1, #240	; 0xf0
 80002bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	2000      	movs	r0, #0
 80002c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c4:	2207      	movs	r2, #7
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	e000e010 	.word	0xe000e010
 80002d4:	e000ed00 	.word	0xe000ed00

080002d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80002d8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002da:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80002de:	2b02      	cmp	r3, #2
 80002e0:	d003      	beq.n	80002ea <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002e2:	2304      	movs	r3, #4
 80002e4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002e6:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80002e8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ea:	6802      	ldr	r2, [r0, #0]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	f023 030e 	bic.w	r3, r3, #14
 80002f2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80002f4:	6802      	ldr	r2, [r0, #0]
 80002f6:	6813      	ldr	r3, [r2, #0]
 80002f8:	f023 0301 	bic.w	r3, r3, #1
 80002fc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002fe:	6803      	ldr	r3, [r0, #0]
 8000300:	4a19      	ldr	r2, [pc, #100]	; (8000368 <HAL_DMA_Abort_IT+0x90>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d014      	beq.n	8000330 <HAL_DMA_Abort_IT+0x58>
 8000306:	3214      	adds	r2, #20
 8000308:	4293      	cmp	r3, r2
 800030a:	d01f      	beq.n	800034c <HAL_DMA_Abort_IT+0x74>
 800030c:	3214      	adds	r2, #20
 800030e:	4293      	cmp	r3, r2
 8000310:	d01e      	beq.n	8000350 <HAL_DMA_Abort_IT+0x78>
 8000312:	3214      	adds	r2, #20
 8000314:	4293      	cmp	r3, r2
 8000316:	d01e      	beq.n	8000356 <HAL_DMA_Abort_IT+0x7e>
 8000318:	3214      	adds	r2, #20
 800031a:	4293      	cmp	r3, r2
 800031c:	d01e      	beq.n	800035c <HAL_DMA_Abort_IT+0x84>
 800031e:	3214      	adds	r2, #20
 8000320:	4293      	cmp	r3, r2
 8000322:	d002      	beq.n	800032a <HAL_DMA_Abort_IT+0x52>
 8000324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000328:	e003      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 800032a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800032e:	e000      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000330:	2201      	movs	r2, #1
 8000332:	4b0e      	ldr	r3, [pc, #56]	; (800036c <HAL_DMA_Abort_IT+0x94>)
 8000334:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000336:	2301      	movs	r3, #1
 8000338:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800033c:	2300      	movs	r3, #0
 800033e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000342:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000344:	b16b      	cbz	r3, 8000362 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8000346:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000348:	2000      	movs	r0, #0
 800034a:	e7cd      	b.n	80002e8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800034c:	2210      	movs	r2, #16
 800034e:	e7f0      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000354:	e7ed      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 8000356:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800035a:	e7ea      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
 800035c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000360:	e7e7      	b.n	8000332 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8000362:	2000      	movs	r0, #0
 8000364:	e7c0      	b.n	80002e8 <HAL_DMA_Abort_IT+0x10>
 8000366:	bf00      	nop
 8000368:	40020008 	.word	0x40020008
 800036c:	40020000 	.word	0x40020000

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	b4f0      	push	{r4, r5, r6, r7}
 8000372:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000374:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000376:	4635      	mov	r5, r6
 8000378:	e0a1      	b.n	80004be <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800037a:	2c00      	cmp	r4, #0
 800037c:	d059      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 800037e:	2c01      	cmp	r4, #1
 8000380:	d100      	bne.n	8000384 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000382:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000384:	2bff      	cmp	r3, #255	; 0xff
 8000386:	d868      	bhi.n	800045a <HAL_GPIO_Init+0xea>
 8000388:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800038a:	2bff      	cmp	r3, #255	; 0xff
 800038c:	d868      	bhi.n	8000460 <HAL_GPIO_Init+0xf0>
 800038e:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000390:	f8dc 2000 	ldr.w	r2, [ip]
 8000394:	270f      	movs	r7, #15
 8000396:	40a7      	lsls	r7, r4
 8000398:	ea22 0207 	bic.w	r2, r2, r7
 800039c:	fa06 f404 	lsl.w	r4, r6, r4
 80003a0:	4322      	orrs	r2, r4
 80003a2:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003a6:	684a      	ldr	r2, [r1, #4]
 80003a8:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80003ac:	f000 8086 	beq.w	80004bc <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003b0:	4a5e      	ldr	r2, [pc, #376]	; (800052c <HAL_GPIO_Init+0x1bc>)
 80003b2:	6994      	ldr	r4, [r2, #24]
 80003b4:	f044 0401 	orr.w	r4, r4, #1
 80003b8:	6194      	str	r4, [r2, #24]
 80003ba:	6992      	ldr	r2, [r2, #24]
 80003bc:	f002 0201 	and.w	r2, r2, #1
 80003c0:	9201      	str	r2, [sp, #4]
 80003c2:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 80003c4:	08ac      	lsrs	r4, r5, #2
 80003c6:	1ca7      	adds	r7, r4, #2
 80003c8:	4a59      	ldr	r2, [pc, #356]	; (8000530 <HAL_GPIO_Init+0x1c0>)
 80003ca:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003ce:	f005 0703 	and.w	r7, r5, #3
 80003d2:	00bf      	lsls	r7, r7, #2
 80003d4:	f04f 0c0f 	mov.w	ip, #15
 80003d8:	fa0c fc07 	lsl.w	ip, ip, r7
 80003dc:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003e0:	4a54      	ldr	r2, [pc, #336]	; (8000534 <HAL_GPIO_Init+0x1c4>)
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d042      	beq.n	800046c <HAL_GPIO_Init+0xfc>
 80003e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003ea:	4290      	cmp	r0, r2
 80003ec:	d07f      	beq.n	80004ee <HAL_GPIO_Init+0x17e>
 80003ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003f2:	4290      	cmp	r0, r2
 80003f4:	d07d      	beq.n	80004f2 <HAL_GPIO_Init+0x182>
 80003f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003fa:	4290      	cmp	r0, r2
 80003fc:	d034      	beq.n	8000468 <HAL_GPIO_Init+0xf8>
 80003fe:	2204      	movs	r2, #4
 8000400:	e035      	b.n	800046e <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 8000402:	4f4d      	ldr	r7, [pc, #308]	; (8000538 <HAL_GPIO_Init+0x1c8>)
 8000404:	42bc      	cmp	r4, r7
 8000406:	d014      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000408:	d90b      	bls.n	8000422 <HAL_GPIO_Init+0xb2>
 800040a:	4f4c      	ldr	r7, [pc, #304]	; (800053c <HAL_GPIO_Init+0x1cc>)
 800040c:	42bc      	cmp	r4, r7
 800040e:	d010      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000410:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000414:	42bc      	cmp	r4, r7
 8000416:	d00c      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 8000418:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 800041c:	42bc      	cmp	r4, r7
 800041e:	d1b1      	bne.n	8000384 <HAL_GPIO_Init+0x14>
 8000420:	e007      	b.n	8000432 <HAL_GPIO_Init+0xc2>
 8000422:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 8000426:	42bc      	cmp	r4, r7
 8000428:	d003      	beq.n	8000432 <HAL_GPIO_Init+0xc2>
 800042a:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800042e:	42bc      	cmp	r4, r7
 8000430:	d1a8      	bne.n	8000384 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000432:	688c      	ldr	r4, [r1, #8]
 8000434:	b17c      	cbz	r4, 8000456 <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000436:	2c01      	cmp	r4, #1
 8000438:	d008      	beq.n	800044c <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 800043a:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800043c:	2608      	movs	r6, #8
 800043e:	e7a1      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000440:	68ce      	ldr	r6, [r1, #12]
 8000442:	3608      	adds	r6, #8
          break;
 8000444:	e79e      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000446:	68ce      	ldr	r6, [r1, #12]
 8000448:	360c      	adds	r6, #12
          break;
 800044a:	e79b      	b.n	8000384 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 800044c:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800044e:	2608      	movs	r6, #8
 8000450:	e798      	b.n	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000452:	2600      	movs	r6, #0
 8000454:	e796      	b.n	8000384 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000456:	2604      	movs	r6, #4
 8000458:	e794      	b.n	8000384 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800045a:	f100 0c04 	add.w	ip, r0, #4
 800045e:	e794      	b.n	800038a <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000460:	f1a5 0408 	sub.w	r4, r5, #8
 8000464:	00a4      	lsls	r4, r4, #2
 8000466:	e793      	b.n	8000390 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000468:	2203      	movs	r2, #3
 800046a:	e000      	b.n	800046e <HAL_GPIO_Init+0xfe>
 800046c:	2200      	movs	r2, #0
 800046e:	40ba      	lsls	r2, r7
 8000470:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 8000474:	3402      	adds	r4, #2
 8000476:	4f2e      	ldr	r7, [pc, #184]	; (8000530 <HAL_GPIO_Init+0x1c0>)
 8000478:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800047c:	684a      	ldr	r2, [r1, #4]
 800047e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8000482:	d038      	beq.n	80004f6 <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000484:	4c2e      	ldr	r4, [pc, #184]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000486:	6822      	ldr	r2, [r4, #0]
 8000488:	431a      	orrs	r2, r3
 800048a:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800048c:	684a      	ldr	r2, [r1, #4]
 800048e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000492:	d036      	beq.n	8000502 <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000494:	4c2a      	ldr	r4, [pc, #168]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000496:	6862      	ldr	r2, [r4, #4]
 8000498:	431a      	orrs	r2, r3
 800049a:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800049c:	684a      	ldr	r2, [r1, #4]
 800049e:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80004a2:	d034      	beq.n	800050e <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80004a4:	4c26      	ldr	r4, [pc, #152]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004a6:	68a2      	ldr	r2, [r4, #8]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004ac:	684a      	ldr	r2, [r1, #4]
 80004ae:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80004b2:	d032      	beq.n	800051a <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80004b4:	4c22      	ldr	r4, [pc, #136]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004b6:	68e2      	ldr	r2, [r4, #12]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80004bc:	3501      	adds	r5, #1
 80004be:	2d0f      	cmp	r5, #15
 80004c0:	d831      	bhi.n	8000526 <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 80004c2:	2201      	movs	r2, #1
 80004c4:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80004c6:	680b      	ldr	r3, [r1, #0]
 80004c8:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d1f6      	bne.n	80004bc <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80004ce:	684c      	ldr	r4, [r1, #4]
 80004d0:	2c12      	cmp	r4, #18
 80004d2:	d0b8      	beq.n	8000446 <HAL_GPIO_Init+0xd6>
 80004d4:	d895      	bhi.n	8000402 <HAL_GPIO_Init+0x92>
 80004d6:	2c02      	cmp	r4, #2
 80004d8:	d0b2      	beq.n	8000440 <HAL_GPIO_Init+0xd0>
 80004da:	f67f af4e 	bls.w	800037a <HAL_GPIO_Init+0xa>
 80004de:	2c03      	cmp	r4, #3
 80004e0:	d0b7      	beq.n	8000452 <HAL_GPIO_Init+0xe2>
 80004e2:	2c11      	cmp	r4, #17
 80004e4:	f47f af4e 	bne.w	8000384 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004e8:	68ce      	ldr	r6, [r1, #12]
 80004ea:	3604      	adds	r6, #4
          break;
 80004ec:	e74a      	b.n	8000384 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ee:	2201      	movs	r2, #1
 80004f0:	e7bd      	b.n	800046e <HAL_GPIO_Init+0xfe>
 80004f2:	2202      	movs	r2, #2
 80004f4:	e7bb      	b.n	800046e <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004f6:	4c12      	ldr	r4, [pc, #72]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 80004f8:	6822      	ldr	r2, [r4, #0]
 80004fa:	ea22 0203 	bic.w	r2, r2, r3
 80004fe:	6022      	str	r2, [r4, #0]
 8000500:	e7c4      	b.n	800048c <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000502:	4c0f      	ldr	r4, [pc, #60]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000504:	6862      	ldr	r2, [r4, #4]
 8000506:	ea22 0203 	bic.w	r2, r2, r3
 800050a:	6062      	str	r2, [r4, #4]
 800050c:	e7c6      	b.n	800049c <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 8000510:	68a2      	ldr	r2, [r4, #8]
 8000512:	ea22 0203 	bic.w	r2, r2, r3
 8000516:	60a2      	str	r2, [r4, #8]
 8000518:	e7c8      	b.n	80004ac <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800051a:	4c09      	ldr	r4, [pc, #36]	; (8000540 <HAL_GPIO_Init+0x1d0>)
 800051c:	68e2      	ldr	r2, [r4, #12]
 800051e:	ea22 0303 	bic.w	r3, r2, r3
 8000522:	60e3      	str	r3, [r4, #12]
 8000524:	e7ca      	b.n	80004bc <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 8000526:	b002      	add	sp, #8
 8000528:	bcf0      	pop	{r4, r5, r6, r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	40010000 	.word	0x40010000
 8000534:	40010800 	.word	0x40010800
 8000538:	10210000 	.word	0x10210000
 800053c:	10310000 	.word	0x10310000
 8000540:	40010400 	.word	0x40010400

08000544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000544:	b912      	cbnz	r2, 800054c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	6101      	str	r1, [r0, #16]
  }
}
 800054a:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 800054c:	6101      	str	r1, [r0, #16]
 800054e:	4770      	bx	lr

08000550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000550:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <RCC_Delay+0x24>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a08      	ldr	r2, [pc, #32]	; (8000578 <RCC_Delay+0x28>)
 8000558:	fba2 2303 	umull	r2, r3, r2, r3
 800055c:	0a5b      	lsrs	r3, r3, #9
 800055e:	fb00 f003 	mul.w	r0, r0, r3
 8000562:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000564:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000566:	9b01      	ldr	r3, [sp, #4]
 8000568:	1e5a      	subs	r2, r3, #1
 800056a:	9201      	str	r2, [sp, #4]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1f9      	bne.n	8000564 <RCC_Delay+0x14>
}
 8000570:	b002      	add	sp, #8
 8000572:	4770      	bx	lr
 8000574:	20000008 	.word	0x20000008
 8000578:	10624dd3 	.word	0x10624dd3

0800057c <HAL_RCC_OscConfig>:
{
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000582:	6803      	ldr	r3, [r0, #0]
 8000584:	f013 0f01 	tst.w	r3, #1
 8000588:	d02c      	beq.n	80005e4 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800058a:	4bab      	ldr	r3, [pc, #684]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	f003 030c 	and.w	r3, r3, #12
 8000592:	2b04      	cmp	r3, #4
 8000594:	d01d      	beq.n	80005d2 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000596:	4ba8      	ldr	r3, [pc, #672]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	f003 030c 	and.w	r3, r3, #12
 800059e:	2b08      	cmp	r3, #8
 80005a0:	d012      	beq.n	80005c8 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a2:	6863      	ldr	r3, [r4, #4]
 80005a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005a8:	d041      	beq.n	800062e <HAL_RCC_OscConfig+0xb2>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d155      	bne.n	800065a <HAL_RCC_OscConfig+0xde>
 80005ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80005b2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	e037      	b.n	8000638 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005c8:	4b9b      	ldr	r3, [pc, #620]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005d0:	d0e7      	beq.n	80005a2 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005d2:	4b99      	ldr	r3, [pc, #612]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005da:	d003      	beq.n	80005e4 <HAL_RCC_OscConfig+0x68>
 80005dc:	6863      	ldr	r3, [r4, #4]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	f000 81ae 	beq.w	8000940 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	f013 0f02 	tst.w	r3, #2
 80005ea:	d076      	beq.n	80006da <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005ec:	4b92      	ldr	r3, [pc, #584]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f013 0f0c 	tst.w	r3, #12
 80005f4:	d05f      	beq.n	80006b6 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005f6:	4b90      	ldr	r3, [pc, #576]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	f003 030c 	and.w	r3, r3, #12
 80005fe:	2b08      	cmp	r3, #8
 8000600:	d054      	beq.n	80006ac <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000602:	6923      	ldr	r3, [r4, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 808a 	beq.w	800071e <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 800060a:	4b8c      	ldr	r3, [pc, #560]	; (800083c <HAL_RCC_OscConfig+0x2c0>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000610:	f7ff fde0 	bl	80001d4 <HAL_GetTick>
 8000614:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000616:	4b88      	ldr	r3, [pc, #544]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f013 0f02 	tst.w	r3, #2
 800061e:	d175      	bne.n	800070c <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000620:	f7ff fdd8 	bl	80001d4 <HAL_GetTick>
 8000624:	1b40      	subs	r0, r0, r5
 8000626:	2802      	cmp	r0, #2
 8000628:	d9f5      	bls.n	8000616 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 800062a:	2003      	movs	r0, #3
 800062c:	e18b      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800062e:	4a82      	ldr	r2, [pc, #520]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000630:	6813      	ldr	r3, [r2, #0]
 8000632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000636:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000638:	6863      	ldr	r3, [r4, #4]
 800063a:	b343      	cbz	r3, 800068e <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 800063c:	f7ff fdca 	bl	80001d4 <HAL_GetTick>
 8000640:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000642:	4b7d      	ldr	r3, [pc, #500]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800064a:	d1cb      	bne.n	80005e4 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800064c:	f7ff fdc2 	bl	80001d4 <HAL_GetTick>
 8000650:	1b40      	subs	r0, r0, r5
 8000652:	2864      	cmp	r0, #100	; 0x64
 8000654:	d9f5      	bls.n	8000642 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000656:	2003      	movs	r0, #3
 8000658:	e175      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800065a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800065e:	d009      	beq.n	8000674 <HAL_RCC_OscConfig+0xf8>
 8000660:	4b75      	ldr	r3, [pc, #468]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	e7e1      	b.n	8000638 <HAL_RCC_OscConfig+0xbc>
 8000674:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000678:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e7d4      	b.n	8000638 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 800068e:	f7ff fda1 	bl	80001d4 <HAL_GetTick>
 8000692:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000694:	4b68      	ldr	r3, [pc, #416]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800069c:	d0a2      	beq.n	80005e4 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800069e:	f7ff fd99 	bl	80001d4 <HAL_GetTick>
 80006a2:	1b40      	subs	r0, r0, r5
 80006a4:	2864      	cmp	r0, #100	; 0x64
 80006a6:	d9f5      	bls.n	8000694 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 80006a8:	2003      	movs	r0, #3
 80006aa:	e14c      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80006ac:	4b62      	ldr	r3, [pc, #392]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80006b4:	d1a5      	bne.n	8000602 <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f013 0f02 	tst.w	r3, #2
 80006be:	d004      	beq.n	80006ca <HAL_RCC_OscConfig+0x14e>
 80006c0:	6923      	ldr	r3, [r4, #16]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d001      	beq.n	80006ca <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 80006c6:	2001      	movs	r0, #1
 80006c8:	e13d      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ca:	4a5b      	ldr	r2, [pc, #364]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006d2:	6961      	ldr	r1, [r4, #20]
 80006d4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006d8:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	f013 0f08 	tst.w	r3, #8
 80006e0:	d032      	beq.n	8000748 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e2:	69a3      	ldr	r3, [r4, #24]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d05b      	beq.n	80007a0 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 80006e8:	4b55      	ldr	r3, [pc, #340]	; (8000840 <HAL_RCC_OscConfig+0x2c4>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006ee:	f7ff fd71 	bl	80001d4 <HAL_GetTick>
 80006f2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f4:	4b50      	ldr	r3, [pc, #320]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80006f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f8:	f013 0f02 	tst.w	r3, #2
 80006fc:	d121      	bne.n	8000742 <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006fe:	f7ff fd69 	bl	80001d4 <HAL_GetTick>
 8000702:	1b40      	subs	r0, r0, r5
 8000704:	2802      	cmp	r0, #2
 8000706:	d9f5      	bls.n	80006f4 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8000708:	2003      	movs	r0, #3
 800070a:	e11c      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800070c:	4a4a      	ldr	r2, [pc, #296]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 800070e:	6813      	ldr	r3, [r2, #0]
 8000710:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000714:	6961      	ldr	r1, [r4, #20]
 8000716:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	e7dd      	b.n	80006da <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 800071e:	4b47      	ldr	r3, [pc, #284]	; (800083c <HAL_RCC_OscConfig+0x2c0>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000724:	f7ff fd56 	bl	80001d4 <HAL_GetTick>
 8000728:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800072a:	4b43      	ldr	r3, [pc, #268]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	f013 0f02 	tst.w	r3, #2
 8000732:	d0d2      	beq.n	80006da <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000734:	f7ff fd4e 	bl	80001d4 <HAL_GetTick>
 8000738:	1b40      	subs	r0, r0, r5
 800073a:	2802      	cmp	r0, #2
 800073c:	d9f5      	bls.n	800072a <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 800073e:	2003      	movs	r0, #3
 8000740:	e101      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff ff04 	bl	8000550 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000748:	6823      	ldr	r3, [r4, #0]
 800074a:	f013 0f04 	tst.w	r3, #4
 800074e:	f000 8097 	beq.w	8000880 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000752:	4b39      	ldr	r3, [pc, #228]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800075a:	d133      	bne.n	80007c4 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 800075e:	69da      	ldr	r2, [r3, #28]
 8000760:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000764:	61da      	str	r2, [r3, #28]
 8000766:	69db      	ldr	r3, [r3, #28]
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	9301      	str	r3, [sp, #4]
 800076e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000770:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <HAL_RCC_OscConfig+0x2c8>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f413 7f80 	tst.w	r3, #256	; 0x100
 800077a:	d025      	beq.n	80007c8 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800077c:	68e3      	ldr	r3, [r4, #12]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d036      	beq.n	80007f0 <HAL_RCC_OscConfig+0x274>
 8000782:	2b00      	cmp	r3, #0
 8000784:	d14c      	bne.n	8000820 <HAL_RCC_OscConfig+0x2a4>
 8000786:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800078a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800078e:	6a1a      	ldr	r2, [r3, #32]
 8000790:	f022 0201 	bic.w	r2, r2, #1
 8000794:	621a      	str	r2, [r3, #32]
 8000796:	6a1a      	ldr	r2, [r3, #32]
 8000798:	f022 0204 	bic.w	r2, r2, #4
 800079c:	621a      	str	r2, [r3, #32]
 800079e:	e02c      	b.n	80007fa <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 80007a0:	4b27      	ldr	r3, [pc, #156]	; (8000840 <HAL_RCC_OscConfig+0x2c4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a6:	f7ff fd15 	bl	80001d4 <HAL_GetTick>
 80007aa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80007ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007b0:	f013 0f02 	tst.w	r3, #2
 80007b4:	d0c8      	beq.n	8000748 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007b6:	f7ff fd0d 	bl	80001d4 <HAL_GetTick>
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	2802      	cmp	r0, #2
 80007be:	d9f5      	bls.n	80007ac <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 80007c0:	2003      	movs	r0, #3
 80007c2:	e0c0      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 80007c4:	2500      	movs	r5, #0
 80007c6:	e7d4      	b.n	8000772 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <HAL_RCC_OscConfig+0x2c8>)
 80007ca:	6813      	ldr	r3, [r2, #0]
 80007cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007d0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007d2:	f7ff fcff 	bl	80001d4 <HAL_GetTick>
 80007d6:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <HAL_RCC_OscConfig+0x2c8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80007e0:	d1cc      	bne.n	800077c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007e2:	f7ff fcf7 	bl	80001d4 <HAL_GetTick>
 80007e6:	1b80      	subs	r0, r0, r6
 80007e8:	2864      	cmp	r0, #100	; 0x64
 80007ea:	d9f5      	bls.n	80007d8 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 80007ec:	2003      	movs	r0, #3
 80007ee:	e0aa      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 80007f2:	6a13      	ldr	r3, [r2, #32]
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007fa:	68e3      	ldr	r3, [r4, #12]
 80007fc:	b373      	cbz	r3, 800085c <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 80007fe:	f7ff fce9 	bl	80001d4 <HAL_GetTick>
 8000802:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000806:	6a1b      	ldr	r3, [r3, #32]
 8000808:	f013 0f02 	tst.w	r3, #2
 800080c:	d137      	bne.n	800087e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800080e:	f7ff fce1 	bl	80001d4 <HAL_GetTick>
 8000812:	1b80      	subs	r0, r0, r6
 8000814:	f241 3388 	movw	r3, #5000	; 0x1388
 8000818:	4298      	cmp	r0, r3
 800081a:	d9f3      	bls.n	8000804 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 800081c:	2003      	movs	r0, #3
 800081e:	e092      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000820:	2b05      	cmp	r3, #5
 8000822:	d011      	beq.n	8000848 <HAL_RCC_OscConfig+0x2cc>
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_RCC_OscConfig+0x2bc>)
 8000826:	6a1a      	ldr	r2, [r3, #32]
 8000828:	f022 0201 	bic.w	r2, r2, #1
 800082c:	621a      	str	r2, [r3, #32]
 800082e:	6a1a      	ldr	r2, [r3, #32]
 8000830:	f022 0204 	bic.w	r2, r2, #4
 8000834:	621a      	str	r2, [r3, #32]
 8000836:	e7e0      	b.n	80007fa <HAL_RCC_OscConfig+0x27e>
 8000838:	40021000 	.word	0x40021000
 800083c:	42420000 	.word	0x42420000
 8000840:	42420480 	.word	0x42420480
 8000844:	40007000 	.word	0x40007000
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	f042 0204 	orr.w	r2, r2, #4
 8000850:	621a      	str	r2, [r3, #32]
 8000852:	6a1a      	ldr	r2, [r3, #32]
 8000854:	f042 0201 	orr.w	r2, r2, #1
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	e7ce      	b.n	80007fa <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 800085c:	f7ff fcba 	bl	80001d4 <HAL_GetTick>
 8000860:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 8000864:	6a1b      	ldr	r3, [r3, #32]
 8000866:	f013 0f02 	tst.w	r3, #2
 800086a:	d008      	beq.n	800087e <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800086c:	f7ff fcb2 	bl	80001d4 <HAL_GetTick>
 8000870:	1b80      	subs	r0, r0, r6
 8000872:	f241 3388 	movw	r3, #5000	; 0x1388
 8000876:	4298      	cmp	r0, r3
 8000878:	d9f3      	bls.n	8000862 <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 800087a:	2003      	movs	r0, #3
 800087c:	e063      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 800087e:	b9e5      	cbnz	r5, 80008ba <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000880:	69e3      	ldr	r3, [r4, #28]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d05e      	beq.n	8000944 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000886:	4a32      	ldr	r2, [pc, #200]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 8000888:	6852      	ldr	r2, [r2, #4]
 800088a:	f002 020c 	and.w	r2, r2, #12
 800088e:	2a08      	cmp	r2, #8
 8000890:	d05b      	beq.n	800094a <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000892:	2b02      	cmp	r3, #2
 8000894:	d017      	beq.n	80008c6 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 8000896:	4b2f      	ldr	r3, [pc, #188]	; (8000954 <HAL_RCC_OscConfig+0x3d8>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800089c:	f7ff fc9a 	bl	80001d4 <HAL_GetTick>
 80008a0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008aa:	d047      	beq.n	800093c <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008ac:	f7ff fc92 	bl	80001d4 <HAL_GetTick>
 80008b0:	1b00      	subs	r0, r0, r4
 80008b2:	2802      	cmp	r0, #2
 80008b4:	d9f5      	bls.n	80008a2 <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e045      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008ba:	4a25      	ldr	r2, [pc, #148]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 80008bc:	69d3      	ldr	r3, [r2, #28]
 80008be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008c2:	61d3      	str	r3, [r2, #28]
 80008c4:	e7dc      	b.n	8000880 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <HAL_RCC_OscConfig+0x3d8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008cc:	f7ff fc82 	bl	80001d4 <HAL_GetTick>
 80008d0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d2:	4b1f      	ldr	r3, [pc, #124]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008da:	d006      	beq.n	80008ea <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008dc:	f7ff fc7a 	bl	80001d4 <HAL_GetTick>
 80008e0:	1b40      	subs	r0, r0, r5
 80008e2:	2802      	cmp	r0, #2
 80008e4:	d9f5      	bls.n	80008d2 <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
 80008e8:	e02d      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008ea:	6a23      	ldr	r3, [r4, #32]
 80008ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008f0:	d01a      	beq.n	8000928 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008f2:	4917      	ldr	r1, [pc, #92]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 80008f4:	684b      	ldr	r3, [r1, #4]
 80008f6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80008fa:	6a22      	ldr	r2, [r4, #32]
 80008fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80008fe:	4302      	orrs	r2, r0
 8000900:	4313      	orrs	r3, r2
 8000902:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8000904:	4b13      	ldr	r3, [pc, #76]	; (8000954 <HAL_RCC_OscConfig+0x3d8>)
 8000906:	2201      	movs	r2, #1
 8000908:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800090a:	f7ff fc63 	bl	80001d4 <HAL_GetTick>
 800090e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000918:	d10e      	bne.n	8000938 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800091a:	f7ff fc5b 	bl	80001d4 <HAL_GetTick>
 800091e:	1b00      	subs	r0, r0, r4
 8000920:	2802      	cmp	r0, #2
 8000922:	d9f5      	bls.n	8000910 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8000924:	2003      	movs	r0, #3
 8000926:	e00e      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000928:	4a09      	ldr	r2, [pc, #36]	; (8000950 <HAL_RCC_OscConfig+0x3d4>)
 800092a:	6853      	ldr	r3, [r2, #4]
 800092c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000930:	68a1      	ldr	r1, [r4, #8]
 8000932:	430b      	orrs	r3, r1
 8000934:	6053      	str	r3, [r2, #4]
 8000936:	e7dc      	b.n	80008f2 <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000938:	2000      	movs	r0, #0
 800093a:	e004      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
 800093c:	2000      	movs	r0, #0
 800093e:	e002      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000940:	2001      	movs	r0, #1
 8000942:	e000      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8000944:	2000      	movs	r0, #0
}
 8000946:	b002      	add	sp, #8
 8000948:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800094a:	2001      	movs	r0, #1
 800094c:	e7fb      	b.n	8000946 <HAL_RCC_OscConfig+0x3ca>
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	42420060 	.word	0x42420060

08000958 <HAL_RCC_GetSysClockFreq>:
{
 8000958:	b410      	push	{r4}
 800095a:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800095c:	4c16      	ldr	r4, [pc, #88]	; (80009b8 <HAL_RCC_GetSysClockFreq+0x60>)
 800095e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000962:	f10d 0c18 	add.w	ip, sp, #24
 8000966:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800096a:	8a23      	ldrh	r3, [r4, #16]
 800096c:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_RCC_GetSysClockFreq+0x64>)
 8000972:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000974:	f003 020c 	and.w	r2, r3, #12
 8000978:	2a08      	cmp	r2, #8
 800097a:	d11a      	bne.n	80009b2 <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800097c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000980:	4462      	add	r2, ip
 8000982:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000986:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800098a:	d105      	bne.n	8000998 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <HAL_RCC_GetSysClockFreq+0x68>)
 800098e:	fb00 f002 	mul.w	r0, r0, r2
}
 8000992:	b007      	add	sp, #28
 8000994:	bc10      	pop	{r4}
 8000996:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <HAL_RCC_GetSysClockFreq+0x64>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80009a0:	4463      	add	r3, ip
 80009a2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80009a8:	fb00 f002 	mul.w	r0, r0, r2
 80009ac:	fbb0 f0f3 	udiv	r0, r0, r3
 80009b0:	e7ef      	b.n	8000992 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80009b2:	4804      	ldr	r0, [pc, #16]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80009b4:	e7ed      	b.n	8000992 <HAL_RCC_GetSysClockFreq+0x3a>
 80009b6:	bf00      	nop
 80009b8:	08001a28 	.word	0x08001a28
 80009bc:	40021000 	.word	0x40021000
 80009c0:	003d0900 	.word	0x003d0900
 80009c4:	007a1200 	.word	0x007a1200

080009c8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009c8:	4b62      	ldr	r3, [pc, #392]	; (8000b54 <HAL_RCC_ClockConfig+0x18c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f003 0307 	and.w	r3, r3, #7
 80009d0:	428b      	cmp	r3, r1
 80009d2:	d20c      	bcs.n	80009ee <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d4:	4a5f      	ldr	r2, [pc, #380]	; (8000b54 <HAL_RCC_ClockConfig+0x18c>)
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	f023 0307 	bic.w	r3, r3, #7
 80009dc:	430b      	orrs	r3, r1
 80009de:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d001      	beq.n	80009ee <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80009ea:	2001      	movs	r0, #1
}
 80009ec:	4770      	bx	lr
{
 80009ee:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f0:	6803      	ldr	r3, [r0, #0]
 80009f2:	f013 0f02 	tst.w	r3, #2
 80009f6:	d017      	beq.n	8000a28 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009f8:	f013 0f04 	tst.w	r3, #4
 80009fc:	d004      	beq.n	8000a08 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009fe:	4a56      	ldr	r2, [pc, #344]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a00:	6853      	ldr	r3, [r2, #4]
 8000a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000a06:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a08:	6803      	ldr	r3, [r0, #0]
 8000a0a:	f013 0f08 	tst.w	r3, #8
 8000a0e:	d004      	beq.n	8000a1a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a10:	4a51      	ldr	r2, [pc, #324]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a12:	6853      	ldr	r3, [r2, #4]
 8000a14:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000a18:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a1a:	4a4f      	ldr	r2, [pc, #316]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a1c:	6853      	ldr	r3, [r2, #4]
 8000a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a22:	6884      	ldr	r4, [r0, #8]
 8000a24:	4323      	orrs	r3, r4
 8000a26:	6053      	str	r3, [r2, #4]
 8000a28:	460d      	mov	r5, r1
 8000a2a:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	f013 0f01 	tst.w	r3, #1
 8000a32:	d052      	beq.n	8000ada <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a34:	6843      	ldr	r3, [r0, #4]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d023      	beq.n	8000a82 <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d028      	beq.n	8000a90 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a3e:	4a46      	ldr	r2, [pc, #280]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	f012 0f02 	tst.w	r2, #2
 8000a46:	f000 8082 	beq.w	8000b4e <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a4a:	4943      	ldr	r1, [pc, #268]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a4c:	684a      	ldr	r2, [r1, #4]
 8000a4e:	f022 0203 	bic.w	r2, r2, #3
 8000a52:	4313      	orrs	r3, r2
 8000a54:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a56:	f7ff fbbd 	bl	80001d4 <HAL_GetTick>
 8000a5a:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a5c:	6863      	ldr	r3, [r4, #4]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d01d      	beq.n	8000a9e <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d02a      	beq.n	8000abc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f013 0f0c 	tst.w	r3, #12
 8000a6e:	d034      	beq.n	8000ada <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a70:	f7ff fbb0 	bl	80001d4 <HAL_GetTick>
 8000a74:	1b80      	subs	r0, r0, r6
 8000a76:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a7a:	4298      	cmp	r0, r3
 8000a7c:	d9f3      	bls.n	8000a66 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	e064      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a82:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a84:	6812      	ldr	r2, [r2, #0]
 8000a86:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000a8a:	d1de      	bne.n	8000a4a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	e05d      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a98:	d1d7      	bne.n	8000a4a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	e056      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f003 030c 	and.w	r3, r3, #12
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d017      	beq.n	8000ada <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aaa:	f7ff fb93 	bl	80001d4 <HAL_GetTick>
 8000aae:	1b80      	subs	r0, r0, r6
 8000ab0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ab4:	4298      	cmp	r0, r3
 8000ab6:	d9f2      	bls.n	8000a9e <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000ab8:	2003      	movs	r0, #3
 8000aba:	e047      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	2b08      	cmp	r3, #8
 8000ac6:	d008      	beq.n	8000ada <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac8:	f7ff fb84 	bl	80001d4 <HAL_GetTick>
 8000acc:	1b80      	subs	r0, r0, r6
 8000ace:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d9f2      	bls.n	8000abc <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	e038      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ada:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <HAL_RCC_ClockConfig+0x18c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	42ab      	cmp	r3, r5
 8000ae4:	d90c      	bls.n	8000b00 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ae6:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <HAL_RCC_ClockConfig+0x18c>)
 8000ae8:	6813      	ldr	r3, [r2, #0]
 8000aea:	f023 0307 	bic.w	r3, r3, #7
 8000aee:	432b      	orrs	r3, r5
 8000af0:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f003 0307 	and.w	r3, r3, #7
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d001      	beq.n	8000b00 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000afc:	2001      	movs	r0, #1
 8000afe:	e025      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	f013 0f04 	tst.w	r3, #4
 8000b06:	d006      	beq.n	8000b16 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000b0a:	6853      	ldr	r3, [r2, #4]
 8000b0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b10:	68e1      	ldr	r1, [r4, #12]
 8000b12:	430b      	orrs	r3, r1
 8000b14:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	f013 0f08 	tst.w	r3, #8
 8000b1c:	d007      	beq.n	8000b2e <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000b20:	6853      	ldr	r3, [r2, #4]
 8000b22:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b26:	6921      	ldr	r1, [r4, #16]
 8000b28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b2c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b2e:	f7ff ff13 	bl	8000958 <HAL_RCC_GetSysClockFreq>
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_RCC_ClockConfig+0x190>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_RCC_ClockConfig+0x194>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	40d8      	lsrs	r0, r3
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <HAL_RCC_ClockConfig+0x198>)
 8000b42:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fb01 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b4a:	2000      	movs	r0, #0
}
 8000b4c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000b4e:	2001      	movs	r0, #1
 8000b50:	e7fc      	b.n	8000b4c <HAL_RCC_ClockConfig+0x184>
 8000b52:	bf00      	nop
 8000b54:	40022000 	.word	0x40022000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	08001a44 	.word	0x08001a44
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_RCC_GetHCLKFreq>:
}
 8000b64:	4b01      	ldr	r3, [pc, #4]	; (8000b6c <HAL_RCC_GetHCLKFreq+0x8>)
 8000b66:	6818      	ldr	r0, [r3, #0]
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000008 	.word	0x20000008

08000b70 <HAL_RCC_GetPCLK1Freq>:
{
 8000b70:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b72:	f7ff fff7 	bl	8000b64 <HAL_RCC_GetHCLKFreq>
 8000b76:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b7e:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	bd08      	pop	{r3, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	08001a54 	.word	0x08001a54

08000b90 <HAL_RCC_GetPCLK2Freq>:
{
 8000b90:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b92:	f7ff ffe7 	bl	8000b64 <HAL_RCC_GetHCLKFreq>
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b9e:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	bd08      	pop	{r3, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	08001a54 	.word	0x08001a54

08000bb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	4605      	mov	r5, r0
 8000bb4:	460f      	mov	r7, r1
 8000bb6:	4616      	mov	r6, r2
 8000bb8:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000bba:	e03b      	b.n	8000c34 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000bbc:	b12c      	cbz	r4, 8000bca <SPI_WaitFlagStateUntilTimeout+0x1a>
 8000bbe:	f7ff fb09 	bl	80001d4 <HAL_GetTick>
 8000bc2:	9b06      	ldr	r3, [sp, #24]
 8000bc4:	1ac0      	subs	r0, r0, r3
 8000bc6:	42a0      	cmp	r0, r4
 8000bc8:	d334      	bcc.n	8000c34 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000bca:	682a      	ldr	r2, [r5, #0]
 8000bcc:	6853      	ldr	r3, [r2, #4]
 8000bce:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000bd2:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bd4:	686b      	ldr	r3, [r5, #4]
 8000bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000bda:	d00b      	beq.n	8000bf4 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be2:	d014      	beq.n	8000c0e <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000be4:	2301      	movs	r3, #1
 8000be6:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000bea:	2300      	movs	r3, #0
 8000bec:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	e027      	b.n	8000c44 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bf4:	68ab      	ldr	r3, [r5, #8]
 8000bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bfa:	d002      	beq.n	8000c02 <SPI_WaitFlagStateUntilTimeout+0x52>
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d1ec      	bne.n	8000bdc <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8000c02:	682a      	ldr	r2, [r5, #0]
 8000c04:	6813      	ldr	r3, [r2, #0]
 8000c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e7e6      	b.n	8000bdc <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8000c0e:	682a      	ldr	r2, [r5, #0]
 8000c10:	6813      	ldr	r3, [r2, #0]
 8000c12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c16:	041b      	lsls	r3, r3, #16
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	682a      	ldr	r2, [r5, #0]
 8000c1e:	6813      	ldr	r3, [r2, #0]
 8000c20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e7dd      	b.n	8000be4 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c28:	2301      	movs	r3, #1
 8000c2a:	42b3      	cmp	r3, r6
 8000c2c:	d009      	beq.n	8000c42 <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8000c2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c32:	d1c3      	bne.n	8000bbc <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c34:	682b      	ldr	r3, [r5, #0]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	ea37 0303 	bics.w	r3, r7, r3
 8000c3c:	d0f4      	beq.n	8000c28 <SPI_WaitFlagStateUntilTimeout+0x78>
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e7f3      	b.n	8000c2a <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8000c42:	2000      	movs	r0, #0
}
 8000c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c46 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c46:	b510      	push	{r4, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c4c:	9200      	str	r2, [sp, #0]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	2200      	movs	r2, #0
 8000c52:	2180      	movs	r1, #128	; 0x80
 8000c54:	f7ff ffac 	bl	8000bb0 <SPI_WaitFlagStateUntilTimeout>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	b910      	cbnz	r0, 8000c62 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c64:	f043 0320 	orr.w	r3, r3, #32
 8000c68:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e7f6      	b.n	8000c5c <SPI_CheckFlag_BSY+0x16>

08000c6e <HAL_SPI_Transmit>:
{
 8000c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c76:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	f000 80c8 	beq.w	8000e10 <HAL_SPI_Transmit+0x1a2>
 8000c80:	4604      	mov	r4, r0
 8000c82:	460d      	mov	r5, r1
 8000c84:	4690      	mov	r8, r2
 8000c86:	2301      	movs	r3, #1
 8000c88:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c8c:	f7ff faa2 	bl	80001d4 <HAL_GetTick>
 8000c90:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000c92:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d00a      	beq.n	8000cb2 <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8000c9c:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	b004      	add	sp, #16
 8000cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	f000 80a4 	beq.w	8000e00 <HAL_SPI_Transmit+0x192>
 8000cb8:	f1b8 0f00 	cmp.w	r8, #0
 8000cbc:	f000 80a2 	beq.w	8000e04 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000cca:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000ccc:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000cd0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000cd4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000cd6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000cd8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000cda:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000cdc:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cde:	68a3      	ldr	r3, [r4, #8]
 8000ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce4:	d01b      	beq.n	8000d1e <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000cee:	d103      	bne.n	8000cf8 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cf6:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cf8:	68e3      	ldr	r3, [r4, #12]
 8000cfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cfe:	d014      	beq.n	8000d2a <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000d00:	6863      	ldr	r3, [r4, #4]
 8000d02:	b11b      	cbz	r3, 8000d0c <HAL_SPI_Transmit+0x9e>
 8000d04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d13e      	bne.n	8000d8a <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d12:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d16:	3b01      	subs	r3, #1
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d1c:	e035      	b.n	8000d8a <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	6813      	ldr	r3, [r2, #0]
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e7dd      	b.n	8000ce6 <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000d2a:	6863      	ldr	r3, [r4, #4]
 8000d2c:	b11b      	cbz	r3, 8000d36 <HAL_SPI_Transmit+0xc8>
 8000d2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d10d      	bne.n	8000d52 <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d3c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d3e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d40:	3b01      	subs	r3, #1
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d46:	e004      	b.n	8000d52 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d05d      	beq.n	8000e08 <HAL_SPI_Transmit+0x19a>
 8000d4c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000d50:	d10f      	bne.n	8000d72 <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8000d52:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	b37b      	cbz	r3, 8000db8 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f012 0f02 	tst.w	r2, #2
 8000d60:	d0f2      	beq.n	8000d48 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000d62:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d66:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000d68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d6a:	3b01      	subs	r3, #1
 8000d6c:	b29b      	uxth	r3, r3
 8000d6e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d70:	e7ef      	b.n	8000d52 <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d72:	f7ff fa2f 	bl	80001d4 <HAL_GetTick>
 8000d76:	1bc0      	subs	r0, r0, r7
 8000d78:	42b0      	cmp	r0, r6
 8000d7a:	d3ea      	bcc.n	8000d52 <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e78e      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d043      	beq.n	8000e0c <HAL_SPI_Transmit+0x19e>
 8000d84:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000d88:	d10f      	bne.n	8000daa <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8000d8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	b19b      	cbz	r3, 8000db8 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	f012 0f02 	tst.w	r2, #2
 8000d98:	d0f2      	beq.n	8000d80 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000d9a:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d9e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000da0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000da2:	3b01      	subs	r3, #1
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000da8:	e7ef      	b.n	8000d8a <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000daa:	f7ff fa13 	bl	80001d4 <HAL_GetTick>
 8000dae:	1bc0      	subs	r0, r0, r7
 8000db0:	42b0      	cmp	r0, r6
 8000db2:	d3ea      	bcc.n	8000d8a <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e772      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000db8:	9700      	str	r7, [sp, #0]
 8000dba:	4633      	mov	r3, r6
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff fef5 	bl	8000bb0 <SPI_WaitFlagStateUntilTimeout>
 8000dc6:	b108      	cbz	r0, 8000dcc <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e768      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000dcc:	463a      	mov	r2, r7
 8000dce:	4631      	mov	r1, r6
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff ff38 	bl	8000c46 <SPI_CheckFlag_BSY>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b118      	cbz	r0, 8000de2 <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
    goto error;
 8000de0:	e75d      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000de2:	68a2      	ldr	r2, [r4, #8]
 8000de4:	b932      	cbnz	r2, 8000df4 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000de6:	9203      	str	r2, [sp, #12]
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	68d1      	ldr	r1, [r2, #12]
 8000dec:	9103      	str	r1, [sp, #12]
 8000dee:	6892      	ldr	r2, [r2, #8]
 8000df0:	9203      	str	r2, [sp, #12]
 8000df2:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000df4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f43f af51 	beq.w	8000c9e <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e74e      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e74c      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e74a      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e748      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e746      	b.n	8000c9e <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8000e10:	2302      	movs	r3, #2
 8000e12:	e74a      	b.n	8000caa <HAL_SPI_Transmit+0x3c>

08000e14 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d03c      	beq.n	8000e92 <HAL_SPI_Init+0x7e>
{
 8000e18:	b510      	push	{r4, lr}
 8000e1a:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e20:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d031      	beq.n	8000e8c <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e2e:	6822      	ldr	r2, [r4, #0]
 8000e30:	6813      	ldr	r3, [r2, #0]
 8000e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e36:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e38:	6863      	ldr	r3, [r4, #4]
 8000e3a:	68a2      	ldr	r2, [r4, #8]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	68e2      	ldr	r2, [r4, #12]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	6922      	ldr	r2, [r4, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	6962      	ldr	r2, [r4, #20]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	69a2      	ldr	r2, [r4, #24]
 8000e4c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e50:	4313      	orrs	r3, r2
 8000e52:	69e2      	ldr	r2, [r4, #28]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	6a22      	ldr	r2, [r4, #32]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e5c:	6822      	ldr	r2, [r4, #0]
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e62:	8b63      	ldrh	r3, [r4, #26]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	430b      	orrs	r3, r1
 8000e6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e74:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e76:	6822      	ldr	r2, [r4, #0]
 8000e78:	69d3      	ldr	r3, [r2, #28]
 8000e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e7e:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e80:	2000      	movs	r0, #0
 8000e82:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000e84:	2301      	movs	r3, #1
 8000e86:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000e8a:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000e8c:	f000 fc2a 	bl	80016e4 <HAL_SPI_MspInit>
 8000e90:	e7ca      	b.n	8000e28 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000e92:	2001      	movs	r0, #1
}
 8000e94:	4770      	bx	lr

08000e96 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e96:	6802      	ldr	r2, [r0, #0]
 8000e98:	68d3      	ldr	r3, [r2, #12]
 8000e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8000e9e:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ea0:	6802      	ldr	r2, [r0, #0]
 8000ea2:	6953      	ldr	r3, [r2, #20]
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000eaa:	2320      	movs	r3, #32
 8000eac:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8000eb0:	4770      	bx	lr

08000eb2 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000eb2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b21      	cmp	r3, #33	; 0x21
 8000eba:	d12a      	bne.n	8000f12 <UART_Transmit_IT+0x60>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ebc:	6883      	ldr	r3, [r0, #8]
 8000ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ec2:	d016      	beq.n	8000ef2 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	6202      	str	r2, [r0, #32]
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	6803      	ldr	r3, [r0, #0]
 8000ece:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8000ed0:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	84c3      	strh	r3, [r0, #38]	; 0x26
 8000ed8:	b9eb      	cbnz	r3, 8000f16 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000eda:	6802      	ldr	r2, [r0, #0]
 8000edc:	68d3      	ldr	r3, [r2, #12]
 8000ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ee2:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000ee4:	6802      	ldr	r2, [r0, #0]
 8000ee6:	68d3      	ldr	r3, [r2, #12]
 8000ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eec:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 8000ef2:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	6802      	ldr	r2, [r0, #0]
 8000ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000efc:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000efe:	6903      	ldr	r3, [r0, #16]
 8000f00:	b91b      	cbnz	r3, 8000f0a <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 8000f02:	6a03      	ldr	r3, [r0, #32]
 8000f04:	3302      	adds	r3, #2
 8000f06:	6203      	str	r3, [r0, #32]
 8000f08:	e7e2      	b.n	8000ed0 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 8000f0a:	6a03      	ldr	r3, [r0, #32]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	6203      	str	r3, [r0, #32]
 8000f10:	e7de      	b.n	8000ed0 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 8000f12:	2002      	movs	r0, #2
 8000f14:	4770      	bx	lr
    return HAL_OK;
 8000f16:	2000      	movs	r0, #0
  }
}
 8000f18:	4770      	bx	lr
	...

08000f1c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f20:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f22:	6802      	ldr	r2, [r0, #0]
 8000f24:	6913      	ldr	r3, [r2, #16]
 8000f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f2a:	68c1      	ldr	r1, [r0, #12]
 8000f2c:	430b      	orrs	r3, r1
 8000f2e:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000f30:	6883      	ldr	r3, [r0, #8]
 8000f32:	6902      	ldr	r2, [r0, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	6942      	ldr	r2, [r0, #20]
 8000f38:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 8000f3a:	6801      	ldr	r1, [r0, #0]
 8000f3c:	68ca      	ldr	r2, [r1, #12]
 8000f3e:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000f42:	f022 020c 	bic.w	r2, r2, #12
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000f4a:	6802      	ldr	r2, [r0, #0]
 8000f4c:	6953      	ldr	r3, [r2, #20]
 8000f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f52:	6981      	ldr	r1, [r0, #24]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000f58:	6802      	ldr	r2, [r0, #0]
 8000f5a:	4b59      	ldr	r3, [pc, #356]	; (80010c0 <UART_SetConfig+0x1a4>)
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d057      	beq.n	8001010 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f60:	f7ff fe06 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8000f64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f6c:	686c      	ldr	r4, [r5, #4]
 8000f6e:	00a4      	lsls	r4, r4, #2
 8000f70:	fbb0 f4f4 	udiv	r4, r0, r4
 8000f74:	4f53      	ldr	r7, [pc, #332]	; (80010c4 <UART_SetConfig+0x1a8>)
 8000f76:	fba7 3404 	umull	r3, r4, r7, r4
 8000f7a:	0964      	lsrs	r4, r4, #5
 8000f7c:	0126      	lsls	r6, r4, #4
 8000f7e:	f7ff fdf7 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8000f82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f8a:	686c      	ldr	r4, [r5, #4]
 8000f8c:	00a4      	lsls	r4, r4, #2
 8000f8e:	fbb0 f9f4 	udiv	r9, r0, r4
 8000f92:	f7ff fded 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8000f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000f9e:	686c      	ldr	r4, [r5, #4]
 8000fa0:	00a4      	lsls	r4, r4, #2
 8000fa2:	fbb0 f4f4 	udiv	r4, r0, r4
 8000fa6:	fba7 3404 	umull	r3, r4, r7, r4
 8000faa:	0964      	lsrs	r4, r4, #5
 8000fac:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000fb0:	fb08 9414 	mls	r4, r8, r4, r9
 8000fb4:	0124      	lsls	r4, r4, #4
 8000fb6:	3432      	adds	r4, #50	; 0x32
 8000fb8:	fba7 3404 	umull	r3, r4, r7, r4
 8000fbc:	0964      	lsrs	r4, r4, #5
 8000fbe:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8000fc2:	4434      	add	r4, r6
 8000fc4:	f7ff fdd4 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8000fc8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fcc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fd0:	686e      	ldr	r6, [r5, #4]
 8000fd2:	00b6      	lsls	r6, r6, #2
 8000fd4:	fbb0 f6f6 	udiv	r6, r0, r6
 8000fd8:	f7ff fdca 	bl	8000b70 <HAL_RCC_GetPCLK1Freq>
 8000fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000fe4:	686b      	ldr	r3, [r5, #4]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fec:	fba7 3000 	umull	r3, r0, r7, r0
 8000ff0:	0940      	lsrs	r0, r0, #5
 8000ff2:	fb08 6810 	mls	r8, r8, r0, r6
 8000ff6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000ffa:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8000ffe:	fba7 3708 	umull	r3, r7, r7, r8
 8001002:	f3c7 1743 	ubfx	r7, r7, #5, #4
 8001006:	682b      	ldr	r3, [r5, #0]
 8001008:	4427      	add	r7, r4
 800100a:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 800100c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001010:	f7ff fdbe 	bl	8000b90 <HAL_RCC_GetPCLK2Freq>
 8001014:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001018:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800101c:	686c      	ldr	r4, [r5, #4]
 800101e:	00a4      	lsls	r4, r4, #2
 8001020:	fbb0 f4f4 	udiv	r4, r0, r4
 8001024:	4f27      	ldr	r7, [pc, #156]	; (80010c4 <UART_SetConfig+0x1a8>)
 8001026:	fba7 3404 	umull	r3, r4, r7, r4
 800102a:	0964      	lsrs	r4, r4, #5
 800102c:	0126      	lsls	r6, r4, #4
 800102e:	f7ff fdaf 	bl	8000b90 <HAL_RCC_GetPCLK2Freq>
 8001032:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001036:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800103a:	686c      	ldr	r4, [r5, #4]
 800103c:	00a4      	lsls	r4, r4, #2
 800103e:	fbb0 f9f4 	udiv	r9, r0, r4
 8001042:	f7ff fda5 	bl	8000b90 <HAL_RCC_GetPCLK2Freq>
 8001046:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800104a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800104e:	686c      	ldr	r4, [r5, #4]
 8001050:	00a4      	lsls	r4, r4, #2
 8001052:	fbb0 f4f4 	udiv	r4, r0, r4
 8001056:	fba7 3404 	umull	r3, r4, r7, r4
 800105a:	0964      	lsrs	r4, r4, #5
 800105c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001060:	fb08 9414 	mls	r4, r8, r4, r9
 8001064:	0124      	lsls	r4, r4, #4
 8001066:	3432      	adds	r4, #50	; 0x32
 8001068:	fba7 3404 	umull	r3, r4, r7, r4
 800106c:	0964      	lsrs	r4, r4, #5
 800106e:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001072:	4434      	add	r4, r6
 8001074:	f7ff fd8c 	bl	8000b90 <HAL_RCC_GetPCLK2Freq>
 8001078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800107c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001080:	686e      	ldr	r6, [r5, #4]
 8001082:	00b6      	lsls	r6, r6, #2
 8001084:	fbb0 f6f6 	udiv	r6, r0, r6
 8001088:	f7ff fd82 	bl	8000b90 <HAL_RCC_GetPCLK2Freq>
 800108c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001090:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001094:	686b      	ldr	r3, [r5, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	fbb0 f0f3 	udiv	r0, r0, r3
 800109c:	fba7 3000 	umull	r3, r0, r7, r0
 80010a0:	0940      	lsrs	r0, r0, #5
 80010a2:	fb08 6810 	mls	r8, r8, r0, r6
 80010a6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80010aa:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80010ae:	fba7 3708 	umull	r3, r7, r7, r8
 80010b2:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80010b6:	682b      	ldr	r3, [r5, #0]
 80010b8:	4427      	add	r7, r4
 80010ba:	609f      	str	r7, [r3, #8]
 80010bc:	e7a6      	b.n	800100c <UART_SetConfig+0xf0>
 80010be:	bf00      	nop
 80010c0:	40013800 	.word	0x40013800
 80010c4:	51eb851f 	.word	0x51eb851f

080010c8 <UART_WaitOnFlagUntilTimeout>:
{
 80010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	4605      	mov	r5, r0
 80010ce:	460f      	mov	r7, r1
 80010d0:	4616      	mov	r6, r2
 80010d2:	4698      	mov	r8, r3
 80010d4:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	ea37 0303 	bics.w	r3, r7, r3
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	42b3      	cmp	r3, r6
 80010e6:	d11d      	bne.n	8001124 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 80010e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80010ec:	d0f3      	beq.n	80010d6 <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80010ee:	b12c      	cbz	r4, 80010fc <UART_WaitOnFlagUntilTimeout+0x34>
 80010f0:	f7ff f870 	bl	80001d4 <HAL_GetTick>
 80010f4:	eba0 0008 	sub.w	r0, r0, r8
 80010f8:	42a0      	cmp	r0, r4
 80010fa:	d9ec      	bls.n	80010d6 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80010fc:	682a      	ldr	r2, [r5, #0]
 80010fe:	68d3      	ldr	r3, [r2, #12]
 8001100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001104:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001106:	682a      	ldr	r2, [r5, #0]
 8001108:	6953      	ldr	r3, [r2, #20]
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001110:	2320      	movs	r3, #32
 8001112:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001116:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800111a:	2300      	movs	r3, #0
 800111c:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001120:	2003      	movs	r0, #3
 8001122:	e000      	b.n	8001126 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8001124:	2000      	movs	r0, #0
}
 8001126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800112a <HAL_UART_Init>:
  if(huart == NULL)
 800112a:	b358      	cbz	r0, 8001184 <HAL_UART_Init+0x5a>
{
 800112c:	b510      	push	{r4, lr}
 800112e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001130:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001134:	b30b      	cbz	r3, 800117a <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001136:	2324      	movs	r3, #36	; 0x24
 8001138:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800113c:	6822      	ldr	r2, [r4, #0]
 800113e:	68d3      	ldr	r3, [r2, #12]
 8001140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001144:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001146:	4620      	mov	r0, r4
 8001148:	f7ff fee8 	bl	8000f1c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	6913      	ldr	r3, [r2, #16]
 8001150:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001154:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001156:	6822      	ldr	r2, [r4, #0]
 8001158:	6953      	ldr	r3, [r2, #20]
 800115a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800115e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	68d3      	ldr	r3, [r2, #12]
 8001164:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001168:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800116a:	2000      	movs	r0, #0
 800116c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800116e:	2320      	movs	r3, #32
 8001170:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001174:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8001178:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800117a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800117e:	f000 fae3 	bl	8001748 <HAL_UART_MspInit>
 8001182:	e7d8      	b.n	8001136 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001184:	2001      	movs	r0, #1
}
 8001186:	4770      	bx	lr

08001188 <HAL_UART_Transmit>:
{
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001190:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001194:	b2db      	uxtb	r3, r3
 8001196:	2b20      	cmp	r3, #32
 8001198:	d155      	bne.n	8001246 <HAL_UART_Transmit+0xbe>
 800119a:	4604      	mov	r4, r0
 800119c:	460d      	mov	r5, r1
 800119e:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 80011a0:	2900      	cmp	r1, #0
 80011a2:	d055      	beq.n	8001250 <HAL_UART_Transmit+0xc8>
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d055      	beq.n	8001254 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 80011a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d053      	beq.n	8001258 <HAL_UART_Transmit+0xd0>
 80011b0:	2301      	movs	r3, #1
 80011b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80011ba:	2321      	movs	r3, #33	; 0x21
 80011bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80011c0:	f7ff f808 	bl	80001d4 <HAL_GetTick>
 80011c4:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80011c6:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80011ca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80011ce:	e010      	b.n	80011f2 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80011d0:	9600      	str	r6, [sp, #0]
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff75 	bl	80010c8 <UART_WaitOnFlagUntilTimeout>
 80011de:	2800      	cmp	r0, #0
 80011e0:	d13c      	bne.n	800125c <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80011e2:	882b      	ldrh	r3, [r5, #0]
 80011e4:	6822      	ldr	r2, [r4, #0]
 80011e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ea:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80011ec:	6923      	ldr	r3, [r4, #16]
 80011ee:	b9c3      	cbnz	r3, 8001222 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 80011f0:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80011f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	b1b3      	cbz	r3, 8001226 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80011f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001200:	68a3      	ldr	r3, [r4, #8]
 8001202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001206:	d0e3      	beq.n	80011d0 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001208:	9600      	str	r6, [sp, #0]
 800120a:	463b      	mov	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	2180      	movs	r1, #128	; 0x80
 8001210:	4620      	mov	r0, r4
 8001212:	f7ff ff59 	bl	80010c8 <UART_WaitOnFlagUntilTimeout>
 8001216:	bb18      	cbnz	r0, 8001260 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001218:	782a      	ldrb	r2, [r5, #0]
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	3501      	adds	r5, #1
 8001220:	e7e7      	b.n	80011f2 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8001222:	3501      	adds	r5, #1
 8001224:	e7e5      	b.n	80011f2 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001226:	9600      	str	r6, [sp, #0]
 8001228:	463b      	mov	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	2140      	movs	r1, #64	; 0x40
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff ff4a 	bl	80010c8 <UART_WaitOnFlagUntilTimeout>
 8001234:	4603      	mov	r3, r0
 8001236:	b9a8      	cbnz	r0, 8001264 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 8001238:	2220      	movs	r2, #32
 800123a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800123e:	2200      	movs	r2, #0
 8001240:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001244:	e000      	b.n	8001248 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8001246:	2302      	movs	r3, #2
}
 8001248:	4618      	mov	r0, r3
 800124a:	b002      	add	sp, #8
 800124c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e7f9      	b.n	8001248 <HAL_UART_Transmit+0xc0>
 8001254:	2301      	movs	r3, #1
 8001256:	e7f7      	b.n	8001248 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 8001258:	2302      	movs	r3, #2
 800125a:	e7f5      	b.n	8001248 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e7f3      	b.n	8001248 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e7f1      	b.n	8001248 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e7ef      	b.n	8001248 <HAL_UART_Transmit+0xc0>

08001268 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8001268:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b20      	cmp	r3, #32
 8001270:	d120      	bne.n	80012b4 <HAL_UART_Receive_IT+0x4c>
    if((pData == NULL) || (Size == 0U))
 8001272:	b309      	cbz	r1, 80012b8 <HAL_UART_Receive_IT+0x50>
 8001274:	b312      	cbz	r2, 80012bc <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8001276:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800127a:	2b01      	cmp	r3, #1
 800127c:	d020      	beq.n	80012c0 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 800127e:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001280:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001282:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001284:	2300      	movs	r3, #0
 8001286:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001288:	2222      	movs	r2, #34	; 0x22
 800128a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 800128e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001292:	6801      	ldr	r1, [r0, #0]
 8001294:	68ca      	ldr	r2, [r1, #12]
 8001296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800129a:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800129c:	6801      	ldr	r1, [r0, #0]
 800129e:	694a      	ldr	r2, [r1, #20]
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80012a6:	6801      	ldr	r1, [r0, #0]
 80012a8:	68ca      	ldr	r2, [r1, #12]
 80012aa:	f042 0220 	orr.w	r2, r2, #32
 80012ae:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 80012b0:	4618      	mov	r0, r3
 80012b2:	4770      	bx	lr
    return HAL_BUSY;
 80012b4:	2002      	movs	r0, #2
 80012b6:	4770      	bx	lr
      return HAL_ERROR;
 80012b8:	2001      	movs	r0, #1
 80012ba:	4770      	bx	lr
 80012bc:	2001      	movs	r0, #1
 80012be:	4770      	bx	lr
    __HAL_LOCK(huart);
 80012c0:	2002      	movs	r0, #2
}
 80012c2:	4770      	bx	lr

080012c4 <HAL_UART_TxCpltCallback>:
}
 80012c4:	4770      	bx	lr

080012c6 <UART_EndTransmit_IT>:
{
 80012c6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80012c8:	6801      	ldr	r1, [r0, #0]
 80012ca:	68cb      	ldr	r3, [r1, #12]
 80012cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012d0:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80012d2:	2320      	movs	r3, #32
 80012d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80012d8:	f7ff fff4 	bl	80012c4 <HAL_UART_TxCpltCallback>
}
 80012dc:	2000      	movs	r0, #0
 80012de:	bd08      	pop	{r3, pc}

080012e0 <UART_Receive_IT>:
{
 80012e0:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80012e2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b22      	cmp	r3, #34	; 0x22
 80012ea:	d145      	bne.n	8001378 <UART_Receive_IT+0x98>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012ec:	6883      	ldr	r3, [r0, #8]
 80012ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012f2:	d00e      	beq.n	8001312 <UART_Receive_IT+0x32>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80012f4:	6903      	ldr	r3, [r0, #16]
 80012f6:	bb03      	cbnz	r3, 800133a <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012fe:	1c59      	adds	r1, r3, #1
 8001300:	6281      	str	r1, [r0, #40]	; 0x28
 8001302:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8001304:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8001306:	3b01      	subs	r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800130c:	b1f3      	cbz	r3, 800134c <UART_Receive_IT+0x6c>
    return HAL_OK;
 800130e:	2000      	movs	r0, #0
 8001310:	e033      	b.n	800137a <UART_Receive_IT+0x9a>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8001312:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001314:	6903      	ldr	r3, [r0, #16]
 8001316:	b943      	cbnz	r3, 800132a <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001318:	6803      	ldr	r3, [r0, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001320:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001322:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001324:	3302      	adds	r3, #2
 8001326:	6283      	str	r3, [r0, #40]	; 0x28
 8001328:	e7ec      	b.n	8001304 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800132a:	6803      	ldr	r3, [r0, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001332:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001334:	3301      	adds	r3, #1
 8001336:	6283      	str	r3, [r0, #40]	; 0x28
 8001338:	e7e4      	b.n	8001304 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800133a:	6803      	ldr	r3, [r0, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001340:	1c51      	adds	r1, r2, #1
 8001342:	6281      	str	r1, [r0, #40]	; 0x28
 8001344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001348:	7013      	strb	r3, [r2, #0]
 800134a:	e7db      	b.n	8001304 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800134c:	6802      	ldr	r2, [r0, #0]
 800134e:	68d3      	ldr	r3, [r2, #12]
 8001350:	f023 0320 	bic.w	r3, r3, #32
 8001354:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001356:	6802      	ldr	r2, [r0, #0]
 8001358:	68d3      	ldr	r3, [r2, #12]
 800135a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800135e:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001360:	6802      	ldr	r2, [r0, #0]
 8001362:	6953      	ldr	r3, [r2, #20]
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800136a:	2320      	movs	r3, #32
 800136c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001370:	f000 f964 	bl	800163c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001374:	2000      	movs	r0, #0
 8001376:	e000      	b.n	800137a <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 8001378:	2002      	movs	r0, #2
}
 800137a:	bd08      	pop	{r3, pc}

0800137c <HAL_UART_ErrorCallback>:
}
 800137c:	4770      	bx	lr
	...

08001380 <HAL_UART_IRQHandler>:
{
 8001380:	b510      	push	{r4, lr}
 8001382:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001384:	6802      	ldr	r2, [r0, #0]
 8001386:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001388:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800138a:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 800138c:	f013 000f 	ands.w	r0, r3, #15
 8001390:	d105      	bne.n	800139e <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001392:	f013 0f20 	tst.w	r3, #32
 8001396:	d002      	beq.n	800139e <HAL_UART_IRQHandler+0x1e>
 8001398:	f011 0f20 	tst.w	r1, #32
 800139c:	d153      	bne.n	8001446 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800139e:	2800      	cmp	r0, #0
 80013a0:	d067      	beq.n	8001472 <HAL_UART_IRQHandler+0xf2>
 80013a2:	f012 0201 	ands.w	r2, r2, #1
 80013a6:	d102      	bne.n	80013ae <HAL_UART_IRQHandler+0x2e>
 80013a8:	f411 7f90 	tst.w	r1, #288	; 0x120
 80013ac:	d061      	beq.n	8001472 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80013ae:	f013 0f01 	tst.w	r3, #1
 80013b2:	d006      	beq.n	80013c2 <HAL_UART_IRQHandler+0x42>
 80013b4:	f411 7f80 	tst.w	r1, #256	; 0x100
 80013b8:	d003      	beq.n	80013c2 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80013ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013bc:	f040 0001 	orr.w	r0, r0, #1
 80013c0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013c2:	f013 0f04 	tst.w	r3, #4
 80013c6:	d004      	beq.n	80013d2 <HAL_UART_IRQHandler+0x52>
 80013c8:	b11a      	cbz	r2, 80013d2 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80013ca:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013cc:	f040 0002 	orr.w	r0, r0, #2
 80013d0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013d2:	f013 0f02 	tst.w	r3, #2
 80013d6:	d004      	beq.n	80013e2 <HAL_UART_IRQHandler+0x62>
 80013d8:	b11a      	cbz	r2, 80013e2 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80013da:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80013dc:	f040 0004 	orr.w	r0, r0, #4
 80013e0:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80013e2:	f013 0f08 	tst.w	r3, #8
 80013e6:	d004      	beq.n	80013f2 <HAL_UART_IRQHandler+0x72>
 80013e8:	b11a      	cbz	r2, 80013f2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80013ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013ec:	f042 0208 	orr.w	r2, r2, #8
 80013f0:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80013f2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80013f4:	2a00      	cmp	r2, #0
 80013f6:	d048      	beq.n	800148a <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80013f8:	f013 0f20 	tst.w	r3, #32
 80013fc:	d002      	beq.n	8001404 <HAL_UART_IRQHandler+0x84>
 80013fe:	f011 0f20 	tst.w	r1, #32
 8001402:	d124      	bne.n	800144e <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800140c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800140e:	f012 0f08 	tst.w	r2, #8
 8001412:	d100      	bne.n	8001416 <HAL_UART_IRQHandler+0x96>
 8001414:	b33b      	cbz	r3, 8001466 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fd3d 	bl	8000e96 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001424:	d01b      	beq.n	800145e <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800142e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001430:	b18b      	cbz	r3, 8001456 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001432:	4a1a      	ldr	r2, [pc, #104]	; (800149c <HAL_UART_IRQHandler+0x11c>)
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001436:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001438:	f7fe ff4e 	bl	80002d8 <HAL_DMA_Abort_IT>
 800143c:	b328      	cbz	r0, 800148a <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800143e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001440:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001442:	4798      	blx	r3
 8001444:	e021      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff ff4a 	bl	80012e0 <UART_Receive_IT>
      return;
 800144c:	e01d      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff ff46 	bl	80012e0 <UART_Receive_IT>
 8001454:	e7d6      	b.n	8001404 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff ff90 	bl	800137c <HAL_UART_ErrorCallback>
 800145c:	e015      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 800145e:	4620      	mov	r0, r4
 8001460:	f7ff ff8c 	bl	800137c <HAL_UART_ErrorCallback>
 8001464:	e011      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff ff88 	bl	800137c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800146c:	2300      	movs	r3, #0
 800146e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001470:	e00b      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001472:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001476:	d002      	beq.n	800147e <HAL_UART_IRQHandler+0xfe>
 8001478:	f011 0f80 	tst.w	r1, #128	; 0x80
 800147c:	d106      	bne.n	800148c <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800147e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001482:	d002      	beq.n	800148a <HAL_UART_IRQHandler+0x10a>
 8001484:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001488:	d104      	bne.n	8001494 <HAL_UART_IRQHandler+0x114>
}
 800148a:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 800148c:	4620      	mov	r0, r4
 800148e:	f7ff fd10 	bl	8000eb2 <UART_Transmit_IT>
    return;
 8001492:	e7fa      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8001494:	4620      	mov	r0, r4
 8001496:	f7ff ff16 	bl	80012c6 <UART_EndTransmit_IT>
    return;
 800149a:	e7f6      	b.n	800148a <HAL_UART_IRQHandler+0x10a>
 800149c:	080014a1 	.word	0x080014a1

080014a0 <UART_DMAAbortOnError>:
{
 80014a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014a2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80014a4:	2300      	movs	r3, #0
 80014a6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80014a8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80014aa:	f7ff ff67 	bl	800137c <HAL_UART_ErrorCallback>
}
 80014ae:	bd08      	pop	{r3, pc}

080014b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b0:	b530      	push	{r4, r5, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	2400      	movs	r4, #0
 80014b6:	9404      	str	r4, [sp, #16]
 80014b8:	9405      	str	r4, [sp, #20]
 80014ba:	9406      	str	r4, [sp, #24]
 80014bc:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <MX_GPIO_Init+0x80>)
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	f042 0210 	orr.w	r2, r2, #16
 80014c6:	619a      	str	r2, [r3, #24]
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	f002 0210 	and.w	r2, r2, #16
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	699a      	ldr	r2, [r3, #24]
 80014d4:	f042 0220 	orr.w	r2, r2, #32
 80014d8:	619a      	str	r2, [r3, #24]
 80014da:	699a      	ldr	r2, [r3, #24]
 80014dc:	f002 0220 	and.w	r2, r2, #32
 80014e0:	9201      	str	r2, [sp, #4]
 80014e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	f042 0204 	orr.w	r2, r2, #4
 80014ea:	619a      	str	r2, [r3, #24]
 80014ec:	699a      	ldr	r2, [r3, #24]
 80014ee:	f002 0204 	and.w	r2, r2, #4
 80014f2:	9202      	str	r2, [sp, #8]
 80014f4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	f042 0208 	orr.w	r2, r2, #8
 80014fc:	619a      	str	r2, [r3, #24]
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0308 	and.w	r3, r3, #8
 8001504:	9303      	str	r3, [sp, #12]
 8001506:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5947_BLANK_Pin|TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 8001508:	4d0a      	ldr	r5, [pc, #40]	; (8001534 <MX_GPIO_Init+0x84>)
 800150a:	4622      	mov	r2, r4
 800150c:	210a      	movs	r1, #10
 800150e:	4628      	mov	r0, r5
 8001510:	f7ff f818 	bl	8000544 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TLC5947_BLANK_Pin TLC5947_XLAT_Pin */
  GPIO_InitStruct.Pin = TLC5947_BLANK_Pin|TLC5947_XLAT_Pin;
 8001514:	230a      	movs	r3, #10
 8001516:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2302      	movs	r3, #2
 8001520:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	a904      	add	r1, sp, #16
 8001524:	4628      	mov	r0, r5
 8001526:	f7fe ff23 	bl	8000370 <HAL_GPIO_Init>

}
 800152a:	b009      	add	sp, #36	; 0x24
 800152c:	bd30      	pop	{r4, r5, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40010800 	.word	0x40010800

08001538 <MX_SPI1_Init>:
{
 8001538:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800153a:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_SPI1_Init+0x34>)
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI1_Init+0x38>)
 800153e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001540:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001544:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	2300      	movs	r3, #0
 8001548:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800154a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154e:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001554:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001556:	2218      	movs	r2, #24
 8001558:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155a:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001560:	230a      	movs	r3, #10
 8001562:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001564:	f7ff fc56 	bl	8000e14 <HAL_SPI_Init>
}
 8001568:	bd08      	pop	{r3, pc}
 800156a:	bf00      	nop
 800156c:	200000d0 	.word	0x200000d0
 8001570:	40013000 	.word	0x40013000

08001574 <MX_USART3_UART_Init>:
{
 8001574:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <MX_USART3_UART_Init+0x24>)
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_USART3_UART_Init+0x28>)
 800157a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 800157c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001580:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	2300      	movs	r3, #0
 8001584:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001586:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001588:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800158a:	220c      	movs	r2, #12
 800158c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800158e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001590:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001592:	f7ff fdca 	bl	800112a <HAL_UART_Init>
}
 8001596:	bd08      	pop	{r3, pc}
 8001598:	20000090 	.word	0x20000090
 800159c:	40004800 	.word	0x40004800

080015a0 <SystemClock_Config>:
{
 80015a0:	b530      	push	{r4, r5, lr}
 80015a2:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a4:	2400      	movs	r4, #0
 80015a6:	9408      	str	r4, [sp, #32]
 80015a8:	9409      	str	r4, [sp, #36]	; 0x24
 80015aa:	940b      	str	r4, [sp, #44]	; 0x2c
 80015ac:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ae:	9401      	str	r4, [sp, #4]
 80015b0:	9402      	str	r4, [sp, #8]
 80015b2:	9403      	str	r4, [sp, #12]
 80015b4:	9404      	str	r4, [sp, #16]
 80015b6:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2201      	movs	r2, #1
 80015ba:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c2:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2502      	movs	r5, #2
 80015c6:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015ce:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d0:	a806      	add	r0, sp, #24
 80015d2:	f7fe ffd3 	bl	800057c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015d6:	230f      	movs	r3, #15
 80015d8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015da:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015dc:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e2:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015e4:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015e6:	4629      	mov	r1, r5
 80015e8:	a801      	add	r0, sp, #4
 80015ea:	f7ff f9ed 	bl	80009c8 <HAL_RCC_ClockConfig>
}
 80015ee:	b011      	add	sp, #68	; 0x44
 80015f0:	bd30      	pop	{r4, r5, pc}
	...

080015f4 <main>:
{
 80015f4:	b508      	push	{r3, lr}
  HAL_Init();
 80015f6:	f7fe fdcf 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 80015fa:	f7ff ffd1 	bl	80015a0 <SystemClock_Config>
  MX_GPIO_Init();
 80015fe:	f7ff ff57 	bl	80014b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001602:	f7ff ff99 	bl	8001538 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001606:	f7ff ffb5 	bl	8001574 <MX_USART3_UART_Init>
  HAL_UART_Receive_IT(&huart3, &uartByte, 1);//this triggers only once,uses interrupt and it has to be re-enabled
 800160a:	2201      	movs	r2, #1
 800160c:	4908      	ldr	r1, [pc, #32]	; (8001630 <main+0x3c>)
 800160e:	4809      	ldr	r0, [pc, #36]	; (8001634 <main+0x40>)
 8001610:	f7ff fe2a 	bl	8001268 <HAL_UART_Receive_IT>
  FillArray(BLUE);//it will be red
 8001614:	2002      	movs	r0, #2
 8001616:	f000 f979 	bl	800190c <FillArray>
	  	TLC_Update();//renew PWM
 800161a:	f000 f939 	bl	8001890 <TLC_Update>
	  	HAL_Delay(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001622:	f7fe fddd 	bl	80001e0 <HAL_Delay>
	 	FillArray(UARTVal);
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <main+0x44>)
 8001628:	7818      	ldrb	r0, [r3, #0]
 800162a:	f000 f96f 	bl	800190c <FillArray>
 800162e:	e7f4      	b.n	800161a <main+0x26>
 8001630:	2000008c 	.word	0x2000008c
 8001634:	20000090 	.word	0x20000090
 8001638:	2000002c 	.word	0x2000002c

0800163c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800163c:	b538      	push	{r3, r4, r5, lr}
  HAL_UART_Transmit(&huart3, &uartByte, 1, 100);//echo the received msg to verify that all is good
 800163e:	4c0e      	ldr	r4, [pc, #56]	; (8001678 <HAL_UART_RxCpltCallback+0x3c>)
 8001640:	4d0e      	ldr	r5, [pc, #56]	; (800167c <HAL_UART_RxCpltCallback+0x40>)
 8001642:	2364      	movs	r3, #100	; 0x64
 8001644:	2201      	movs	r2, #1
 8001646:	4621      	mov	r1, r4
 8001648:	4628      	mov	r0, r5
 800164a:	f7ff fd9d 	bl	8001188 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart3, (uint8_t *)"BP\r\n", 4U, 100);//so as to know it comes from the BP
 800164e:	2364      	movs	r3, #100	; 0x64
 8001650:	2204      	movs	r2, #4
 8001652:	490b      	ldr	r1, [pc, #44]	; (8001680 <HAL_UART_RxCpltCallback+0x44>)
 8001654:	4628      	mov	r0, r5
 8001656:	f7ff fd97 	bl	8001188 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &uartByte, 1);//re-enable the rx int
 800165a:	2201      	movs	r2, #1
 800165c:	4621      	mov	r1, r4
 800165e:	4628      	mov	r0, r5
 8001660:	f7ff fe02 	bl	8001268 <HAL_UART_Receive_IT>

  if(uartByte > 47 && uartByte <55)
 8001664:	7822      	ldrb	r2, [r4, #0]
 8001666:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b06      	cmp	r3, #6
 800166e:	d801      	bhi.n	8001674 <HAL_UART_RxCpltCallback+0x38>
	  UARTVal=uartByte;
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <HAL_UART_RxCpltCallback+0x48>)
 8001672:	701a      	strb	r2, [r3, #0]
//  if(uartByte == 54)
//	  //6
//	  FillArray(LOW);


}
 8001674:	bd38      	pop	{r3, r4, r5, pc}
 8001676:	bf00      	nop
 8001678:	2000008c 	.word	0x2000008c
 800167c:	20000090 	.word	0x20000090
 8001680:	08001a3c 	.word	0x08001a3c
 8001684:	2000002c 	.word	0x2000002c

08001688 <TLC_Write>:

void TLC_Write(uint8_t data[])
//void TLC_Write(uint8_t *data)
{
 8001688:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&hspi1,data, SPI_BYTE_AMOUNT,1000); // envio via el sp1 de 1 todos los bytes que tenga que mandar
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	4601      	mov	r1, r0
 8001692:	4802      	ldr	r0, [pc, #8]	; (800169c <TLC_Write+0x14>)
 8001694:	f7ff faeb 	bl	8000c6e <HAL_SPI_Transmit>
//    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY); // espero a que termine la transferen
}
 8001698:	bd08      	pop	{r3, pc}
 800169a:	bf00      	nop
 800169c:	200000d0 	.word	0x200000d0

080016a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <HAL_MspInit+0x3c>)
 80016a4:	699a      	ldr	r2, [r3, #24]
 80016a6:	f042 0201 	orr.w	r2, r2, #1
 80016aa:	619a      	str	r2, [r3, #24]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	f002 0201 	and.w	r2, r2, #1
 80016b2:	9200      	str	r2, [sp, #0]
 80016b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	69da      	ldr	r2, [r3, #28]
 80016b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016bc:	61da      	str	r2, [r3, #28]
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c4:	9301      	str	r3, [sp, #4]
 80016c6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <HAL_MspInit+0x40>)
 80016ca:	6853      	ldr	r3, [r2, #4]
 80016cc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d6:	b002      	add	sp, #8
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b500      	push	{lr}
 80016e6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	2300      	movs	r3, #0
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	9303      	str	r3, [sp, #12]
 80016ee:	9304      	str	r3, [sp, #16]
 80016f0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 80016f2:	6802      	ldr	r2, [r0, #0]
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_SPI_MspInit+0x5c>)
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d002      	beq.n	8001700 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016fa:	b007      	add	sp, #28
 80016fc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001700:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800170a:	619a      	str	r2, [r3, #24]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001712:	9200      	str	r2, [sp, #0]
 8001714:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	f042 0204 	orr.w	r2, r2, #4
 800171c:	619a      	str	r2, [r3, #24]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001734:	a902      	add	r1, sp, #8
 8001736:	4803      	ldr	r0, [pc, #12]	; (8001744 <HAL_SPI_MspInit+0x60>)
 8001738:	f7fe fe1a 	bl	8000370 <HAL_GPIO_Init>
}
 800173c:	e7dd      	b.n	80016fa <HAL_SPI_MspInit+0x16>
 800173e:	bf00      	nop
 8001740:	40013000 	.word	0x40013000
 8001744:	40010800 	.word	0x40010800

08001748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b530      	push	{r4, r5, lr}
 800174a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	2300      	movs	r3, #0
 800174e:	9302      	str	r3, [sp, #8]
 8001750:	9303      	str	r3, [sp, #12]
 8001752:	9304      	str	r3, [sp, #16]
 8001754:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8001756:	6802      	ldr	r2, [r0, #0]
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <HAL_UART_MspInit+0x80>)
 800175a:	429a      	cmp	r2, r3
 800175c:	d001      	beq.n	8001762 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800175e:	b007      	add	sp, #28
 8001760:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001762:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001766:	69da      	ldr	r2, [r3, #28]
 8001768:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800176c:	61da      	str	r2, [r3, #28]
 800176e:	69da      	ldr	r2, [r3, #28]
 8001770:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001774:	9200      	str	r2, [sp, #0]
 8001776:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001778:	699a      	ldr	r2, [r3, #24]
 800177a:	f042 0208 	orr.w	r2, r2, #8
 800177e:	619a      	str	r2, [r3, #24]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800178a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	4d0c      	ldr	r5, [pc, #48]	; (80017cc <HAL_UART_MspInit+0x84>)
 800179a:	a902      	add	r1, sp, #8
 800179c:	4628      	mov	r0, r5
 800179e:	f7fe fde7 	bl	8000370 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017a6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2400      	movs	r4, #0
 80017aa:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	a902      	add	r1, sp, #8
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7fe fddd 	bl	8000370 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017b6:	4622      	mov	r2, r4
 80017b8:	4621      	mov	r1, r4
 80017ba:	2027      	movs	r0, #39	; 0x27
 80017bc:	f7fe fd36 	bl	800022c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017c0:	2027      	movs	r0, #39	; 0x27
 80017c2:	f7fe fd67 	bl	8000294 <HAL_NVIC_EnableIRQ>
}
 80017c6:	e7ca      	b.n	800175e <HAL_UART_MspInit+0x16>
 80017c8:	40004800 	.word	0x40004800
 80017cc:	40010c00 	.word	0x40010c00

080017d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d0:	4770      	bx	lr

080017d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler>

080017d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler>

080017da <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	4770      	bx	lr

080017dc <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017de:	4770      	bx	lr

080017e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e2:	f7fe fceb 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017e6:	bd08      	pop	{r3, pc}

080017e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80017e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80017ea:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART3_IRQHandler+0xc>)
 80017ec:	f7ff fdc8 	bl	8001380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80017f0:	bd08      	pop	{r3, pc}
 80017f2:	bf00      	nop
 80017f4:	20000090 	.word	0x20000090

080017f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <SystemInit+0x40>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	f042 0201 	orr.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	4a0d      	ldr	r2, [pc, #52]	; (800183c <SystemInit+0x44>)
 8001806:	400a      	ands	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001810:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001814:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800181c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001824:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001826:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800182a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SystemInit+0x48>)
 800182e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001832:	609a      	str	r2, [r3, #8]
#endif 
}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	f8ff0000 	.word	0xf8ff0000
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001844:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001846:	e003      	b.n	8001850 <LoopCopyDataInit>

08001848 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800184a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800184c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800184e:	3104      	adds	r1, #4

08001850 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001850:	480a      	ldr	r0, [pc, #40]	; (800187c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001854:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001856:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001858:	d3f6      	bcc.n	8001848 <CopyDataInit>
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800185c:	e002      	b.n	8001864 <LoopFillZerobss>

0800185e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001860:	f842 3b04 	str.w	r3, [r2], #4

08001864 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001866:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001868:	d3f9      	bcc.n	800185e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800186a:	f7ff ffc5 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f000 f8ab 	bl	80019c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001872:	f7ff febf 	bl	80015f4 <main>
  bx lr
 8001876:	4770      	bx	lr
  ldr r3, =_sidata
 8001878:	08001a64 	.word	0x08001a64
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001880:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001884:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001888:	20000128 	.word	0x20000128

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <TLC_Update>:

uint16_t leds[24] = {}; // todo en 0, le pongo valores con FillArray
uint8_t spi_send[SPI_BYTE_AMOUNT]={};

void TLC_Update(void)
{
 8001890:	b570      	push	{r4, r5, r6, lr}
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI

    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_SET);
 8001892:	2201      	movs	r2, #1
 8001894:	2102      	movs	r1, #2
 8001896:	481a      	ldr	r0, [pc, #104]	; (8001900 <TLC_Update+0x70>)
 8001898:	f7fe fe54 	bl	8000544 <HAL_GPIO_WritePin>

    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 800189c:	2200      	movs	r2, #0
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI
 800189e:	4611      	mov	r1, r2
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 80018a0:	e017      	b.n	80018d2 <TLC_Update+0x42>
    {
        uint8_t send1 = 0;
        uint8_t send = leds[i] >> 4; // mando MSB
 80018a2:	4d18      	ldr	r5, [pc, #96]	; (8001904 <TLC_Update+0x74>)
 80018a4:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 80018a8:	f3c3 1407 	ubfx	r4, r3, #4, #8

        spi_send[si]=send;//
 80018ac:	4816      	ldr	r0, [pc, #88]	; (8001908 <TLC_Update+0x78>)
 80018ae:	5444      	strb	r4, [r0, r1]
        si++;
 80018b0:	1c4c      	adds	r4, r1, #1
 80018b2:	b2e4      	uxtb	r4, r4

        send = (leds[i] & 0x000F);
 80018b4:	b2db      	uxtb	r3, r3
        send <<= 4;
        send1 = (leds[i+1]) >> 8;
 80018b6:	1c56      	adds	r6, r2, #1
 80018b8:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
        send |= send1; //me quedo con 4 bits menos significativos del canal i y 4 bits más significativos del canal i-1
 80018bc:	011b      	lsls	r3, r3, #4
 80018be:	ea43 2315 	orr.w	r3, r3, r5, lsr #8

        spi_send[si]=send;//
 80018c2:	5503      	strb	r3, [r0, r4]
        si++;
 80018c4:	1c8b      	adds	r3, r1, #2
 80018c6:	b2db      	uxtb	r3, r3


        send = leds[i+1];//borro 4 bits más significativos del canal i-1 y mando LSB del canal i-1

        spi_send[si]=send;//
 80018c8:	54c5      	strb	r5, [r0, r3]
        si++;
 80018ca:	3103      	adds	r1, #3
 80018cc:	b2c9      	uxtb	r1, r1
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 80018ce:	3202      	adds	r2, #2
 80018d0:	b252      	sxtb	r2, r2
 80018d2:	2a17      	cmp	r2, #23
 80018d4:	dde5      	ble.n	80018a2 <TLC_Update+0x12>

    }

    TLC_Write(spi_send);
 80018d6:	480c      	ldr	r0, [pc, #48]	; (8001908 <TLC_Update+0x78>)
 80018d8:	f7ff fed6 	bl	8001688 <TLC_Write>

    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_SET);
 80018dc:	4c08      	ldr	r4, [pc, #32]	; (8001900 <TLC_Update+0x70>)
 80018de:	2201      	movs	r2, #1
 80018e0:	2108      	movs	r1, #8
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7fe fe2e 	bl	8000544 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2108      	movs	r1, #8
 80018ec:	4620      	mov	r0, r4
 80018ee:	f7fe fe29 	bl	8000544 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2102      	movs	r1, #2
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7fe fe24 	bl	8000544 <HAL_GPIO_WritePin>

}
 80018fc:	bd70      	pop	{r4, r5, r6, pc}
 80018fe:	bf00      	nop
 8001900:	40010800 	.word	0x40010800
 8001904:	20000030 	.word	0x20000030
 8001908:	20000064 	.word	0x20000064

0800190c <FillArray>:
void FillArray(uint8_t colorIntensity)
{
	static uint8_t position = 0, increment = 3,array_index = 0;
	static uint16_t intensity = 4095;

	  if(colorIntensity == 48)
 800190c:	2830      	cmp	r0, #48	; 0x30
 800190e:	d011      	beq.n	8001934 <FillArray+0x28>
		  //0
		  colorIntensity = BLUE;//RED

	  if(colorIntensity == 49)
 8001910:	2831      	cmp	r0, #49	; 0x31
 8001912:	d011      	beq.n	8001938 <FillArray+0x2c>
		  //1
		  colorIntensity = GREEN;//GREEN

	  if(colorIntensity == 50)
 8001914:	2832      	cmp	r0, #50	; 0x32
 8001916:	d011      	beq.n	800193c <FillArray+0x30>
		  //2
		  colorIntensity = RED;//BLUE

	  if(colorIntensity == 52)
 8001918:	2834      	cmp	r0, #52	; 0x34
 800191a:	d011      	beq.n	8001940 <FillArray+0x34>
		  //4
		  colorIntensity=HIGH;

	  if(colorIntensity == 53)
 800191c:	2835      	cmp	r0, #53	; 0x35
 800191e:	d011      	beq.n	8001944 <FillArray+0x38>
		  //5
		  colorIntensity=MID;

	  if(colorIntensity == 54)
 8001920:	2836      	cmp	r0, #54	; 0x36
 8001922:	d02b      	beq.n	800197c <FillArray+0x70>
		  //6
		  colorIntensity=LOW;

if(colorIntensity >-1 && colorIntensity<3)
 8001924:	2802      	cmp	r0, #2
 8001926:	d81a      	bhi.n	800195e <FillArray+0x52>
{
	//RGB is not covered by this code
	position = colorIntensity;
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <FillArray+0xac>)
 800192a:	7018      	strb	r0, [r3, #0]

	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <FillArray+0xb0>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e010      	b.n	8001956 <FillArray+0x4a>
		  colorIntensity = BLUE;//RED
 8001934:	2002      	movs	r0, #2
 8001936:	e7ed      	b.n	8001914 <FillArray+0x8>
		  colorIntensity = GREEN;//GREEN
 8001938:	2001      	movs	r0, #1
 800193a:	e7ed      	b.n	8001918 <FillArray+0xc>
		  colorIntensity = RED;//BLUE
 800193c:	2000      	movs	r0, #0
 800193e:	e7ed      	b.n	800191c <FillArray+0x10>
		  colorIntensity=HIGH;
 8001940:	2004      	movs	r0, #4
 8001942:	e7ed      	b.n	8001920 <FillArray+0x14>
		  colorIntensity=MID;
 8001944:	2005      	movs	r0, #5
 8001946:	e7ed      	b.n	8001924 <FillArray+0x18>
		leds[array_index] = 0;//all previous values are erased
 8001948:	4a1d      	ldr	r2, [pc, #116]	; (80019c0 <FillArray+0xb4>)
 800194a:	2100      	movs	r1, #0
 800194c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 8001950:	3301      	adds	r3, #1
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <FillArray+0xb0>)
 8001954:	7013      	strb	r3, [r2, #0]
 8001956:	4b19      	ldr	r3, [pc, #100]	; (80019bc <FillArray+0xb0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b17      	cmp	r3, #23
 800195c:	d9f4      	bls.n	8001948 <FillArray+0x3c>
}

if(colorIntensity >3 && colorIntensity<7)
 800195e:	1f03      	subs	r3, r0, #4
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d805      	bhi.n	8001972 <FillArray+0x66>
{
	if(colorIntensity == 4)
 8001966:	2804      	cmp	r0, #4
 8001968:	d00a      	beq.n	8001980 <FillArray+0x74>
		intensity = 4095;
	if(colorIntensity == 5)
 800196a:	2805      	cmp	r0, #5
 800196c:	d00d      	beq.n	800198a <FillArray+0x7e>
		intensity = 1024;
	if(colorIntensity == 6)
 800196e:	2806      	cmp	r0, #6
 8001970:	d010      	beq.n	8001994 <FillArray+0x88>
		intensity = 32;
}


	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <FillArray+0xac>)
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	4b11      	ldr	r3, [pc, #68]	; (80019bc <FillArray+0xb0>)
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	e017      	b.n	80019ac <FillArray+0xa0>
		  colorIntensity=LOW;
 800197c:	2006      	movs	r0, #6
 800197e:	e7ee      	b.n	800195e <FillArray+0x52>
		intensity = 4095;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <FillArray+0xb8>)
 8001982:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001986:	801a      	strh	r2, [r3, #0]
 8001988:	e7ef      	b.n	800196a <FillArray+0x5e>
		intensity = 1024;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <FillArray+0xb8>)
 800198c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	e7ec      	b.n	800196e <FillArray+0x62>
		intensity = 32;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <FillArray+0xb8>)
 8001996:	2220      	movs	r2, #32
 8001998:	801a      	strh	r2, [r3, #0]
 800199a:	e7ea      	b.n	8001972 <FillArray+0x66>
//		leds[array_index] = 4095*1/(position+1);//intensidad tenue
		leds[array_index] = intensity;
 800199c:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <FillArray+0xb8>)
 800199e:	8811      	ldrh	r1, [r2, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <FillArray+0xb4>)
 80019a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 80019a6:	3303      	adds	r3, #3
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <FillArray+0xb0>)
 80019aa:	7013      	strb	r3, [r2, #0]
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <FillArray+0xb0>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b17      	cmp	r3, #23
 80019b2:	d9f3      	bls.n	800199c <FillArray+0x90>

}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000060 	.word	0x20000060
 80019bc:	2000002d 	.word	0x2000002d
 80019c0:	20000030 	.word	0x20000030
 80019c4:	2000000c 	.word	0x2000000c

080019c8 <__libc_init_array>:
 80019c8:	b570      	push	{r4, r5, r6, lr}
 80019ca:	2500      	movs	r5, #0
 80019cc:	4e0c      	ldr	r6, [pc, #48]	; (8001a00 <__libc_init_array+0x38>)
 80019ce:	4c0d      	ldr	r4, [pc, #52]	; (8001a04 <__libc_init_array+0x3c>)
 80019d0:	1ba4      	subs	r4, r4, r6
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	42a5      	cmp	r5, r4
 80019d6:	d109      	bne.n	80019ec <__libc_init_array+0x24>
 80019d8:	f000 f81a 	bl	8001a10 <_init>
 80019dc:	2500      	movs	r5, #0
 80019de:	4e0a      	ldr	r6, [pc, #40]	; (8001a08 <__libc_init_array+0x40>)
 80019e0:	4c0a      	ldr	r4, [pc, #40]	; (8001a0c <__libc_init_array+0x44>)
 80019e2:	1ba4      	subs	r4, r4, r6
 80019e4:	10a4      	asrs	r4, r4, #2
 80019e6:	42a5      	cmp	r5, r4
 80019e8:	d105      	bne.n	80019f6 <__libc_init_array+0x2e>
 80019ea:	bd70      	pop	{r4, r5, r6, pc}
 80019ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019f0:	4798      	blx	r3
 80019f2:	3501      	adds	r5, #1
 80019f4:	e7ee      	b.n	80019d4 <__libc_init_array+0xc>
 80019f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019fa:	4798      	blx	r3
 80019fc:	3501      	adds	r5, #1
 80019fe:	e7f2      	b.n	80019e6 <__libc_init_array+0x1e>
 8001a00:	08001a5c 	.word	0x08001a5c
 8001a04:	08001a5c 	.word	0x08001a5c
 8001a08:	08001a5c 	.word	0x08001a5c
 8001a0c:	08001a60 	.word	0x08001a60

08001a10 <_init>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr

08001a1c <_fini>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	bf00      	nop
 8001a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a22:	bc08      	pop	{r3}
 8001a24:	469e      	mov	lr, r3
 8001a26:	4770      	bx	lr
