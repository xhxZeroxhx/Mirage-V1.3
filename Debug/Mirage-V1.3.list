
Mirage-V1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ef4  08001ef4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001ef4  08001ef4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ef4  08001ef4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ef4  08001ef4  00011ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ef8  08001ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  08001f0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08001f0c  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151a5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002664  00000000  00000000  000351de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000905d  00000000  00000000  00037842  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cc8  00000000  00000000  000408a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c68  00000000  00000000  00041568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00016087  00000000  00000000  000421d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000afc9  00000000  00000000  00058257  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000736f4  00000000  00000000  00063220  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d6914  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002198  00000000  00000000  000d6990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001ea8 	.word	0x08001ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001ea8 	.word	0x08001ea8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f843 	bl	8000204 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b05      	ldr	r3, [pc, #20]	; (8000194 <HAL_InitTick+0x48>)
 8000180:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008
 8000194:	20000004 	.word	0x20000004

08000198 <HAL_Init>:
{
 8000198:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019a:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
 800019c:	6813      	ldr	r3, [r2, #0]
 800019e:	f043 0310 	orr.w	r3, r3, #16
 80001a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a4:	2003      	movs	r0, #3
 80001a6:	f000 f81b 	bl	80001e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f7ff ffce 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001b0:	f001 fca6 	bl	8001b00 <HAL_MspInit>
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <HAL_IncTick+0x10>)
 80001be:	6811      	ldr	r1, [r2, #0]
 80001c0:	4b03      	ldr	r3, [pc, #12]	; (80001d0 <HAL_IncTick+0x14>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	440b      	add	r3, r1
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088
 80001d0:	20000000 	.word	0x20000000

080001d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d4:	4b01      	ldr	r3, [pc, #4]	; (80001dc <HAL_GetTick+0x8>)
 80001d6:	6818      	ldr	r0, [r3, #0]
}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	20000088 	.word	0x20000088

080001e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	4a07      	ldr	r2, [pc, #28]	; (8000200 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80001e2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e8:	041b      	lsls	r3, r3, #16
 80001ea:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ec:	0200      	lsls	r0, r0, #8
 80001ee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001f2:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80001f4:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80001f8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80001fc:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80001fe:	4770      	bx	lr
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000204:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <HAL_NVIC_SetPriority+0x60>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020e:	f1c3 0407 	rsb	r4, r3, #7
 8000212:	2c04      	cmp	r4, #4
 8000214:	bf28      	it	cs
 8000216:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000218:	1d1d      	adds	r5, r3, #4
 800021a:	2d06      	cmp	r5, #6
 800021c:	d918      	bls.n	8000250 <HAL_NVIC_SetPriority+0x4c>
 800021e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	f04f 35ff 	mov.w	r5, #4294967295
 8000224:	fa05 f404 	lsl.w	r4, r5, r4
 8000228:	ea21 0104 	bic.w	r1, r1, r4
 800022c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800022e:	fa05 f303 	lsl.w	r3, r5, r3
 8000232:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000236:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
 800023a:	db0b      	blt.n	8000254 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023c:	0109      	lsls	r1, r1, #4
 800023e:	b2c9      	uxtb	r1, r1
 8000240:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000244:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000248:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800024c:	bc30      	pop	{r4, r5}
 800024e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000250:	2300      	movs	r3, #0
 8000252:	e7e5      	b.n	8000220 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000254:	f000 000f 	and.w	r0, r0, #15
 8000258:	0109      	lsls	r1, r1, #4
 800025a:	b2c9      	uxtb	r1, r1
 800025c:	4b02      	ldr	r3, [pc, #8]	; (8000268 <HAL_NVIC_SetPriority+0x64>)
 800025e:	5419      	strb	r1, [r3, r0]
 8000260:	e7f4      	b.n	800024c <HAL_NVIC_SetPriority+0x48>
 8000262:	bf00      	nop
 8000264:	e000ed00 	.word	0xe000ed00
 8000268:	e000ed14 	.word	0xe000ed14

0800026c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800026c:	f000 021f 	and.w	r2, r0, #31
 8000270:	0940      	lsrs	r0, r0, #5
 8000272:	2301      	movs	r3, #1
 8000274:	4093      	lsls	r3, r2
 8000276:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_NVIC_EnableIRQ+0x14>)
 8000278:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
 8000292:	21f0      	movs	r1, #240	; 0xf0
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
 800029a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80002b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002b2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d003      	beq.n	80002c2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002ba:	2304      	movs	r3, #4
 80002bc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002be:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80002c0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002c2:	6802      	ldr	r2, [r0, #0]
 80002c4:	6813      	ldr	r3, [r2, #0]
 80002c6:	f023 030e 	bic.w	r3, r3, #14
 80002ca:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80002cc:	6802      	ldr	r2, [r0, #0]
 80002ce:	6813      	ldr	r3, [r2, #0]
 80002d0:	f023 0301 	bic.w	r3, r3, #1
 80002d4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002d6:	6803      	ldr	r3, [r0, #0]
 80002d8:	4a19      	ldr	r2, [pc, #100]	; (8000340 <HAL_DMA_Abort_IT+0x90>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d014      	beq.n	8000308 <HAL_DMA_Abort_IT+0x58>
 80002de:	3214      	adds	r2, #20
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d01f      	beq.n	8000324 <HAL_DMA_Abort_IT+0x74>
 80002e4:	3214      	adds	r2, #20
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d01e      	beq.n	8000328 <HAL_DMA_Abort_IT+0x78>
 80002ea:	3214      	adds	r2, #20
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d01e      	beq.n	800032e <HAL_DMA_Abort_IT+0x7e>
 80002f0:	3214      	adds	r2, #20
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d01e      	beq.n	8000334 <HAL_DMA_Abort_IT+0x84>
 80002f6:	3214      	adds	r2, #20
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d002      	beq.n	8000302 <HAL_DMA_Abort_IT+0x52>
 80002fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000300:	e003      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000302:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000306:	e000      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000308:	2201      	movs	r2, #1
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_DMA_Abort_IT+0x94>)
 800030c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800030e:	2301      	movs	r3, #1
 8000310:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000314:	2300      	movs	r3, #0
 8000316:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800031a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800031c:	b16b      	cbz	r3, 800033a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 800031e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000320:	2000      	movs	r0, #0
 8000322:	e7cd      	b.n	80002c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000324:	2210      	movs	r2, #16
 8000326:	e7f0      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800032c:	e7ed      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 800032e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000332:	e7ea      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
 8000334:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000338:	e7e7      	b.n	800030a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800033a:	2000      	movs	r0, #0
 800033c:	e7c0      	b.n	80002c0 <HAL_DMA_Abort_IT+0x10>
 800033e:	bf00      	nop
 8000340:	40020008 	.word	0x40020008
 8000344:	40020000 	.word	0x40020000

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000348:	b4f0      	push	{r4, r5, r6, r7}
 800034a:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800034c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800034e:	4635      	mov	r5, r6
 8000350:	e0a1      	b.n	8000496 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000352:	2c00      	cmp	r4, #0
 8000354:	d059      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 8000356:	2c01      	cmp	r4, #1
 8000358:	d100      	bne.n	800035c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800035a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800035c:	2bff      	cmp	r3, #255	; 0xff
 800035e:	d868      	bhi.n	8000432 <HAL_GPIO_Init+0xea>
 8000360:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000362:	2bff      	cmp	r3, #255	; 0xff
 8000364:	d868      	bhi.n	8000438 <HAL_GPIO_Init+0xf0>
 8000366:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000368:	f8dc 2000 	ldr.w	r2, [ip]
 800036c:	270f      	movs	r7, #15
 800036e:	40a7      	lsls	r7, r4
 8000370:	ea22 0207 	bic.w	r2, r2, r7
 8000374:	fa06 f404 	lsl.w	r4, r6, r4
 8000378:	4322      	orrs	r2, r4
 800037a:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800037e:	684a      	ldr	r2, [r1, #4]
 8000380:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000384:	f000 8086 	beq.w	8000494 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000388:	4a5e      	ldr	r2, [pc, #376]	; (8000504 <HAL_GPIO_Init+0x1bc>)
 800038a:	6994      	ldr	r4, [r2, #24]
 800038c:	f044 0401 	orr.w	r4, r4, #1
 8000390:	6194      	str	r4, [r2, #24]
 8000392:	6992      	ldr	r2, [r2, #24]
 8000394:	f002 0201 	and.w	r2, r2, #1
 8000398:	9201      	str	r2, [sp, #4]
 800039a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800039c:	08ac      	lsrs	r4, r5, #2
 800039e:	1ca7      	adds	r7, r4, #2
 80003a0:	4a59      	ldr	r2, [pc, #356]	; (8000508 <HAL_GPIO_Init+0x1c0>)
 80003a2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003a6:	f005 0703 	and.w	r7, r5, #3
 80003aa:	00bf      	lsls	r7, r7, #2
 80003ac:	f04f 0c0f 	mov.w	ip, #15
 80003b0:	fa0c fc07 	lsl.w	ip, ip, r7
 80003b4:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003b8:	4a54      	ldr	r2, [pc, #336]	; (800050c <HAL_GPIO_Init+0x1c4>)
 80003ba:	4290      	cmp	r0, r2
 80003bc:	d042      	beq.n	8000444 <HAL_GPIO_Init+0xfc>
 80003be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003c2:	4290      	cmp	r0, r2
 80003c4:	d07f      	beq.n	80004c6 <HAL_GPIO_Init+0x17e>
 80003c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003ca:	4290      	cmp	r0, r2
 80003cc:	d07d      	beq.n	80004ca <HAL_GPIO_Init+0x182>
 80003ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d034      	beq.n	8000440 <HAL_GPIO_Init+0xf8>
 80003d6:	2204      	movs	r2, #4
 80003d8:	e035      	b.n	8000446 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 80003da:	4f4d      	ldr	r7, [pc, #308]	; (8000510 <HAL_GPIO_Init+0x1c8>)
 80003dc:	42bc      	cmp	r4, r7
 80003de:	d014      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003e0:	d90b      	bls.n	80003fa <HAL_GPIO_Init+0xb2>
 80003e2:	4f4c      	ldr	r7, [pc, #304]	; (8000514 <HAL_GPIO_Init+0x1cc>)
 80003e4:	42bc      	cmp	r4, r7
 80003e6:	d010      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003e8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80003ec:	42bc      	cmp	r4, r7
 80003ee:	d00c      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 80003f0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80003f4:	42bc      	cmp	r4, r7
 80003f6:	d1b1      	bne.n	800035c <HAL_GPIO_Init+0x14>
 80003f8:	e007      	b.n	800040a <HAL_GPIO_Init+0xc2>
 80003fa:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80003fe:	42bc      	cmp	r4, r7
 8000400:	d003      	beq.n	800040a <HAL_GPIO_Init+0xc2>
 8000402:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000406:	42bc      	cmp	r4, r7
 8000408:	d1a8      	bne.n	800035c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800040a:	688c      	ldr	r4, [r1, #8]
 800040c:	b17c      	cbz	r4, 800042e <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800040e:	2c01      	cmp	r4, #1
 8000410:	d008      	beq.n	8000424 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 8000412:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000414:	2608      	movs	r6, #8
 8000416:	e7a1      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000418:	68ce      	ldr	r6, [r1, #12]
 800041a:	3608      	adds	r6, #8
          break;
 800041c:	e79e      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800041e:	68ce      	ldr	r6, [r1, #12]
 8000420:	360c      	adds	r6, #12
          break;
 8000422:	e79b      	b.n	800035c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8000424:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000426:	2608      	movs	r6, #8
 8000428:	e798      	b.n	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800042a:	2600      	movs	r6, #0
 800042c:	e796      	b.n	800035c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800042e:	2604      	movs	r6, #4
 8000430:	e794      	b.n	800035c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000432:	f100 0c04 	add.w	ip, r0, #4
 8000436:	e794      	b.n	8000362 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000438:	f1a5 0408 	sub.w	r4, r5, #8
 800043c:	00a4      	lsls	r4, r4, #2
 800043e:	e793      	b.n	8000368 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	2203      	movs	r2, #3
 8000442:	e000      	b.n	8000446 <HAL_GPIO_Init+0xfe>
 8000444:	2200      	movs	r2, #0
 8000446:	40ba      	lsls	r2, r7
 8000448:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 800044c:	3402      	adds	r4, #2
 800044e:	4f2e      	ldr	r7, [pc, #184]	; (8000508 <HAL_GPIO_Init+0x1c0>)
 8000450:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000454:	684a      	ldr	r2, [r1, #4]
 8000456:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800045a:	d038      	beq.n	80004ce <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800045c:	4c2e      	ldr	r4, [pc, #184]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800045e:	6822      	ldr	r2, [r4, #0]
 8000460:	431a      	orrs	r2, r3
 8000462:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000464:	684a      	ldr	r2, [r1, #4]
 8000466:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800046a:	d036      	beq.n	80004da <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800046c:	4c2a      	ldr	r4, [pc, #168]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800046e:	6862      	ldr	r2, [r4, #4]
 8000470:	431a      	orrs	r2, r3
 8000472:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000474:	684a      	ldr	r2, [r1, #4]
 8000476:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800047a:	d034      	beq.n	80004e6 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800047c:	4c26      	ldr	r4, [pc, #152]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800047e:	68a2      	ldr	r2, [r4, #8]
 8000480:	431a      	orrs	r2, r3
 8000482:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000484:	684a      	ldr	r2, [r1, #4]
 8000486:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800048a:	d032      	beq.n	80004f2 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800048c:	4c22      	ldr	r4, [pc, #136]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 800048e:	68e2      	ldr	r2, [r4, #12]
 8000490:	4313      	orrs	r3, r2
 8000492:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000494:	3501      	adds	r5, #1
 8000496:	2d0f      	cmp	r5, #15
 8000498:	d831      	bhi.n	80004fe <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 800049a:	2201      	movs	r2, #1
 800049c:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800049e:	680b      	ldr	r3, [r1, #0]
 80004a0:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 80004a2:	429a      	cmp	r2, r3
 80004a4:	d1f6      	bne.n	8000494 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 80004a6:	684c      	ldr	r4, [r1, #4]
 80004a8:	2c12      	cmp	r4, #18
 80004aa:	d0b8      	beq.n	800041e <HAL_GPIO_Init+0xd6>
 80004ac:	d895      	bhi.n	80003da <HAL_GPIO_Init+0x92>
 80004ae:	2c02      	cmp	r4, #2
 80004b0:	d0b2      	beq.n	8000418 <HAL_GPIO_Init+0xd0>
 80004b2:	f67f af4e 	bls.w	8000352 <HAL_GPIO_Init+0xa>
 80004b6:	2c03      	cmp	r4, #3
 80004b8:	d0b7      	beq.n	800042a <HAL_GPIO_Init+0xe2>
 80004ba:	2c11      	cmp	r4, #17
 80004bc:	f47f af4e 	bne.w	800035c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004c0:	68ce      	ldr	r6, [r1, #12]
 80004c2:	3604      	adds	r6, #4
          break;
 80004c4:	e74a      	b.n	800035c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004c6:	2201      	movs	r2, #1
 80004c8:	e7bd      	b.n	8000446 <HAL_GPIO_Init+0xfe>
 80004ca:	2202      	movs	r2, #2
 80004cc:	e7bb      	b.n	8000446 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80004ce:	4c12      	ldr	r4, [pc, #72]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004d0:	6822      	ldr	r2, [r4, #0]
 80004d2:	ea22 0203 	bic.w	r2, r2, r3
 80004d6:	6022      	str	r2, [r4, #0]
 80004d8:	e7c4      	b.n	8000464 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80004da:	4c0f      	ldr	r4, [pc, #60]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004dc:	6862      	ldr	r2, [r4, #4]
 80004de:	ea22 0203 	bic.w	r2, r2, r3
 80004e2:	6062      	str	r2, [r4, #4]
 80004e4:	e7c6      	b.n	8000474 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80004e6:	4c0c      	ldr	r4, [pc, #48]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004e8:	68a2      	ldr	r2, [r4, #8]
 80004ea:	ea22 0203 	bic.w	r2, r2, r3
 80004ee:	60a2      	str	r2, [r4, #8]
 80004f0:	e7c8      	b.n	8000484 <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80004f2:	4c09      	ldr	r4, [pc, #36]	; (8000518 <HAL_GPIO_Init+0x1d0>)
 80004f4:	68e2      	ldr	r2, [r4, #12]
 80004f6:	ea22 0303 	bic.w	r3, r2, r3
 80004fa:	60e3      	str	r3, [r4, #12]
 80004fc:	e7ca      	b.n	8000494 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 80004fe:	b002      	add	sp, #8
 8000500:	bcf0      	pop	{r4, r5, r6, r7}
 8000502:	4770      	bx	lr
 8000504:	40021000 	.word	0x40021000
 8000508:	40010000 	.word	0x40010000
 800050c:	40010800 	.word	0x40010800
 8000510:	10210000 	.word	0x10210000
 8000514:	10310000 	.word	0x10310000
 8000518:	40010400 	.word	0x40010400

0800051c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800051c:	b912      	cbnz	r2, 8000524 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800051e:	0409      	lsls	r1, r1, #16
 8000520:	6101      	str	r1, [r0, #16]
  }
}
 8000522:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000524:	6101      	str	r1, [r0, #16]
 8000526:	4770      	bx	lr

08000528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000528:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <RCC_Delay+0x24>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <RCC_Delay+0x28>)
 8000530:	fba2 2303 	umull	r2, r3, r2, r3
 8000534:	0a5b      	lsrs	r3, r3, #9
 8000536:	fb00 f003 	mul.w	r0, r0, r3
 800053a:	9001      	str	r0, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800053c:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800053e:	9b01      	ldr	r3, [sp, #4]
 8000540:	1e5a      	subs	r2, r3, #1
 8000542:	9201      	str	r2, [sp, #4]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d1f9      	bne.n	800053c <RCC_Delay+0x14>
}
 8000548:	b002      	add	sp, #8
 800054a:	4770      	bx	lr
 800054c:	20000008 	.word	0x20000008
 8000550:	10624dd3 	.word	0x10624dd3

08000554 <HAL_RCC_OscConfig>:
{
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800055a:	6803      	ldr	r3, [r0, #0]
 800055c:	f013 0f01 	tst.w	r3, #1
 8000560:	d02c      	beq.n	80005bc <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000562:	4bab      	ldr	r3, [pc, #684]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f003 030c 	and.w	r3, r3, #12
 800056a:	2b04      	cmp	r3, #4
 800056c:	d01d      	beq.n	80005aa <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800056e:	4ba8      	ldr	r3, [pc, #672]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	f003 030c 	and.w	r3, r3, #12
 8000576:	2b08      	cmp	r3, #8
 8000578:	d012      	beq.n	80005a0 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057a:	6863      	ldr	r3, [r4, #4]
 800057c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000580:	d041      	beq.n	8000606 <HAL_RCC_OscConfig+0xb2>
 8000582:	2b00      	cmp	r3, #0
 8000584:	d155      	bne.n	8000632 <HAL_RCC_OscConfig+0xde>
 8000586:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800058a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	e037      	b.n	8000610 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005a0:	4b9b      	ldr	r3, [pc, #620]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80005a8:	d0e7      	beq.n	800057a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005aa:	4b99      	ldr	r3, [pc, #612]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80005b2:	d003      	beq.n	80005bc <HAL_RCC_OscConfig+0x68>
 80005b4:	6863      	ldr	r3, [r4, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f000 81ae 	beq.w	8000918 <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	f013 0f02 	tst.w	r3, #2
 80005c2:	d076      	beq.n	80006b2 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005c4:	4b92      	ldr	r3, [pc, #584]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f013 0f0c 	tst.w	r3, #12
 80005cc:	d05f      	beq.n	800068e <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005ce:	4b90      	ldr	r3, [pc, #576]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d054      	beq.n	8000684 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005da:	6923      	ldr	r3, [r4, #16]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f000 808a 	beq.w	80006f6 <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 80005e2:	4b8c      	ldr	r3, [pc, #560]	; (8000814 <HAL_RCC_OscConfig+0x2c0>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005e8:	f7ff fdf4 	bl	80001d4 <HAL_GetTick>
 80005ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005ee:	4b88      	ldr	r3, [pc, #544]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	f013 0f02 	tst.w	r3, #2
 80005f6:	d175      	bne.n	80006e4 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005f8:	f7ff fdec 	bl	80001d4 <HAL_GetTick>
 80005fc:	1b40      	subs	r0, r0, r5
 80005fe:	2802      	cmp	r0, #2
 8000600:	d9f5      	bls.n	80005ee <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8000602:	2003      	movs	r0, #3
 8000604:	e18b      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000606:	4a82      	ldr	r2, [pc, #520]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000608:	6813      	ldr	r3, [r2, #0]
 800060a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800060e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000610:	6863      	ldr	r3, [r4, #4]
 8000612:	b343      	cbz	r3, 8000666 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000614:	f7ff fdde 	bl	80001d4 <HAL_GetTick>
 8000618:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800061a:	4b7d      	ldr	r3, [pc, #500]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000622:	d1cb      	bne.n	80005bc <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000624:	f7ff fdd6 	bl	80001d4 <HAL_GetTick>
 8000628:	1b40      	subs	r0, r0, r5
 800062a:	2864      	cmp	r0, #100	; 0x64
 800062c:	d9f5      	bls.n	800061a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800062e:	2003      	movs	r0, #3
 8000630:	e175      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000636:	d009      	beq.n	800064c <HAL_RCC_OscConfig+0xf8>
 8000638:	4b75      	ldr	r3, [pc, #468]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	e7e1      	b.n	8000610 <HAL_RCC_OscConfig+0xbc>
 800064c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000650:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	e7d4      	b.n	8000610 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8000666:	f7ff fdb5 	bl	80001d4 <HAL_GetTick>
 800066a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800066c:	4b68      	ldr	r3, [pc, #416]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000674:	d0a2      	beq.n	80005bc <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000676:	f7ff fdad 	bl	80001d4 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	2864      	cmp	r0, #100	; 0x64
 800067e:	d9f5      	bls.n	800066c <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8000680:	2003      	movs	r0, #3
 8000682:	e14c      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000684:	4b62      	ldr	r3, [pc, #392]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800068c:	d1a5      	bne.n	80005da <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800068e:	4b60      	ldr	r3, [pc, #384]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f013 0f02 	tst.w	r3, #2
 8000696:	d004      	beq.n	80006a2 <HAL_RCC_OscConfig+0x14e>
 8000698:	6923      	ldr	r3, [r4, #16]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d001      	beq.n	80006a2 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 800069e:	2001      	movs	r0, #1
 80006a0:	e13d      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006a2:	4a5b      	ldr	r2, [pc, #364]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80006a4:	6813      	ldr	r3, [r2, #0]
 80006a6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006aa:	6961      	ldr	r1, [r4, #20]
 80006ac:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006b0:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	f013 0f08 	tst.w	r3, #8
 80006b8:	d032      	beq.n	8000720 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006ba:	69a3      	ldr	r3, [r4, #24]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d05b      	beq.n	8000778 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 80006c0:	4b55      	ldr	r3, [pc, #340]	; (8000818 <HAL_RCC_OscConfig+0x2c4>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80006c6:	f7ff fd85 	bl	80001d4 <HAL_GetTick>
 80006ca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006cc:	4b50      	ldr	r3, [pc, #320]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80006ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d0:	f013 0f02 	tst.w	r3, #2
 80006d4:	d121      	bne.n	800071a <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d6:	f7ff fd7d 	bl	80001d4 <HAL_GetTick>
 80006da:	1b40      	subs	r0, r0, r5
 80006dc:	2802      	cmp	r0, #2
 80006de:	d9f5      	bls.n	80006cc <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 80006e0:	2003      	movs	r0, #3
 80006e2:	e11c      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006e4:	4a4a      	ldr	r2, [pc, #296]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80006e6:	6813      	ldr	r3, [r2, #0]
 80006e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006ec:	6961      	ldr	r1, [r4, #20]
 80006ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	e7dd      	b.n	80006b2 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 80006f6:	4b47      	ldr	r3, [pc, #284]	; (8000814 <HAL_RCC_OscConfig+0x2c0>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006fc:	f7ff fd6a 	bl	80001d4 <HAL_GetTick>
 8000700:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000702:	4b43      	ldr	r3, [pc, #268]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f013 0f02 	tst.w	r3, #2
 800070a:	d0d2      	beq.n	80006b2 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800070c:	f7ff fd62 	bl	80001d4 <HAL_GetTick>
 8000710:	1b40      	subs	r0, r0, r5
 8000712:	2802      	cmp	r0, #2
 8000714:	d9f5      	bls.n	8000702 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8000716:	2003      	movs	r0, #3
 8000718:	e101      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 800071a:	2001      	movs	r0, #1
 800071c:	f7ff ff04 	bl	8000528 <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000720:	6823      	ldr	r3, [r4, #0]
 8000722:	f013 0f04 	tst.w	r3, #4
 8000726:	f000 8097 	beq.w	8000858 <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000732:	d133      	bne.n	800079c <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000734:	4b36      	ldr	r3, [pc, #216]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800073c:	61da      	str	r2, [r3, #28]
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000748:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <HAL_RCC_OscConfig+0x2c8>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000752:	d025      	beq.n	80007a0 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000754:	68e3      	ldr	r3, [r4, #12]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d036      	beq.n	80007c8 <HAL_RCC_OscConfig+0x274>
 800075a:	2b00      	cmp	r3, #0
 800075c:	d14c      	bne.n	80007f8 <HAL_RCC_OscConfig+0x2a4>
 800075e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000762:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000766:	6a1a      	ldr	r2, [r3, #32]
 8000768:	f022 0201 	bic.w	r2, r2, #1
 800076c:	621a      	str	r2, [r3, #32]
 800076e:	6a1a      	ldr	r2, [r3, #32]
 8000770:	f022 0204 	bic.w	r2, r2, #4
 8000774:	621a      	str	r2, [r3, #32]
 8000776:	e02c      	b.n	80007d2 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <HAL_RCC_OscConfig+0x2c4>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800077e:	f7ff fd29 	bl	80001d4 <HAL_GetTick>
 8000782:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000784:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 8000786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000788:	f013 0f02 	tst.w	r3, #2
 800078c:	d0c8      	beq.n	8000720 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800078e:	f7ff fd21 	bl	80001d4 <HAL_GetTick>
 8000792:	1b40      	subs	r0, r0, r5
 8000794:	2802      	cmp	r0, #2
 8000796:	d9f5      	bls.n	8000784 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 8000798:	2003      	movs	r0, #3
 800079a:	e0c0      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 800079c:	2500      	movs	r5, #0
 800079e:	e7d4      	b.n	800074a <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007a0:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_RCC_OscConfig+0x2c8>)
 80007a2:	6813      	ldr	r3, [r2, #0]
 80007a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a8:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80007aa:	f7ff fd13 	bl	80001d4 <HAL_GetTick>
 80007ae:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_RCC_OscConfig+0x2c8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80007b8:	d1cc      	bne.n	8000754 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007ba:	f7ff fd0b 	bl	80001d4 <HAL_GetTick>
 80007be:	1b80      	subs	r0, r0, r6
 80007c0:	2864      	cmp	r0, #100	; 0x64
 80007c2:	d9f5      	bls.n	80007b0 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 80007c4:	2003      	movs	r0, #3
 80007c6:	e0aa      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c8:	4a11      	ldr	r2, [pc, #68]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80007ca:	6a13      	ldr	r3, [r2, #32]
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007d2:	68e3      	ldr	r3, [r4, #12]
 80007d4:	b373      	cbz	r3, 8000834 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 80007d6:	f7ff fcfd 	bl	80001d4 <HAL_GetTick>
 80007da:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	f013 0f02 	tst.w	r3, #2
 80007e4:	d137      	bne.n	8000856 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007e6:	f7ff fcf5 	bl	80001d4 <HAL_GetTick>
 80007ea:	1b80      	subs	r0, r0, r6
 80007ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80007f0:	4298      	cmp	r0, r3
 80007f2:	d9f3      	bls.n	80007dc <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 80007f4:	2003      	movs	r0, #3
 80007f6:	e092      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d011      	beq.n	8000820 <HAL_RCC_OscConfig+0x2cc>
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <HAL_RCC_OscConfig+0x2bc>)
 80007fe:	6a1a      	ldr	r2, [r3, #32]
 8000800:	f022 0201 	bic.w	r2, r2, #1
 8000804:	621a      	str	r2, [r3, #32]
 8000806:	6a1a      	ldr	r2, [r3, #32]
 8000808:	f022 0204 	bic.w	r2, r2, #4
 800080c:	621a      	str	r2, [r3, #32]
 800080e:	e7e0      	b.n	80007d2 <HAL_RCC_OscConfig+0x27e>
 8000810:	40021000 	.word	0x40021000
 8000814:	42420000 	.word	0x42420000
 8000818:	42420480 	.word	0x42420480
 800081c:	40007000 	.word	0x40007000
 8000820:	4b41      	ldr	r3, [pc, #260]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 8000822:	6a1a      	ldr	r2, [r3, #32]
 8000824:	f042 0204 	orr.w	r2, r2, #4
 8000828:	621a      	str	r2, [r3, #32]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	f042 0201 	orr.w	r2, r2, #1
 8000830:	621a      	str	r2, [r3, #32]
 8000832:	e7ce      	b.n	80007d2 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 8000834:	f7ff fcce 	bl	80001d4 <HAL_GetTick>
 8000838:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 800083c:	6a1b      	ldr	r3, [r3, #32]
 800083e:	f013 0f02 	tst.w	r3, #2
 8000842:	d008      	beq.n	8000856 <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000844:	f7ff fcc6 	bl	80001d4 <HAL_GetTick>
 8000848:	1b80      	subs	r0, r0, r6
 800084a:	f241 3388 	movw	r3, #5000	; 0x1388
 800084e:	4298      	cmp	r0, r3
 8000850:	d9f3      	bls.n	800083a <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 8000852:	2003      	movs	r0, #3
 8000854:	e063      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8000856:	b9e5      	cbnz	r5, 8000892 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000858:	69e3      	ldr	r3, [r4, #28]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d05e      	beq.n	800091c <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800085e:	4a32      	ldr	r2, [pc, #200]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 8000860:	6852      	ldr	r2, [r2, #4]
 8000862:	f002 020c 	and.w	r2, r2, #12
 8000866:	2a08      	cmp	r2, #8
 8000868:	d05b      	beq.n	8000922 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800086a:	2b02      	cmp	r3, #2
 800086c:	d017      	beq.n	800089e <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <HAL_RCC_OscConfig+0x3d8>)
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000874:	f7ff fcae 	bl	80001d4 <HAL_GetTick>
 8000878:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800087a:	4b2b      	ldr	r3, [pc, #172]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000882:	d047      	beq.n	8000914 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000884:	f7ff fca6 	bl	80001d4 <HAL_GetTick>
 8000888:	1b00      	subs	r0, r0, r4
 800088a:	2802      	cmp	r0, #2
 800088c:	d9f5      	bls.n	800087a <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
 8000890:	e045      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000892:	4a25      	ldr	r2, [pc, #148]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 8000894:	69d3      	ldr	r3, [r2, #28]
 8000896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	e7dc      	b.n	8000858 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <HAL_RCC_OscConfig+0x3d8>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008a4:	f7ff fc96 	bl	80001d4 <HAL_GetTick>
 80008a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008b2:	d006      	beq.n	80008c2 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008b4:	f7ff fc8e 	bl	80001d4 <HAL_GetTick>
 80008b8:	1b40      	subs	r0, r0, r5
 80008ba:	2802      	cmp	r0, #2
 80008bc:	d9f5      	bls.n	80008aa <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 80008be:	2003      	movs	r0, #3
 80008c0:	e02d      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008c2:	6a23      	ldr	r3, [r4, #32]
 80008c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c8:	d01a      	beq.n	8000900 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008ca:	4917      	ldr	r1, [pc, #92]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 80008cc:	684b      	ldr	r3, [r1, #4]
 80008ce:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80008d2:	6a22      	ldr	r2, [r4, #32]
 80008d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80008d6:	4302      	orrs	r2, r0
 80008d8:	4313      	orrs	r3, r2
 80008da:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <HAL_RCC_OscConfig+0x3d8>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fc77 	bl	80001d4 <HAL_GetTick>
 80008e6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80008f0:	d10e      	bne.n	8000910 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008f2:	f7ff fc6f 	bl	80001d4 <HAL_GetTick>
 80008f6:	1b00      	subs	r0, r0, r4
 80008f8:	2802      	cmp	r0, #2
 80008fa:	d9f5      	bls.n	80008e8 <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 80008fc:	2003      	movs	r0, #3
 80008fe:	e00e      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000900:	4a09      	ldr	r2, [pc, #36]	; (8000928 <HAL_RCC_OscConfig+0x3d4>)
 8000902:	6853      	ldr	r3, [r2, #4]
 8000904:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000908:	68a1      	ldr	r1, [r4, #8]
 800090a:	430b      	orrs	r3, r1
 800090c:	6053      	str	r3, [r2, #4]
 800090e:	e7dc      	b.n	80008ca <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8000910:	2000      	movs	r0, #0
 8000912:	e004      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
 8000914:	2000      	movs	r0, #0
 8000916:	e002      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 8000918:	2001      	movs	r0, #1
 800091a:	e000      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 800091c:	2000      	movs	r0, #0
}
 800091e:	b002      	add	sp, #8
 8000920:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
 8000924:	e7fb      	b.n	800091e <HAL_RCC_OscConfig+0x3ca>
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	42420060 	.word	0x42420060

08000930 <HAL_RCC_GetSysClockFreq>:
{
 8000930:	b410      	push	{r4}
 8000932:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000934:	4c16      	ldr	r4, [pc, #88]	; (8000990 <HAL_RCC_GetSysClockFreq+0x60>)
 8000936:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800093a:	f10d 0c18 	add.w	ip, sp, #24
 800093e:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000942:	8a23      	ldrh	r3, [r4, #16]
 8000944:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <HAL_RCC_GetSysClockFreq+0x64>)
 800094a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800094c:	f003 020c 	and.w	r2, r3, #12
 8000950:	2a08      	cmp	r2, #8
 8000952:	d11a      	bne.n	800098a <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000954:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000958:	4462      	add	r2, ip
 800095a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800095e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000962:	d105      	bne.n	8000970 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <HAL_RCC_GetSysClockFreq+0x68>)
 8000966:	fb00 f002 	mul.w	r0, r0, r2
}
 800096a:	b007      	add	sp, #28
 800096c:	bc10      	pop	{r4}
 800096e:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_RCC_GetSysClockFreq+0x64>)
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000978:	4463      	add	r3, ip
 800097a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800097e:	4807      	ldr	r0, [pc, #28]	; (800099c <HAL_RCC_GetSysClockFreq+0x6c>)
 8000980:	fb00 f002 	mul.w	r0, r0, r2
 8000984:	fbb0 f0f3 	udiv	r0, r0, r3
 8000988:	e7ef      	b.n	800096a <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800098a:	4804      	ldr	r0, [pc, #16]	; (800099c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800098c:	e7ed      	b.n	800096a <HAL_RCC_GetSysClockFreq+0x3a>
 800098e:	bf00      	nop
 8000990:	08001ec0 	.word	0x08001ec0
 8000994:	40021000 	.word	0x40021000
 8000998:	003d0900 	.word	0x003d0900
 800099c:	007a1200 	.word	0x007a1200

080009a0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009a0:	4b62      	ldr	r3, [pc, #392]	; (8000b2c <HAL_RCC_ClockConfig+0x18c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0307 	and.w	r3, r3, #7
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d20c      	bcs.n	80009c6 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009ac:	4a5f      	ldr	r2, [pc, #380]	; (8000b2c <HAL_RCC_ClockConfig+0x18c>)
 80009ae:	6813      	ldr	r3, [r2, #0]
 80009b0:	f023 0307 	bic.w	r3, r3, #7
 80009b4:	430b      	orrs	r3, r1
 80009b6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009b8:	6813      	ldr	r3, [r2, #0]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	428b      	cmp	r3, r1
 80009c0:	d001      	beq.n	80009c6 <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
}
 80009c4:	4770      	bx	lr
{
 80009c6:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009c8:	6803      	ldr	r3, [r0, #0]
 80009ca:	f013 0f02 	tst.w	r3, #2
 80009ce:	d017      	beq.n	8000a00 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80009d0:	f013 0f04 	tst.w	r3, #4
 80009d4:	d004      	beq.n	80009e0 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80009d6:	4a56      	ldr	r2, [pc, #344]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 80009d8:	6853      	ldr	r3, [r2, #4]
 80009da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80009de:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80009e0:	6803      	ldr	r3, [r0, #0]
 80009e2:	f013 0f08 	tst.w	r3, #8
 80009e6:	d004      	beq.n	80009f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80009e8:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 80009ea:	6853      	ldr	r3, [r2, #4]
 80009ec:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80009f0:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80009f2:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 80009f4:	6853      	ldr	r3, [r2, #4]
 80009f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80009fa:	6884      	ldr	r4, [r0, #8]
 80009fc:	4323      	orrs	r3, r4
 80009fe:	6053      	str	r3, [r2, #4]
 8000a00:	460d      	mov	r5, r1
 8000a02:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a04:	6803      	ldr	r3, [r0, #0]
 8000a06:	f013 0f01 	tst.w	r3, #1
 8000a0a:	d052      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a0c:	6843      	ldr	r3, [r0, #4]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d023      	beq.n	8000a5a <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d028      	beq.n	8000a68 <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a16:	4a46      	ldr	r2, [pc, #280]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a18:	6812      	ldr	r2, [r2, #0]
 8000a1a:	f012 0f02 	tst.w	r2, #2
 8000a1e:	f000 8082 	beq.w	8000b26 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a22:	4943      	ldr	r1, [pc, #268]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a24:	684a      	ldr	r2, [r1, #4]
 8000a26:	f022 0203 	bic.w	r2, r2, #3
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000a2e:	f7ff fbd1 	bl	80001d4 <HAL_GetTick>
 8000a32:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a34:	6863      	ldr	r3, [r4, #4]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d01d      	beq.n	8000a76 <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a3a:	2b02      	cmp	r3, #2
 8000a3c:	d02a      	beq.n	8000a94 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f013 0f0c 	tst.w	r3, #12
 8000a46:	d034      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a48:	f7ff fbc4 	bl	80001d4 <HAL_GetTick>
 8000a4c:	1b80      	subs	r0, r0, r6
 8000a4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a52:	4298      	cmp	r0, r3
 8000a54:	d9f3      	bls.n	8000a3e <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 8000a56:	2003      	movs	r0, #3
 8000a58:	e064      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000a62:	d1de      	bne.n	8000a22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a64:	2001      	movs	r0, #1
 8000a66:	e05d      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000a70:	d1d7      	bne.n	8000a22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8000a72:	2001      	movs	r0, #1
 8000a74:	e056      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a76:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f003 030c 	and.w	r3, r3, #12
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	d017      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a82:	f7ff fba7 	bl	80001d4 <HAL_GetTick>
 8000a86:	1b80      	subs	r0, r0, r6
 8000a88:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a8c:	4298      	cmp	r0, r3
 8000a8e:	d9f2      	bls.n	8000a76 <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8000a90:	2003      	movs	r0, #3
 8000a92:	e047      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a94:	4b26      	ldr	r3, [pc, #152]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 030c 	and.w	r3, r3, #12
 8000a9c:	2b08      	cmp	r3, #8
 8000a9e:	d008      	beq.n	8000ab2 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa0:	f7ff fb98 	bl	80001d4 <HAL_GetTick>
 8000aa4:	1b80      	subs	r0, r0, r6
 8000aa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aaa:	4298      	cmp	r0, r3
 8000aac:	d9f2      	bls.n	8000a94 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000aae:	2003      	movs	r0, #3
 8000ab0:	e038      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <HAL_RCC_ClockConfig+0x18c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	42ab      	cmp	r3, r5
 8000abc:	d90c      	bls.n	8000ad8 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000abe:	4a1b      	ldr	r2, [pc, #108]	; (8000b2c <HAL_RCC_ClockConfig+0x18c>)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f023 0307 	bic.w	r3, r3, #7
 8000ac6:	432b      	orrs	r3, r5
 8000ac8:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aca:	6813      	ldr	r3, [r2, #0]
 8000acc:	f003 0307 	and.w	r3, r3, #7
 8000ad0:	42ab      	cmp	r3, r5
 8000ad2:	d001      	beq.n	8000ad8 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	e025      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	f013 0f04 	tst.w	r3, #4
 8000ade:	d006      	beq.n	8000aee <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000ae2:	6853      	ldr	r3, [r2, #4]
 8000ae4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae8:	68e1      	ldr	r1, [r4, #12]
 8000aea:	430b      	orrs	r3, r1
 8000aec:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	f013 0f08 	tst.w	r3, #8
 8000af4:	d007      	beq.n	8000b06 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000af8:	6853      	ldr	r3, [r2, #4]
 8000afa:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000afe:	6921      	ldr	r1, [r4, #16]
 8000b00:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b04:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b06:	f7ff ff13 	bl	8000930 <HAL_RCC_GetSysClockFreq>
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_RCC_ClockConfig+0x190>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <HAL_RCC_ClockConfig+0x194>)
 8000b14:	5cd3      	ldrb	r3, [r2, r3]
 8000b16:	40d8      	lsrs	r0, r3
 8000b18:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <HAL_RCC_ClockConfig+0x198>)
 8000b1a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff fb15 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000b22:	2000      	movs	r0, #0
}
 8000b24:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000b26:	2001      	movs	r0, #1
 8000b28:	e7fc      	b.n	8000b24 <HAL_RCC_ClockConfig+0x184>
 8000b2a:	bf00      	nop
 8000b2c:	40022000 	.word	0x40022000
 8000b30:	40021000 	.word	0x40021000
 8000b34:	08001edc 	.word	0x08001edc
 8000b38:	20000008 	.word	0x20000008

08000b3c <HAL_RCC_GetHCLKFreq>:
}
 8000b3c:	4b01      	ldr	r3, [pc, #4]	; (8000b44 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b3e:	6818      	ldr	r0, [r3, #0]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000008 	.word	0x20000008

08000b48 <HAL_RCC_GetPCLK1Freq>:
{
 8000b48:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b4a:	f7ff fff7 	bl	8000b3c <HAL_RCC_GetHCLKFreq>
 8000b4e:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b56:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
}    
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	bd08      	pop	{r3, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000
 8000b64:	08001eec 	.word	0x08001eec

08000b68 <HAL_RCC_GetPCLK2Freq>:
{
 8000b68:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b6a:	f7ff ffe7 	bl	8000b3c <HAL_RCC_GetHCLKFreq>
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b78:	5cd3      	ldrb	r3, [r2, r3]
} 
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	bd08      	pop	{r3, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	08001eec 	.word	0x08001eec

08000b88 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	460f      	mov	r7, r1
 8000b8e:	4616      	mov	r6, r2
 8000b90:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000b92:	e03b      	b.n	8000c0c <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8000b94:	b12c      	cbz	r4, 8000ba2 <SPI_WaitFlagStateUntilTimeout+0x1a>
 8000b96:	f7ff fb1d 	bl	80001d4 <HAL_GetTick>
 8000b9a:	9b06      	ldr	r3, [sp, #24]
 8000b9c:	1ac0      	subs	r0, r0, r3
 8000b9e:	42a0      	cmp	r0, r4
 8000ba0:	d334      	bcc.n	8000c0c <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000ba2:	682a      	ldr	r2, [r5, #0]
 8000ba4:	6853      	ldr	r3, [r2, #4]
 8000ba6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000baa:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bac:	686b      	ldr	r3, [r5, #4]
 8000bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000bb2:	d00b      	beq.n	8000bcc <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000bb4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bba:	d014      	beq.n	8000be6 <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8000bc8:	2003      	movs	r0, #3
 8000bca:	e027      	b.n	8000c1c <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000bcc:	68ab      	ldr	r3, [r5, #8]
 8000bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bd2:	d002      	beq.n	8000bda <SPI_WaitFlagStateUntilTimeout+0x52>
 8000bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bd8:	d1ec      	bne.n	8000bb4 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8000bda:	682a      	ldr	r2, [r5, #0]
 8000bdc:	6813      	ldr	r3, [r2, #0]
 8000bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	e7e6      	b.n	8000bb4 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8000be6:	682a      	ldr	r2, [r5, #0]
 8000be8:	6813      	ldr	r3, [r2, #0]
 8000bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bee:	041b      	lsls	r3, r3, #16
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	682a      	ldr	r2, [r5, #0]
 8000bf6:	6813      	ldr	r3, [r2, #0]
 8000bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	e7dd      	b.n	8000bbc <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c00:	2301      	movs	r3, #1
 8000c02:	42b3      	cmp	r3, r6
 8000c04:	d009      	beq.n	8000c1a <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8000c06:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000c0a:	d1c3      	bne.n	8000b94 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8000c0c:	682b      	ldr	r3, [r5, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	ea37 0303 	bics.w	r3, r7, r3
 8000c14:	d0f4      	beq.n	8000c00 <SPI_WaitFlagStateUntilTimeout+0x78>
 8000c16:	2300      	movs	r3, #0
 8000c18:	e7f3      	b.n	8000c02 <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8000c1a:	2000      	movs	r0, #0
}
 8000c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000c1e <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000c1e:	b510      	push	{r4, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000c24:	9200      	str	r2, [sp, #0]
 8000c26:	460b      	mov	r3, r1
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2180      	movs	r1, #128	; 0x80
 8000c2c:	f7ff ffac 	bl	8000b88 <SPI_WaitFlagStateUntilTimeout>
 8000c30:	4603      	mov	r3, r0
 8000c32:	b910      	cbnz	r0, 8000c3a <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	b002      	add	sp, #8
 8000c38:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e7f6      	b.n	8000c34 <SPI_CheckFlag_BSY+0x16>

08000c46 <HAL_SPI_Transmit>:
{
 8000c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000c4e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	f000 80c8 	beq.w	8000de8 <HAL_SPI_Transmit+0x1a2>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	460d      	mov	r5, r1
 8000c5c:	4690      	mov	r8, r2
 8000c5e:	2301      	movs	r3, #1
 8000c60:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000c64:	f7ff fab6 	bl	80001d4 <HAL_GetTick>
 8000c68:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8000c6a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d00a      	beq.n	8000c8a <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8000c74:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8000c76:	2201      	movs	r2, #1
 8000c78:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	b004      	add	sp, #16
 8000c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80a4 	beq.w	8000dd8 <HAL_SPI_Transmit+0x192>
 8000c90:	f1b8 0f00 	cmp.w	r8, #0
 8000c94:	f000 80a2 	beq.w	8000ddc <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000ca2:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8000ca4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8000ca8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000cac:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8000cae:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000cb0:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000cb2:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000cb4:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000cb6:	68a3      	ldr	r3, [r4, #8]
 8000cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cbc:	d01b      	beq.n	8000cf6 <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000cc6:	d103      	bne.n	8000cd0 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cce:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000cd0:	68e3      	ldr	r3, [r4, #12]
 8000cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cd6:	d014      	beq.n	8000d02 <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	b11b      	cbz	r3, 8000ce4 <HAL_SPI_Transmit+0x9e>
 8000cdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d13e      	bne.n	8000d62 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000cea:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8000cec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000cf4:	e035      	b.n	8000d62 <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	6813      	ldr	r3, [r2, #0]
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfe:	6013      	str	r3, [r2, #0]
 8000d00:	e7dd      	b.n	8000cbe <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000d02:	6863      	ldr	r3, [r4, #4]
 8000d04:	b11b      	cbz	r3, 8000d0e <HAL_SPI_Transmit+0xc8>
 8000d06:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d10d      	bne.n	8000d2a <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8000d0e:	6823      	ldr	r3, [r4, #0]
 8000d10:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d14:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000d16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d1e:	e004      	b.n	8000d2a <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d05d      	beq.n	8000de0 <HAL_SPI_Transmit+0x19a>
 8000d24:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000d28:	d10f      	bne.n	8000d4a <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8000d2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	b37b      	cbz	r3, 8000d90 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d30:	6823      	ldr	r3, [r4, #0]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	f012 0f02 	tst.w	r2, #2
 8000d38:	d0f2      	beq.n	8000d20 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8000d3a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000d3e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8000d40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d42:	3b01      	subs	r3, #1
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d48:	e7ef      	b.n	8000d2a <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d4a:	f7ff fa43 	bl	80001d4 <HAL_GetTick>
 8000d4e:	1bc0      	subs	r0, r0, r7
 8000d50:	42b0      	cmp	r0, r6
 8000d52:	d3ea      	bcc.n	8000d2a <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e78e      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d043      	beq.n	8000de4 <HAL_SPI_Transmit+0x19e>
 8000d5c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8000d60:	d10f      	bne.n	8000d82 <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8000d62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b19b      	cbz	r3, 8000d90 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	689a      	ldr	r2, [r3, #8]
 8000d6c:	f012 0f02 	tst.w	r2, #2
 8000d70:	d0f2      	beq.n	8000d58 <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8000d72:	f815 2b01 	ldrb.w	r2, [r5], #1
 8000d76:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8000d78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	86e3      	strh	r3, [r4, #54]	; 0x36
 8000d80:	e7ef      	b.n	8000d62 <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8000d82:	f7ff fa27 	bl	80001d4 <HAL_GetTick>
 8000d86:	1bc0      	subs	r0, r0, r7
 8000d88:	42b0      	cmp	r0, r6
 8000d8a:	d3ea      	bcc.n	8000d62 <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e772      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8000d90:	9700      	str	r7, [sp, #0]
 8000d92:	4633      	mov	r3, r6
 8000d94:	2201      	movs	r2, #1
 8000d96:	2102      	movs	r1, #2
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f7ff fef5 	bl	8000b88 <SPI_WaitFlagStateUntilTimeout>
 8000d9e:	b108      	cbz	r0, 8000da4 <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e768      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8000da4:	463a      	mov	r2, r7
 8000da6:	4631      	mov	r1, r6
 8000da8:	4620      	mov	r0, r4
 8000daa:	f7ff ff38 	bl	8000c1e <SPI_CheckFlag_BSY>
 8000dae:	4603      	mov	r3, r0
 8000db0:	b118      	cbz	r0, 8000dba <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000db2:	2320      	movs	r3, #32
 8000db4:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
    goto error;
 8000db8:	e75d      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000dba:	68a2      	ldr	r2, [r4, #8]
 8000dbc:	b932      	cbnz	r2, 8000dcc <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000dbe:	9203      	str	r2, [sp, #12]
 8000dc0:	6822      	ldr	r2, [r4, #0]
 8000dc2:	68d1      	ldr	r1, [r2, #12]
 8000dc4:	9103      	str	r1, [sp, #12]
 8000dc6:	6892      	ldr	r2, [r2, #8]
 8000dc8:	9203      	str	r2, [sp, #12]
 8000dca:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000dcc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000dce:	2a00      	cmp	r2, #0
 8000dd0:	f43f af51 	beq.w	8000c76 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e74e      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e74c      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e74a      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000de0:	2303      	movs	r3, #3
 8000de2:	e748      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e746      	b.n	8000c76 <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8000de8:	2302      	movs	r3, #2
 8000dea:	e74a      	b.n	8000c82 <HAL_SPI_Transmit+0x3c>

08000dec <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d03c      	beq.n	8000e6a <HAL_SPI_Init+0x7e>
{
 8000df0:	b510      	push	{r4, lr}
 8000df2:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000df8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d031      	beq.n	8000e64 <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e00:	2302      	movs	r3, #2
 8000e02:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e06:	6822      	ldr	r2, [r4, #0]
 8000e08:	6813      	ldr	r3, [r2, #0]
 8000e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e0e:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e10:	6863      	ldr	r3, [r4, #4]
 8000e12:	68a2      	ldr	r2, [r4, #8]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	68e2      	ldr	r2, [r4, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	6922      	ldr	r2, [r4, #16]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	6962      	ldr	r2, [r4, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	69a2      	ldr	r2, [r4, #24]
 8000e24:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	69e2      	ldr	r2, [r4, #28]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	6a22      	ldr	r2, [r4, #32]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e34:	6822      	ldr	r2, [r4, #0]
 8000e36:	430b      	orrs	r3, r1
 8000e38:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e3a:	8b63      	ldrh	r3, [r4, #26]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	430b      	orrs	r3, r1
 8000e46:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000e4c:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	69d3      	ldr	r3, [r2, #28]
 8000e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e56:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e58:	2000      	movs	r0, #0
 8000e5a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8000e62:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8000e64:	f000 fe6e 	bl	8001b44 <HAL_SPI_MspInit>
 8000e68:	e7ca      	b.n	8000e00 <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8000e6a:	2001      	movs	r0, #1
}
 8000e6c:	4770      	bx	lr

08000e6e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000e6e:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000e70:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e72:	6a04      	ldr	r4, [r0, #32]
 8000e74:	f024 0401 	bic.w	r4, r4, #1
 8000e78:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e7a:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000e7c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000e80:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000e84:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8000e88:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000e8a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e8c:	6203      	str	r3, [r0, #32]
}
 8000e8e:	bc10      	pop	{r4}
 8000e90:	4770      	bx	lr

08000e92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8000e92:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e94:	6a03      	ldr	r3, [r0, #32]
 8000e96:	f023 0310 	bic.w	r3, r3, #16
 8000e9a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e9c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e9e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000ea0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ea4:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ea8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000eac:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000eb0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000eb2:	6203      	str	r3, [r0, #32]
}
 8000eb4:	bc10      	pop	{r4}
 8000eb6:	4770      	bx	lr

08000eb8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000eb8:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ebe:	f041 0107 	orr.w	r1, r1, #7
 8000ec2:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000ec4:	6081      	str	r1, [r0, #8]
}
 8000ec6:	4770      	bx	lr

08000ec8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000ec8:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000eca:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000ecc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000ed0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000ed4:	430b      	orrs	r3, r1
 8000ed6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000ed8:	6083      	str	r3, [r0, #8]
}
 8000eda:	bc10      	pop	{r4}
 8000edc:	4770      	bx	lr

08000ede <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ede:	6802      	ldr	r2, [r0, #0]
 8000ee0:	68d3      	ldr	r3, [r2, #12]
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	6813      	ldr	r3, [r2, #0]
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000ef6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d07d      	beq.n	8000ffa <HAL_TIM_ConfigClockSource+0x104>
{
 8000efe:	b510      	push	{r4, lr}
 8000f00:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8000f02:	2301      	movs	r3, #1
 8000f04:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000f0e:	6802      	ldr	r2, [r0, #0]
 8000f10:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000f1a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f1c:	680b      	ldr	r3, [r1, #0]
 8000f1e:	2b40      	cmp	r3, #64	; 0x40
 8000f20:	d057      	beq.n	8000fd2 <HAL_TIM_ConfigClockSource+0xdc>
 8000f22:	d910      	bls.n	8000f46 <HAL_TIM_ConfigClockSource+0x50>
 8000f24:	2b70      	cmp	r3, #112	; 0x70
 8000f26:	d03e      	beq.n	8000fa6 <HAL_TIM_ConfigClockSource+0xb0>
 8000f28:	d81f      	bhi.n	8000f6a <HAL_TIM_ConfigClockSource+0x74>
 8000f2a:	2b50      	cmp	r3, #80	; 0x50
 8000f2c:	d047      	beq.n	8000fbe <HAL_TIM_ConfigClockSource+0xc8>
 8000f2e:	2b60      	cmp	r3, #96	; 0x60
 8000f30:	d132      	bne.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000f32:	68ca      	ldr	r2, [r1, #12]
 8000f34:	6849      	ldr	r1, [r1, #4]
 8000f36:	6800      	ldr	r0, [r0, #0]
 8000f38:	f7ff ffab 	bl	8000e92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000f3c:	2160      	movs	r1, #96	; 0x60
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	f7ff ffba 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000f44:	e028      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d04d      	beq.n	8000fe6 <HAL_TIM_ConfigClockSource+0xf0>
 8000f4a:	d908      	bls.n	8000f5e <HAL_TIM_ConfigClockSource+0x68>
 8000f4c:	2b20      	cmp	r3, #32
 8000f4e:	d04f      	beq.n	8000ff0 <HAL_TIM_ConfigClockSource+0xfa>
 8000f50:	2b30      	cmp	r3, #48	; 0x30
 8000f52:	d121      	bne.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8000f54:	2130      	movs	r1, #48	; 0x30
 8000f56:	6800      	ldr	r0, [r0, #0]
 8000f58:	f7ff ffae 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000f5c:	e01c      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000f5e:	b9db      	cbnz	r3, 8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8000f60:	2100      	movs	r1, #0
 8000f62:	6800      	ldr	r0, [r0, #0]
 8000f64:	f7ff ffa8 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000f68:	e016      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8000f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f6e:	d00e      	beq.n	8000f8e <HAL_TIM_ConfigClockSource+0x98>
 8000f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f74:	d110      	bne.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8000f76:	68cb      	ldr	r3, [r1, #12]
 8000f78:	684a      	ldr	r2, [r1, #4]
 8000f7a:	6889      	ldr	r1, [r1, #8]
 8000f7c:	6800      	ldr	r0, [r0, #0]
 8000f7e:	f7ff ffa3 	bl	8000ec8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f82:	6822      	ldr	r2, [r4, #0]
 8000f84:	6893      	ldr	r3, [r2, #8]
 8000f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8a:	6093      	str	r3, [r2, #8]
    break;
 8000f8c:	e004      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f8e:	6802      	ldr	r2, [r0, #0]
 8000f90:	6893      	ldr	r3, [r2, #8]
 8000f92:	f023 0307 	bic.w	r3, r3, #7
 8000f96:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000fa4:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8000fa6:	68cb      	ldr	r3, [r1, #12]
 8000fa8:	684a      	ldr	r2, [r1, #4]
 8000faa:	6889      	ldr	r1, [r1, #8]
 8000fac:	6800      	ldr	r0, [r0, #0]
 8000fae:	f7ff ff8b 	bl	8000ec8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000fb2:	6822      	ldr	r2, [r4, #0]
 8000fb4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000fb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8000fba:	6093      	str	r3, [r2, #8]
    break;
 8000fbc:	e7ec      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fbe:	68ca      	ldr	r2, [r1, #12]
 8000fc0:	6849      	ldr	r1, [r1, #4]
 8000fc2:	6800      	ldr	r0, [r0, #0]
 8000fc4:	f7ff ff53 	bl	8000e6e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000fc8:	2150      	movs	r1, #80	; 0x50
 8000fca:	6820      	ldr	r0, [r4, #0]
 8000fcc:	f7ff ff74 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000fd0:	e7e2      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000fd2:	68ca      	ldr	r2, [r1, #12]
 8000fd4:	6849      	ldr	r1, [r1, #4]
 8000fd6:	6800      	ldr	r0, [r0, #0]
 8000fd8:	f7ff ff49 	bl	8000e6e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000fdc:	2140      	movs	r1, #64	; 0x40
 8000fde:	6820      	ldr	r0, [r4, #0]
 8000fe0:	f7ff ff6a 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000fe4:	e7d8      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8000fe6:	2110      	movs	r1, #16
 8000fe8:	6800      	ldr	r0, [r0, #0]
 8000fea:	f7ff ff65 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000fee:	e7d3      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8000ff0:	2120      	movs	r1, #32
 8000ff2:	6800      	ldr	r0, [r0, #0]
 8000ff4:	f7ff ff60 	bl	8000eb8 <TIM_ITRx_SetConfig>
    break;
 8000ff8:	e7ce      	b.n	8000f98 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8000ffa:	2002      	movs	r0, #2
}
 8000ffc:	4770      	bx	lr

08000ffe <HAL_TIM_OC_DelayElapsedCallback>:
}
 8000ffe:	4770      	bx	lr

08001000 <HAL_TIM_IC_CaptureCallback>:
}
 8001000:	4770      	bx	lr

08001002 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001002:	4770      	bx	lr

08001004 <HAL_TIM_TriggerCallback>:
}
 8001004:	4770      	bx	lr

08001006 <HAL_TIM_IRQHandler>:
{
 8001006:	b510      	push	{r4, lr}
 8001008:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800100a:	6803      	ldr	r3, [r0, #0]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	f012 0f02 	tst.w	r2, #2
 8001012:	d011      	beq.n	8001038 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	f012 0f02 	tst.w	r2, #2
 800101a:	d00d      	beq.n	8001038 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800101c:	f06f 0202 	mvn.w	r2, #2
 8001020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001022:	2301      	movs	r3, #1
 8001024:	7703      	strb	r3, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f013 0f03 	tst.w	r3, #3
 800102e:	d070      	beq.n	8001112 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001030:	f7ff ffe6 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001034:	2300      	movs	r3, #0
 8001036:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001038:	6823      	ldr	r3, [r4, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	f012 0f04 	tst.w	r2, #4
 8001040:	d012      	beq.n	8001068 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001042:	68da      	ldr	r2, [r3, #12]
 8001044:	f012 0f04 	tst.w	r2, #4
 8001048:	d00e      	beq.n	8001068 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800104a:	f06f 0204 	mvn.w	r2, #4
 800104e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001050:	2302      	movs	r3, #2
 8001052:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f413 7f40 	tst.w	r3, #768	; 0x300
 800105c:	d05f      	beq.n	800111e <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800105e:	4620      	mov	r0, r4
 8001060:	f7ff ffce 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001064:	2300      	movs	r3, #0
 8001066:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	f012 0f08 	tst.w	r2, #8
 8001070:	d012      	beq.n	8001098 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	f012 0f08 	tst.w	r2, #8
 8001078:	d00e      	beq.n	8001098 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800107a:	f06f 0208 	mvn.w	r2, #8
 800107e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001080:	2304      	movs	r3, #4
 8001082:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f013 0f03 	tst.w	r3, #3
 800108c:	d04e      	beq.n	800112c <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff ffb6 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001094:	2300      	movs	r3, #0
 8001096:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	691a      	ldr	r2, [r3, #16]
 800109c:	f012 0f10 	tst.w	r2, #16
 80010a0:	d012      	beq.n	80010c8 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	f012 0f10 	tst.w	r2, #16
 80010a8:	d00e      	beq.n	80010c8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010aa:	f06f 0210 	mvn.w	r2, #16
 80010ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80010b0:	2308      	movs	r3, #8
 80010b2:	7723      	strb	r3, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80010bc:	d03d      	beq.n	800113a <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff ff9e 	bl	8001000 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c4:	2300      	movs	r3, #0
 80010c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	f012 0f01 	tst.w	r2, #1
 80010d0:	d003      	beq.n	80010da <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	f012 0f01 	tst.w	r2, #1
 80010d8:	d136      	bne.n	8001148 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80010e2:	d003      	beq.n	80010ec <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80010ea:	d134      	bne.n	8001156 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	691a      	ldr	r2, [r3, #16]
 80010f0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010f4:	d003      	beq.n	80010fe <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80010fc:	d132      	bne.n	8001164 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010fe:	6823      	ldr	r3, [r4, #0]
 8001100:	691a      	ldr	r2, [r3, #16]
 8001102:	f012 0f20 	tst.w	r2, #32
 8001106:	d003      	beq.n	8001110 <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	f012 0f20 	tst.w	r2, #32
 800110e:	d130      	bne.n	8001172 <HAL_TIM_IRQHandler+0x16c>
}
 8001110:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001112:	f7ff ff74 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001116:	4620      	mov	r0, r4
 8001118:	f7ff ff73 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 800111c:	e78a      	b.n	8001034 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff ff6d 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff ff6c 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 800112a:	e79b      	b.n	8001064 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff ff66 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001132:	4620      	mov	r0, r4
 8001134:	f7ff ff65 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 8001138:	e7ac      	b.n	8001094 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800113a:	4620      	mov	r0, r4
 800113c:	f7ff ff5f 	bl	8000ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff5e 	bl	8001002 <HAL_TIM_PWM_PulseFinishedCallback>
 8001146:	e7bd      	b.n	80010c4 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001148:	f06f 0201 	mvn.w	r2, #1
 800114c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800114e:	4620      	mov	r0, r4
 8001150:	f000 fcb8 	bl	8001ac4 <HAL_TIM_PeriodElapsedCallback>
 8001154:	e7c1      	b.n	80010da <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001156:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800115a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800115c:	4620      	mov	r0, r4
 800115e:	f000 f88c 	bl	800127a <HAL_TIMEx_BreakCallback>
 8001162:	e7c3      	b.n	80010ec <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001164:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001168:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800116a:	4620      	mov	r0, r4
 800116c:	f7ff ff4a 	bl	8001004 <HAL_TIM_TriggerCallback>
 8001170:	e7c5      	b.n	80010fe <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001172:	f06f 0220 	mvn.w	r2, #32
 8001176:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001178:	4620      	mov	r0, r4
 800117a:	f000 f87d 	bl	8001278 <HAL_TIMEx_CommutationCallback>
}
 800117e:	e7c7      	b.n	8001110 <HAL_TIM_IRQHandler+0x10a>

08001180 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001180:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001182:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <TIM_Base_SetConfig+0x70>)
 8001184:	4290      	cmp	r0, r2
 8001186:	d00a      	beq.n	800119e <TIM_Base_SetConfig+0x1e>
 8001188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800118c:	d007      	beq.n	800119e <TIM_Base_SetConfig+0x1e>
 800118e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001192:	4290      	cmp	r0, r2
 8001194:	d003      	beq.n	800119e <TIM_Base_SetConfig+0x1e>
 8001196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800119a:	4290      	cmp	r0, r2
 800119c:	d103      	bne.n	80011a6 <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800119e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011a2:	684a      	ldr	r2, [r1, #4]
 80011a4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <TIM_Base_SetConfig+0x70>)
 80011a8:	4290      	cmp	r0, r2
 80011aa:	d00a      	beq.n	80011c2 <TIM_Base_SetConfig+0x42>
 80011ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011b0:	d007      	beq.n	80011c2 <TIM_Base_SetConfig+0x42>
 80011b2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80011b6:	4290      	cmp	r0, r2
 80011b8:	d003      	beq.n	80011c2 <TIM_Base_SetConfig+0x42>
 80011ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011be:	4290      	cmp	r0, r2
 80011c0:	d103      	bne.n	80011ca <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80011c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011c6:	68ca      	ldr	r2, [r1, #12]
 80011c8:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 80011ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80011ce:	694a      	ldr	r2, [r1, #20]
 80011d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80011d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d4:	688b      	ldr	r3, [r1, #8]
 80011d6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <TIM_Base_SetConfig+0x70>)
 80011de:	4298      	cmp	r0, r3
 80011e0:	d002      	beq.n	80011e8 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 80011e2:	2301      	movs	r3, #1
 80011e4:	6143      	str	r3, [r0, #20]
}
 80011e6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80011e8:	690b      	ldr	r3, [r1, #16]
 80011ea:	6303      	str	r3, [r0, #48]	; 0x30
 80011ec:	e7f9      	b.n	80011e2 <TIM_Base_SetConfig+0x62>
 80011ee:	bf00      	nop
 80011f0:	40012c00 	.word	0x40012c00

080011f4 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80011f4:	b1a8      	cbz	r0, 8001222 <HAL_TIM_Base_Init+0x2e>
{
 80011f6:	b510      	push	{r4, lr}
 80011f8:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80011fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80011fe:	b15b      	cbz	r3, 8001218 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8001200:	2302      	movs	r3, #2
 8001202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001206:	1d21      	adds	r1, r4, #4
 8001208:	6820      	ldr	r0, [r4, #0]
 800120a:	f7ff ffb9 	bl	8001180 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800120e:	2301      	movs	r3, #1
 8001210:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001214:	2000      	movs	r0, #0
}
 8001216:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800121c:	f000 fcc4 	bl	8001ba8 <HAL_TIM_Base_MspInit>
 8001220:	e7ee      	b.n	8001200 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001222:	2001      	movs	r0, #1
}
 8001224:	4770      	bx	lr

08001226 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001226:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800122a:	2b01      	cmp	r3, #1
 800122c:	d022      	beq.n	8001274 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 800122e:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8001230:	2201      	movs	r2, #1
 8001232:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001236:	2302      	movs	r3, #2
 8001238:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800123c:	6804      	ldr	r4, [r0, #0]
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001244:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001246:	6804      	ldr	r4, [r0, #0]
 8001248:	6863      	ldr	r3, [r4, #4]
 800124a:	680d      	ldr	r5, [r1, #0]
 800124c:	432b      	orrs	r3, r5
 800124e:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001250:	6804      	ldr	r4, [r0, #0]
 8001252:	68a3      	ldr	r3, [r4, #8]
 8001254:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001258:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800125a:	6804      	ldr	r4, [r0, #0]
 800125c:	68a3      	ldr	r3, [r4, #8]
 800125e:	6849      	ldr	r1, [r1, #4]
 8001260:	430b      	orrs	r3, r1
 8001262:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001264:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001268:	2300      	movs	r3, #0
 800126a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800126e:	4618      	mov	r0, r3
}
 8001270:	bc30      	pop	{r4, r5}
 8001272:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001274:	2002      	movs	r0, #2
}
 8001276:	4770      	bx	lr

08001278 <HAL_TIMEx_CommutationCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001278:	4770      	bx	lr

0800127a <HAL_TIMEx_BreakCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800127a:	4770      	bx	lr

0800127c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	68d3      	ldr	r3, [r2, #12]
 8001280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001284:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001286:	6802      	ldr	r2, [r0, #0]
 8001288:	6953      	ldr	r3, [r2, #20]
 800128a:	f023 0301 	bic.w	r3, r3, #1
 800128e:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001290:	2320      	movs	r3, #32
 8001292:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8001296:	4770      	bx	lr

08001298 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001298:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b21      	cmp	r3, #33	; 0x21
 80012a0:	d12a      	bne.n	80012f8 <UART_Transmit_IT+0x60>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80012a2:	6883      	ldr	r3, [r0, #8]
 80012a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012a8:	d016      	beq.n	80012d8 <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80012aa:	6a03      	ldr	r3, [r0, #32]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	6202      	str	r2, [r0, #32]
 80012b0:	781a      	ldrb	r2, [r3, #0]
 80012b2:	6803      	ldr	r3, [r0, #0]
 80012b4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80012b6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80012be:	b9eb      	cbnz	r3, 80012fc <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80012c0:	6802      	ldr	r2, [r0, #0]
 80012c2:	68d3      	ldr	r3, [r2, #12]
 80012c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012c8:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80012ca:	6802      	ldr	r2, [r0, #0]
 80012cc:	68d3      	ldr	r3, [r2, #12]
 80012ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012d2:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 80012d4:	2000      	movs	r0, #0
 80012d6:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 80012d8:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	6802      	ldr	r2, [r0, #0]
 80012de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012e2:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80012e4:	6903      	ldr	r3, [r0, #16]
 80012e6:	b91b      	cbnz	r3, 80012f0 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80012e8:	6a03      	ldr	r3, [r0, #32]
 80012ea:	3302      	adds	r3, #2
 80012ec:	6203      	str	r3, [r0, #32]
 80012ee:	e7e2      	b.n	80012b6 <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80012f0:	6a03      	ldr	r3, [r0, #32]
 80012f2:	3301      	adds	r3, #1
 80012f4:	6203      	str	r3, [r0, #32]
 80012f6:	e7de      	b.n	80012b6 <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80012f8:	2002      	movs	r0, #2
 80012fa:	4770      	bx	lr
    return HAL_OK;
 80012fc:	2000      	movs	r0, #0
  }
}
 80012fe:	4770      	bx	lr

08001300 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001304:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001306:	6802      	ldr	r2, [r0, #0]
 8001308:	6913      	ldr	r3, [r2, #16]
 800130a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800130e:	68c1      	ldr	r1, [r0, #12]
 8001310:	430b      	orrs	r3, r1
 8001312:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001314:	6883      	ldr	r3, [r0, #8]
 8001316:	6902      	ldr	r2, [r0, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	6942      	ldr	r2, [r0, #20]
 800131c:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 800131e:	6801      	ldr	r1, [r0, #0]
 8001320:	68ca      	ldr	r2, [r1, #12]
 8001322:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001326:	f022 020c 	bic.w	r2, r2, #12
 800132a:	4313      	orrs	r3, r2
 800132c:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800132e:	6802      	ldr	r2, [r0, #0]
 8001330:	6953      	ldr	r3, [r2, #20]
 8001332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001336:	6981      	ldr	r1, [r0, #24]
 8001338:	430b      	orrs	r3, r1
 800133a:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800133c:	6802      	ldr	r2, [r0, #0]
 800133e:	4b59      	ldr	r3, [pc, #356]	; (80014a4 <UART_SetConfig+0x1a4>)
 8001340:	429a      	cmp	r2, r3
 8001342:	d057      	beq.n	80013f4 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001344:	f7ff fc00 	bl	8000b48 <HAL_RCC_GetPCLK1Freq>
 8001348:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800134c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001350:	686c      	ldr	r4, [r5, #4]
 8001352:	00a4      	lsls	r4, r4, #2
 8001354:	fbb0 f4f4 	udiv	r4, r0, r4
 8001358:	4f53      	ldr	r7, [pc, #332]	; (80014a8 <UART_SetConfig+0x1a8>)
 800135a:	fba7 3404 	umull	r3, r4, r7, r4
 800135e:	0964      	lsrs	r4, r4, #5
 8001360:	0126      	lsls	r6, r4, #4
 8001362:	f7ff fbf1 	bl	8000b48 <HAL_RCC_GetPCLK1Freq>
 8001366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800136a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800136e:	686c      	ldr	r4, [r5, #4]
 8001370:	00a4      	lsls	r4, r4, #2
 8001372:	fbb0 f9f4 	udiv	r9, r0, r4
 8001376:	f7ff fbe7 	bl	8000b48 <HAL_RCC_GetPCLK1Freq>
 800137a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800137e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001382:	686c      	ldr	r4, [r5, #4]
 8001384:	00a4      	lsls	r4, r4, #2
 8001386:	fbb0 f4f4 	udiv	r4, r0, r4
 800138a:	fba7 3404 	umull	r3, r4, r7, r4
 800138e:	0964      	lsrs	r4, r4, #5
 8001390:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001394:	fb08 9414 	mls	r4, r8, r4, r9
 8001398:	0124      	lsls	r4, r4, #4
 800139a:	3432      	adds	r4, #50	; 0x32
 800139c:	fba7 3404 	umull	r3, r4, r7, r4
 80013a0:	0964      	lsrs	r4, r4, #5
 80013a2:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 80013a6:	4434      	add	r4, r6
 80013a8:	f7ff fbce 	bl	8000b48 <HAL_RCC_GetPCLK1Freq>
 80013ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013b4:	686e      	ldr	r6, [r5, #4]
 80013b6:	00b6      	lsls	r6, r6, #2
 80013b8:	fbb0 f6f6 	udiv	r6, r0, r6
 80013bc:	f7ff fbc4 	bl	8000b48 <HAL_RCC_GetPCLK1Freq>
 80013c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013c8:	686b      	ldr	r3, [r5, #4]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80013d0:	fba7 3000 	umull	r3, r0, r7, r0
 80013d4:	0940      	lsrs	r0, r0, #5
 80013d6:	fb08 6810 	mls	r8, r8, r0, r6
 80013da:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80013de:	f108 0832 	add.w	r8, r8, #50	; 0x32
 80013e2:	fba7 3708 	umull	r3, r7, r7, r8
 80013e6:	f3c7 1743 	ubfx	r7, r7, #5, #4
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	4427      	add	r7, r4
 80013ee:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80013f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013f4:	f7ff fbb8 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 80013f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80013fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001400:	686c      	ldr	r4, [r5, #4]
 8001402:	00a4      	lsls	r4, r4, #2
 8001404:	fbb0 f4f4 	udiv	r4, r0, r4
 8001408:	4f27      	ldr	r7, [pc, #156]	; (80014a8 <UART_SetConfig+0x1a8>)
 800140a:	fba7 3404 	umull	r3, r4, r7, r4
 800140e:	0964      	lsrs	r4, r4, #5
 8001410:	0126      	lsls	r6, r4, #4
 8001412:	f7ff fba9 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 8001416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800141a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800141e:	686c      	ldr	r4, [r5, #4]
 8001420:	00a4      	lsls	r4, r4, #2
 8001422:	fbb0 f9f4 	udiv	r9, r0, r4
 8001426:	f7ff fb9f 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 800142a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800142e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001432:	686c      	ldr	r4, [r5, #4]
 8001434:	00a4      	lsls	r4, r4, #2
 8001436:	fbb0 f4f4 	udiv	r4, r0, r4
 800143a:	fba7 3404 	umull	r3, r4, r7, r4
 800143e:	0964      	lsrs	r4, r4, #5
 8001440:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001444:	fb08 9414 	mls	r4, r8, r4, r9
 8001448:	0124      	lsls	r4, r4, #4
 800144a:	3432      	adds	r4, #50	; 0x32
 800144c:	fba7 3404 	umull	r3, r4, r7, r4
 8001450:	0964      	lsrs	r4, r4, #5
 8001452:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8001456:	4434      	add	r4, r6
 8001458:	f7ff fb86 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 800145c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001460:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001464:	686e      	ldr	r6, [r5, #4]
 8001466:	00b6      	lsls	r6, r6, #2
 8001468:	fbb0 f6f6 	udiv	r6, r0, r6
 800146c:	f7ff fb7c 	bl	8000b68 <HAL_RCC_GetPCLK2Freq>
 8001470:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001474:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001478:	686b      	ldr	r3, [r5, #4]
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001480:	fba7 3000 	umull	r3, r0, r7, r0
 8001484:	0940      	lsrs	r0, r0, #5
 8001486:	fb08 6810 	mls	r8, r8, r0, r6
 800148a:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800148e:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001492:	fba7 3708 	umull	r3, r7, r7, r8
 8001496:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	4427      	add	r7, r4
 800149e:	609f      	str	r7, [r3, #8]
 80014a0:	e7a6      	b.n	80013f0 <UART_SetConfig+0xf0>
 80014a2:	bf00      	nop
 80014a4:	40013800 	.word	0x40013800
 80014a8:	51eb851f 	.word	0x51eb851f

080014ac <UART_WaitOnFlagUntilTimeout>:
{
 80014ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014b0:	4605      	mov	r5, r0
 80014b2:	460f      	mov	r7, r1
 80014b4:	4616      	mov	r6, r2
 80014b6:	4698      	mov	r8, r3
 80014b8:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	ea37 0303 	bics.w	r3, r7, r3
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	42b3      	cmp	r3, r6
 80014ca:	d11d      	bne.n	8001508 <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 80014cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80014d0:	d0f3      	beq.n	80014ba <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80014d2:	b12c      	cbz	r4, 80014e0 <UART_WaitOnFlagUntilTimeout+0x34>
 80014d4:	f7fe fe7e 	bl	80001d4 <HAL_GetTick>
 80014d8:	eba0 0008 	sub.w	r0, r0, r8
 80014dc:	42a0      	cmp	r0, r4
 80014de:	d9ec      	bls.n	80014ba <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80014e0:	682a      	ldr	r2, [r5, #0]
 80014e2:	68d3      	ldr	r3, [r2, #12]
 80014e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80014e8:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ea:	682a      	ldr	r2, [r5, #0]
 80014ec:	6953      	ldr	r3, [r2, #20]
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80014f4:	2320      	movs	r3, #32
 80014f6:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80014fa:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80014fe:	2300      	movs	r3, #0
 8001500:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 8001504:	2003      	movs	r0, #3
 8001506:	e000      	b.n	800150a <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 8001508:	2000      	movs	r0, #0
}
 800150a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800150e <HAL_UART_Init>:
  if(huart == NULL)
 800150e:	b358      	cbz	r0, 8001568 <HAL_UART_Init+0x5a>
{
 8001510:	b510      	push	{r4, lr}
 8001512:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 8001514:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001518:	b30b      	cbz	r3, 800155e <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800151a:	2324      	movs	r3, #36	; 0x24
 800151c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001520:	6822      	ldr	r2, [r4, #0]
 8001522:	68d3      	ldr	r3, [r2, #12]
 8001524:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001528:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fee8 	bl	8001300 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	6913      	ldr	r3, [r2, #16]
 8001534:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001538:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800153a:	6822      	ldr	r2, [r4, #0]
 800153c:	6953      	ldr	r3, [r2, #20]
 800153e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001542:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001544:	6822      	ldr	r2, [r4, #0]
 8001546:	68d3      	ldr	r3, [r2, #12]
 8001548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154e:	2000      	movs	r0, #0
 8001550:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001552:	2320      	movs	r3, #32
 8001554:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001558:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800155c:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800155e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001562:	f000 fb41 	bl	8001be8 <HAL_UART_MspInit>
 8001566:	e7d8      	b.n	800151a <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8001568:	2001      	movs	r0, #1
}
 800156a:	4770      	bx	lr

0800156c <HAL_UART_Transmit>:
{
 800156c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001574:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	d155      	bne.n	800162a <HAL_UART_Transmit+0xbe>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8001584:	2900      	cmp	r1, #0
 8001586:	d055      	beq.n	8001634 <HAL_UART_Transmit+0xc8>
 8001588:	2a00      	cmp	r2, #0
 800158a:	d055      	beq.n	8001638 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800158c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001590:	2b01      	cmp	r3, #1
 8001592:	d053      	beq.n	800163c <HAL_UART_Transmit+0xd0>
 8001594:	2301      	movs	r3, #1
 8001596:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800159e:	2321      	movs	r3, #33	; 0x21
 80015a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015a4:	f7fe fe16 	bl	80001d4 <HAL_GetTick>
 80015a8:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 80015aa:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80015ae:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80015b2:	e010      	b.n	80015d6 <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015b4:	9600      	str	r6, [sp, #0]
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	4620      	mov	r0, r4
 80015be:	f7ff ff75 	bl	80014ac <UART_WaitOnFlagUntilTimeout>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d13c      	bne.n	8001640 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015c6:	882b      	ldrh	r3, [r5, #0]
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ce:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80015d0:	6923      	ldr	r3, [r4, #16]
 80015d2:	b9c3      	cbnz	r3, 8001606 <HAL_UART_Transmit+0x9a>
          pData +=2U;
 80015d4:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 80015d6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015d8:	b29b      	uxth	r3, r3
 80015da:	b1b3      	cbz	r3, 800160a <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80015dc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015de:	3b01      	subs	r3, #1
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015e4:	68a3      	ldr	r3, [r4, #8]
 80015e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ea:	d0e3      	beq.n	80015b4 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015ec:	9600      	str	r6, [sp, #0]
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff59 	bl	80014ac <UART_WaitOnFlagUntilTimeout>
 80015fa:	bb18      	cbnz	r0, 8001644 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80015fc:	782a      	ldrb	r2, [r5, #0]
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	3501      	adds	r5, #1
 8001604:	e7e7      	b.n	80015d6 <HAL_UART_Transmit+0x6a>
          pData +=1U;
 8001606:	3501      	adds	r5, #1
 8001608:	e7e5      	b.n	80015d6 <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800160a:	9600      	str	r6, [sp, #0]
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff ff4a 	bl	80014ac <UART_WaitOnFlagUntilTimeout>
 8001618:	4603      	mov	r3, r0
 800161a:	b9a8      	cbnz	r0, 8001648 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 800161c:	2220      	movs	r2, #32
 800161e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001622:	2200      	movs	r2, #0
 8001624:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8001628:	e000      	b.n	800162c <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 800162a:	2302      	movs	r3, #2
}
 800162c:	4618      	mov	r0, r3
 800162e:	b002      	add	sp, #8
 8001630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e7f9      	b.n	800162c <HAL_UART_Transmit+0xc0>
 8001638:	2301      	movs	r3, #1
 800163a:	e7f7      	b.n	800162c <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 800163c:	2302      	movs	r3, #2
 800163e:	e7f5      	b.n	800162c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e7f3      	b.n	800162c <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e7f1      	b.n	800162c <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e7ef      	b.n	800162c <HAL_UART_Transmit+0xc0>

0800164c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800164c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b20      	cmp	r3, #32
 8001654:	d120      	bne.n	8001698 <HAL_UART_Receive_IT+0x4c>
    if((pData == NULL) || (Size == 0U))
 8001656:	b309      	cbz	r1, 800169c <HAL_UART_Receive_IT+0x50>
 8001658:	b312      	cbz	r2, 80016a0 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 800165a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800165e:	2b01      	cmp	r3, #1
 8001660:	d020      	beq.n	80016a4 <HAL_UART_Receive_IT+0x58>
    huart->pRxBuffPtr = pData;
 8001662:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8001664:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001666:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001668:	2300      	movs	r3, #0
 800166a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800166c:	2222      	movs	r2, #34	; 0x22
 800166e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UNLOCK(huart);
 8001672:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001676:	6801      	ldr	r1, [r0, #0]
 8001678:	68ca      	ldr	r2, [r1, #12]
 800167a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800167e:	60ca      	str	r2, [r1, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001680:	6801      	ldr	r1, [r0, #0]
 8001682:	694a      	ldr	r2, [r1, #20]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	614a      	str	r2, [r1, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800168a:	6801      	ldr	r1, [r0, #0]
 800168c:	68ca      	ldr	r2, [r1, #12]
 800168e:	f042 0220 	orr.w	r2, r2, #32
 8001692:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8001694:	4618      	mov	r0, r3
 8001696:	4770      	bx	lr
    return HAL_BUSY;
 8001698:	2002      	movs	r0, #2
 800169a:	4770      	bx	lr
      return HAL_ERROR;
 800169c:	2001      	movs	r0, #1
 800169e:	4770      	bx	lr
 80016a0:	2001      	movs	r0, #1
 80016a2:	4770      	bx	lr
    __HAL_LOCK(huart);
 80016a4:	2002      	movs	r0, #2
}
 80016a6:	4770      	bx	lr

080016a8 <HAL_UART_TxCpltCallback>:
}
 80016a8:	4770      	bx	lr

080016aa <UART_EndTransmit_IT>:
{
 80016aa:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016ac:	6801      	ldr	r1, [r0, #0]
 80016ae:	68cb      	ldr	r3, [r1, #12]
 80016b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016b4:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016b6:	2320      	movs	r3, #32
 80016b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016bc:	f7ff fff4 	bl	80016a8 <HAL_UART_TxCpltCallback>
}
 80016c0:	2000      	movs	r0, #0
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <UART_Receive_IT>:
{
 80016c4:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016c6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b22      	cmp	r3, #34	; 0x22
 80016ce:	d145      	bne.n	800175c <UART_Receive_IT+0x98>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016d0:	6883      	ldr	r3, [r0, #8]
 80016d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d6:	d00e      	beq.n	80016f6 <UART_Receive_IT+0x32>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016d8:	6903      	ldr	r3, [r0, #16]
 80016da:	bb03      	cbnz	r3, 800171e <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80016dc:	6803      	ldr	r3, [r0, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	6281      	str	r1, [r0, #40]	; 0x28
 80016e6:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 80016e8:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80016f0:	b1f3      	cbz	r3, 8001730 <UART_Receive_IT+0x6c>
    return HAL_OK;
 80016f2:	2000      	movs	r0, #0
 80016f4:	e033      	b.n	800175e <UART_Receive_IT+0x9a>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80016f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 80016f8:	6903      	ldr	r3, [r0, #16]
 80016fa:	b943      	cbnz	r3, 800170e <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016fc:	6803      	ldr	r3, [r0, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001704:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8001706:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001708:	3302      	adds	r3, #2
 800170a:	6283      	str	r3, [r0, #40]	; 0x28
 800170c:	e7ec      	b.n	80016e8 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800170e:	6803      	ldr	r3, [r0, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	b2db      	uxtb	r3, r3
 8001714:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8001716:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001718:	3301      	adds	r3, #1
 800171a:	6283      	str	r3, [r0, #40]	; 0x28
 800171c:	e7e4      	b.n	80016e8 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800171e:	6803      	ldr	r3, [r0, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001724:	1c51      	adds	r1, r2, #1
 8001726:	6281      	str	r1, [r0, #40]	; 0x28
 8001728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800172c:	7013      	strb	r3, [r2, #0]
 800172e:	e7db      	b.n	80016e8 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001730:	6802      	ldr	r2, [r0, #0]
 8001732:	68d3      	ldr	r3, [r2, #12]
 8001734:	f023 0320 	bic.w	r3, r3, #32
 8001738:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800173a:	6802      	ldr	r2, [r0, #0]
 800173c:	68d3      	ldr	r3, [r2, #12]
 800173e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001742:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001744:	6802      	ldr	r2, [r0, #0]
 8001746:	6953      	ldr	r3, [r2, #20]
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800174e:	2320      	movs	r3, #32
 8001750:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001754:	f000 f98c 	bl	8001a70 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001758:	2000      	movs	r0, #0
 800175a:	e000      	b.n	800175e <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 800175c:	2002      	movs	r0, #2
}
 800175e:	bd08      	pop	{r3, pc}

08001760 <HAL_UART_ErrorCallback>:
}
 8001760:	4770      	bx	lr
	...

08001764 <HAL_UART_IRQHandler>:
{
 8001764:	b510      	push	{r4, lr}
 8001766:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800176c:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800176e:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 8001770:	f013 000f 	ands.w	r0, r3, #15
 8001774:	d105      	bne.n	8001782 <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001776:	f013 0f20 	tst.w	r3, #32
 800177a:	d002      	beq.n	8001782 <HAL_UART_IRQHandler+0x1e>
 800177c:	f011 0f20 	tst.w	r1, #32
 8001780:	d153      	bne.n	800182a <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001782:	2800      	cmp	r0, #0
 8001784:	d067      	beq.n	8001856 <HAL_UART_IRQHandler+0xf2>
 8001786:	f012 0201 	ands.w	r2, r2, #1
 800178a:	d102      	bne.n	8001792 <HAL_UART_IRQHandler+0x2e>
 800178c:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001790:	d061      	beq.n	8001856 <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001792:	f013 0f01 	tst.w	r3, #1
 8001796:	d006      	beq.n	80017a6 <HAL_UART_IRQHandler+0x42>
 8001798:	f411 7f80 	tst.w	r1, #256	; 0x100
 800179c:	d003      	beq.n	80017a6 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800179e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017a0:	f040 0001 	orr.w	r0, r0, #1
 80017a4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017a6:	f013 0f04 	tst.w	r3, #4
 80017aa:	d004      	beq.n	80017b6 <HAL_UART_IRQHandler+0x52>
 80017ac:	b11a      	cbz	r2, 80017b6 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017ae:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017b0:	f040 0002 	orr.w	r0, r0, #2
 80017b4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017b6:	f013 0f02 	tst.w	r3, #2
 80017ba:	d004      	beq.n	80017c6 <HAL_UART_IRQHandler+0x62>
 80017bc:	b11a      	cbz	r2, 80017c6 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017be:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80017c0:	f040 0004 	orr.w	r0, r0, #4
 80017c4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017c6:	f013 0f08 	tst.w	r3, #8
 80017ca:	d004      	beq.n	80017d6 <HAL_UART_IRQHandler+0x72>
 80017cc:	b11a      	cbz	r2, 80017d6 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017d0:	f042 0208 	orr.w	r2, r2, #8
 80017d4:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017d8:	2a00      	cmp	r2, #0
 80017da:	d048      	beq.n	800186e <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017dc:	f013 0f20 	tst.w	r3, #32
 80017e0:	d002      	beq.n	80017e8 <HAL_UART_IRQHandler+0x84>
 80017e2:	f011 0f20 	tst.w	r1, #32
 80017e6:	d124      	bne.n	8001832 <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017f0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017f2:	f012 0f08 	tst.w	r2, #8
 80017f6:	d100      	bne.n	80017fa <HAL_UART_IRQHandler+0x96>
 80017f8:	b33b      	cbz	r3, 800184a <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fd3e 	bl	800127c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001808:	d01b      	beq.n	8001842 <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001810:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001814:	b18b      	cbz	r3, 800183a <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001816:	4a1a      	ldr	r2, [pc, #104]	; (8001880 <HAL_UART_IRQHandler+0x11c>)
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800181a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800181c:	f7fe fd48 	bl	80002b0 <HAL_DMA_Abort_IT>
 8001820:	b328      	cbz	r0, 800186e <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001822:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001824:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001826:	4798      	blx	r3
 8001828:	e021      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 800182a:	4620      	mov	r0, r4
 800182c:	f7ff ff4a 	bl	80016c4 <UART_Receive_IT>
      return;
 8001830:	e01d      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 8001832:	4620      	mov	r0, r4
 8001834:	f7ff ff46 	bl	80016c4 <UART_Receive_IT>
 8001838:	e7d6      	b.n	80017e8 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 800183a:	4620      	mov	r0, r4
 800183c:	f7ff ff90 	bl	8001760 <HAL_UART_ErrorCallback>
 8001840:	e015      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff ff8c 	bl	8001760 <HAL_UART_ErrorCallback>
 8001848:	e011      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff ff88 	bl	8001760 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001850:	2300      	movs	r3, #0
 8001852:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001854:	e00b      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001856:	f013 0f80 	tst.w	r3, #128	; 0x80
 800185a:	d002      	beq.n	8001862 <HAL_UART_IRQHandler+0xfe>
 800185c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001860:	d106      	bne.n	8001870 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001862:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001866:	d002      	beq.n	800186e <HAL_UART_IRQHandler+0x10a>
 8001868:	f011 0f40 	tst.w	r1, #64	; 0x40
 800186c:	d104      	bne.n	8001878 <HAL_UART_IRQHandler+0x114>
}
 800186e:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8001870:	4620      	mov	r0, r4
 8001872:	f7ff fd11 	bl	8001298 <UART_Transmit_IT>
    return;
 8001876:	e7fa      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff ff16 	bl	80016aa <UART_EndTransmit_IT>
    return;
 800187e:	e7f6      	b.n	800186e <HAL_UART_IRQHandler+0x10a>
 8001880:	08001885 	.word	0x08001885

08001884 <UART_DMAAbortOnError>:
{
 8001884:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001886:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8001888:	2300      	movs	r3, #0
 800188a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800188c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800188e:	f7ff ff67 	bl	8001760 <HAL_UART_ErrorCallback>
}
 8001892:	bd08      	pop	{r3, pc}

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b530      	push	{r4, r5, lr}
 8001896:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	2400      	movs	r4, #0
 800189a:	9404      	str	r4, [sp, #16]
 800189c:	9405      	str	r4, [sp, #20]
 800189e:	9406      	str	r4, [sp, #24]
 80018a0:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <MX_GPIO_Init+0x80>)
 80018a4:	699a      	ldr	r2, [r3, #24]
 80018a6:	f042 0210 	orr.w	r2, r2, #16
 80018aa:	619a      	str	r2, [r3, #24]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	f002 0210 	and.w	r2, r2, #16
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	f042 0220 	orr.w	r2, r2, #32
 80018bc:	619a      	str	r2, [r3, #24]
 80018be:	699a      	ldr	r2, [r3, #24]
 80018c0:	f002 0220 	and.w	r2, r2, #32
 80018c4:	9201      	str	r2, [sp, #4]
 80018c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	f042 0204 	orr.w	r2, r2, #4
 80018ce:	619a      	str	r2, [r3, #24]
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	f002 0204 	and.w	r2, r2, #4
 80018d6:	9202      	str	r2, [sp, #8]
 80018d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	f042 0208 	orr.w	r2, r2, #8
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	9303      	str	r3, [sp, #12]
 80018ea:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TLC5947_BLANK_Pin|TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 80018ec:	4d0a      	ldr	r5, [pc, #40]	; (8001918 <MX_GPIO_Init+0x84>)
 80018ee:	4622      	mov	r2, r4
 80018f0:	210a      	movs	r1, #10
 80018f2:	4628      	mov	r0, r5
 80018f4:	f7fe fe12 	bl	800051c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TLC5947_BLANK_Pin TLC5947_XLAT_Pin */
  GPIO_InitStruct.Pin = TLC5947_BLANK_Pin|TLC5947_XLAT_Pin;
 80018f8:	230a      	movs	r3, #10
 80018fa:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2302      	movs	r3, #2
 8001904:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	a904      	add	r1, sp, #16
 8001908:	4628      	mov	r0, r5
 800190a:	f7fe fd1d 	bl	8000348 <HAL_GPIO_Init>

}
 800190e:	b009      	add	sp, #36	; 0x24
 8001910:	bd30      	pop	{r4, r5, pc}
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	40010800 	.word	0x40010800

0800191c <MX_SPI1_Init>:
{
 800191c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <MX_SPI1_Init+0x34>)
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_SPI1_Init+0x38>)
 8001922:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001924:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001928:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	2300      	movs	r3, #0
 800192c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800192e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001930:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001932:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001938:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800193a:	2218      	movs	r2, #24
 800193c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800193e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001940:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001942:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001944:	230a      	movs	r3, #10
 8001946:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001948:	f7ff fa50 	bl	8000dec <HAL_SPI_Init>
}
 800194c:	bd08      	pop	{r3, pc}
 800194e:	bf00      	nop
 8001950:	20000110 	.word	0x20000110
 8001954:	40013000 	.word	0x40013000

08001958 <MX_USART3_UART_Init>:
{
 8001958:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 800195a:	4808      	ldr	r0, [pc, #32]	; (800197c <MX_USART3_UART_Init+0x24>)
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART3_UART_Init+0x28>)
 800195e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001960:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001964:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	2300      	movs	r3, #0
 8001968:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800196a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800196e:	220c      	movs	r2, #12
 8001970:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001972:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001976:	f7ff fdca 	bl	800150e <HAL_UART_Init>
}
 800197a:	bd08      	pop	{r3, pc}
 800197c:	200000d0 	.word	0x200000d0
 8001980:	40004800 	.word	0x40004800

08001984 <MX_TIM4_Init>:
{
 8001984:	b530      	push	{r4, r5, lr}
 8001986:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001988:	2400      	movs	r4, #0
 800198a:	9402      	str	r4, [sp, #8]
 800198c:	9403      	str	r4, [sp, #12]
 800198e:	9404      	str	r4, [sp, #16]
 8001990:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001992:	9400      	str	r4, [sp, #0]
 8001994:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 8001996:	4d0f      	ldr	r5, [pc, #60]	; (80019d4 <MX_TIM4_Init+0x50>)
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <MX_TIM4_Init+0x54>)
 800199a:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 35999;
 800199c:	f648 439f 	movw	r3, #35999	; 0x8c9f
 80019a0:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 2000;
 80019a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80019a8:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7ff fc1f 	bl	80011f4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019bc:	a902      	add	r1, sp, #8
 80019be:	4628      	mov	r0, r5
 80019c0:	f7ff fa99 	bl	8000ef6 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019c8:	4669      	mov	r1, sp
 80019ca:	4628      	mov	r0, r5
 80019cc:	f7ff fc2b 	bl	8001226 <HAL_TIMEx_MasterConfigSynchronization>
}
 80019d0:	b007      	add	sp, #28
 80019d2:	bd30      	pop	{r4, r5, pc}
 80019d4:	20000090 	.word	0x20000090
 80019d8:	40000800 	.word	0x40000800

080019dc <SystemClock_Config>:
{
 80019dc:	b530      	push	{r4, r5, lr}
 80019de:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e0:	2400      	movs	r4, #0
 80019e2:	9408      	str	r4, [sp, #32]
 80019e4:	9409      	str	r4, [sp, #36]	; 0x24
 80019e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80019e8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ea:	9401      	str	r4, [sp, #4]
 80019ec:	9402      	str	r4, [sp, #8]
 80019ee:	9403      	str	r4, [sp, #12]
 80019f0:	9404      	str	r4, [sp, #16]
 80019f2:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f4:	2201      	movs	r2, #1
 80019f6:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019fe:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a00:	2502      	movs	r5, #2
 8001a02:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a04:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001a0a:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	a806      	add	r0, sp, #24
 8001a0e:	f7fe fda1 	bl	8000554 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a12:	230f      	movs	r3, #15
 8001a14:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a16:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a20:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a22:	4629      	mov	r1, r5
 8001a24:	a801      	add	r0, sp, #4
 8001a26:	f7fe ffbb 	bl	80009a0 <HAL_RCC_ClockConfig>
}
 8001a2a:	b011      	add	sp, #68	; 0x44
 8001a2c:	bd30      	pop	{r4, r5, pc}
	...

08001a30 <main>:
{
 8001a30:	b508      	push	{r3, lr}
  HAL_Init();
 8001a32:	f7fe fbb1 	bl	8000198 <HAL_Init>
  SystemClock_Config();
 8001a36:	f7ff ffd1 	bl	80019dc <SystemClock_Config>
  MX_GPIO_Init();
 8001a3a:	f7ff ff2b 	bl	8001894 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001a3e:	f7ff ff6d 	bl	800191c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001a42:	f7ff ff89 	bl	8001958 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001a46:	f7ff ff9d 	bl	8001984 <MX_TIM4_Init>
  HAL_UART_Receive_IT(&huart3, &uartByte, 1);//this triggers only once,uses interrupt and it has to be re-enabled
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4905      	ldr	r1, [pc, #20]	; (8001a64 <main+0x34>)
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <main+0x38>)
 8001a50:	f7ff fdfc 	bl	800164c <HAL_UART_Receive_IT>
  FillArray(BLUE);//it will be red
 8001a54:	2032      	movs	r0, #50	; 0x32
 8001a56:	f000 f9b1 	bl	8001dbc <FillArray>
  HAL_TIM_Base_Start_IT(&htim4);
 8001a5a:	4804      	ldr	r0, [pc, #16]	; (8001a6c <main+0x3c>)
 8001a5c:	f7ff fa3f 	bl	8000ede <HAL_TIM_Base_Start_IT>
 8001a60:	e7fe      	b.n	8001a60 <main+0x30>
 8001a62:	bf00      	nop
 8001a64:	2000008c 	.word	0x2000008c
 8001a68:	200000d0 	.word	0x200000d0
 8001a6c:	20000090 	.word	0x20000090

08001a70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a70:	b538      	push	{r3, r4, r5, lr}
  HAL_UART_Transmit(&huart3, &uartByte, 1, 100);//echo the received msg to verify that all is good
 8001a72:	4c10      	ldr	r4, [pc, #64]	; (8001ab4 <HAL_UART_RxCpltCallback+0x44>)
 8001a74:	4d10      	ldr	r5, [pc, #64]	; (8001ab8 <HAL_UART_RxCpltCallback+0x48>)
 8001a76:	2364      	movs	r3, #100	; 0x64
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4621      	mov	r1, r4
 8001a7c:	4628      	mov	r0, r5
 8001a7e:	f7ff fd75 	bl	800156c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &uartByte, 1);//re-enable the rx int
 8001a82:	2201      	movs	r2, #1
 8001a84:	4621      	mov	r1, r4
 8001a86:	4628      	mov	r0, r5
 8001a88:	f7ff fde0 	bl	800164c <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, (uint8_t *)"BP\r\n", 4U, 100);//so as to know it comes from the BP
 8001a8c:	2364      	movs	r3, #100	; 0x64
 8001a8e:	2204      	movs	r2, #4
 8001a90:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_UART_RxCpltCallback+0x4c>)
 8001a92:	4628      	mov	r0, r5
 8001a94:	f7ff fd6a 	bl	800156c <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, &uartByte, 1);//re-enable the rx int
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	4628      	mov	r0, r5
 8001a9e:	f7ff fdd5 	bl	800164c <HAL_UART_Receive_IT>

  if(uartByte > 47 && uartByte <55)
 8001aa2:	7822      	ldrb	r2, [r4, #0]
 8001aa4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d801      	bhi.n	8001ab2 <HAL_UART_RxCpltCallback+0x42>
	  UARTVal=uartByte;//the values that are relevant are stored
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_UART_RxCpltCallback+0x50>)
 8001ab0:	701a      	strb	r2, [r3, #0]


}
 8001ab2:	bd38      	pop	{r3, r4, r5, pc}
 8001ab4:	2000008c 	.word	0x2000008c
 8001ab8:	200000d0 	.word	0x200000d0
 8001abc:	08001ed4 	.word	0x08001ed4
 8001ac0:	2000002c 	.word	0x2000002c

08001ac4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ac4:	b508      	push	{r3, lr}

	if(htim->Instance== TIM4)
 8001ac6:	6802      	ldr	r2, [r0, #0]
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d000      	beq.n	8001ad0 <HAL_TIM_PeriodElapsedCallback+0xc>
	 	FillArray(UARTVal);

	}


}
 8001ace:	bd08      	pop	{r3, pc}
	  	TLC_Update();//renew PWM
 8001ad0:	f000 f936 	bl	8001d40 <TLC_Update>
	 	FillArray(UARTVal);
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ad6:	7818      	ldrb	r0, [r3, #0]
 8001ad8:	f000 f970 	bl	8001dbc <FillArray>
}
 8001adc:	e7f7      	b.n	8001ace <HAL_TIM_PeriodElapsedCallback+0xa>
 8001ade:	bf00      	nop
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	2000002c 	.word	0x2000002c

08001ae8 <TLC_Write>:
void TLC_Write(uint8_t data[])
//void TLC_Write(uint8_t *data)
{
 8001ae8:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&hspi1,data, SPI_BYTE_AMOUNT,1000); // envio via el sp1 de 1 todos los bytes que tenga que mandar
 8001aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aee:	2224      	movs	r2, #36	; 0x24
 8001af0:	4601      	mov	r1, r0
 8001af2:	4802      	ldr	r0, [pc, #8]	; (8001afc <TLC_Write+0x14>)
 8001af4:	f7ff f8a7 	bl	8000c46 <HAL_SPI_Transmit>
//    while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY); // espero a que termine la transferen
}
 8001af8:	bd08      	pop	{r3, pc}
 8001afa:	bf00      	nop
 8001afc:	20000110 	.word	0x20000110

08001b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <HAL_MspInit+0x3c>)
 8001b04:	699a      	ldr	r2, [r3, #24]
 8001b06:	f042 0201 	orr.w	r2, r2, #1
 8001b0a:	619a      	str	r2, [r3, #24]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	f002 0201 	and.w	r2, r2, #1
 8001b12:	9200      	str	r2, [sp, #0]
 8001b14:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b1c:	61da      	str	r2, [r3, #28]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <HAL_MspInit+0x40>)
 8001b2a:	6853      	ldr	r3, [r2, #4]
 8001b2c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	b002      	add	sp, #8
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000

08001b44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b44:	b500      	push	{lr}
 8001b46:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	9303      	str	r3, [sp, #12]
 8001b4e:	9304      	str	r3, [sp, #16]
 8001b50:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI1)
 8001b52:	6802      	ldr	r2, [r0, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_SPI_MspInit+0x5c>)
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d002      	beq.n	8001b60 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b5a:	b007      	add	sp, #28
 8001b5c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b60:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001b64:	699a      	ldr	r2, [r3, #24]
 8001b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	699a      	ldr	r2, [r3, #24]
 8001b78:	f042 0204 	orr.w	r2, r2, #4
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b94:	a902      	add	r1, sp, #8
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <HAL_SPI_MspInit+0x60>)
 8001b98:	f7fe fbd6 	bl	8000348 <HAL_GPIO_Init>
}
 8001b9c:	e7dd      	b.n	8001b5a <HAL_SPI_MspInit+0x16>
 8001b9e:	bf00      	nop
 8001ba0:	40013000 	.word	0x40013000
 8001ba4:	40010800 	.word	0x40010800

08001ba8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8001ba8:	6802      	ldr	r2, [r0, #0]
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d000      	beq.n	8001bb2 <HAL_TIM_Base_MspInit+0xa>
 8001bb0:	4770      	bx	lr
{
 8001bb2:	b500      	push	{lr}
 8001bb4:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bb6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001bba:	69da      	ldr	r2, [r3, #28]
 8001bbc:	f042 0204 	orr.w	r2, r2, #4
 8001bc0:	61da      	str	r2, [r3, #28]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	9301      	str	r3, [sp, #4]
 8001bca:	9b01      	ldr	r3, [sp, #4]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2101      	movs	r1, #1
 8001bd0:	201e      	movs	r0, #30
 8001bd2:	f7fe fb17 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001bd6:	201e      	movs	r0, #30
 8001bd8:	f7fe fb48 	bl	800026c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bdc:	b003      	add	sp, #12
 8001bde:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be2:	bf00      	nop
 8001be4:	40000800 	.word	0x40000800

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b570      	push	{r4, r5, r6, lr}
 8001bea:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	2300      	movs	r3, #0
 8001bee:	9302      	str	r3, [sp, #8]
 8001bf0:	9303      	str	r3, [sp, #12]
 8001bf2:	9304      	str	r3, [sp, #16]
 8001bf4:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <HAL_UART_MspInit+0x80>)
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d001      	beq.n	8001c02 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bfe:	b006      	add	sp, #24
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c02:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001c06:	69da      	ldr	r2, [r3, #28]
 8001c08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001c0c:	61da      	str	r2, [r3, #28]
 8001c0e:	69da      	ldr	r2, [r3, #28]
 8001c10:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001c14:	9200      	str	r2, [sp, #0]
 8001c16:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	699a      	ldr	r2, [r3, #24]
 8001c1a:	f042 0208 	orr.w	r2, r2, #8
 8001c1e:	619a      	str	r2, [r3, #24]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c34:	2503      	movs	r5, #3
 8001c36:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	4e0c      	ldr	r6, [pc, #48]	; (8001c6c <HAL_UART_MspInit+0x84>)
 8001c3a:	a902      	add	r1, sp, #8
 8001c3c:	4630      	mov	r0, r6
 8001c3e:	f7fe fb83 	bl	8000348 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c46:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c48:	2400      	movs	r4, #0
 8001c4a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	a902      	add	r1, sp, #8
 8001c50:	4630      	mov	r0, r6
 8001c52:	f7fe fb79 	bl	8000348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001c56:	4622      	mov	r2, r4
 8001c58:	4629      	mov	r1, r5
 8001c5a:	2027      	movs	r0, #39	; 0x27
 8001c5c:	f7fe fad2 	bl	8000204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c60:	2027      	movs	r0, #39	; 0x27
 8001c62:	f7fe fb03 	bl	800026c <HAL_NVIC_EnableIRQ>
}
 8001c66:	e7ca      	b.n	8001bfe <HAL_UART_MspInit+0x16>
 8001c68:	40004800 	.word	0x40004800
 8001c6c:	40010c00 	.word	0x40010c00

08001c70 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c70:	4770      	bx	lr

08001c72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c72:	e7fe      	b.n	8001c72 <HardFault_Handler>

08001c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c74:	e7fe      	b.n	8001c74 <MemManage_Handler>

08001c76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	e7fe      	b.n	8001c78 <UsageFault_Handler>

08001c7a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c7a:	4770      	bx	lr

08001c7c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	4770      	bx	lr

08001c7e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f7fe fa9b 	bl	80001bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bd08      	pop	{r3, pc}

08001c88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <TIM4_IRQHandler+0xc>)
 8001c8c:	f7ff f9bb 	bl	8001006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c90:	bd08      	pop	{r3, pc}
 8001c92:	bf00      	nop
 8001c94:	20000090 	.word	0x20000090

08001c98 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c9a:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <USART3_IRQHandler+0xc>)
 8001c9c:	f7ff fd62 	bl	8001764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ca0:	bd08      	pop	{r3, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200000d0 	.word	0x200000d0

08001ca8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <SystemInit+0x40>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001cb2:	6859      	ldr	r1, [r3, #4]
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <SystemInit+0x44>)
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001cc0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cc4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ccc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001cd4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001cd6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001cda:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <SystemInit+0x48>)
 8001cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce2:	609a      	str	r2, [r3, #8]
#endif 
}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	f8ff0000 	.word	0xf8ff0000
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001cf4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cf6:	e003      	b.n	8001d00 <LoopCopyDataInit>

08001cf8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cfa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cfc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cfe:	3104      	adds	r1, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d00:	480a      	ldr	r0, [pc, #40]	; (8001d2c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d04:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d06:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d08:	d3f6      	bcc.n	8001cf8 <CopyDataInit>
  ldr r2, =_sbss
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d0c:	e002      	b.n	8001d14 <LoopFillZerobss>

08001d0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d10:	f842 3b04 	str.w	r3, [r2], #4

08001d14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d16:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d18:	d3f9      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d1a:	f7ff ffc5 	bl	8001ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1e:	f000 f89f 	bl	8001e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d22:	f7ff fe85 	bl	8001a30 <main>
  bx lr
 8001d26:	4770      	bx	lr
  ldr r3, =_sidata
 8001d28:	08001efc 	.word	0x08001efc
  ldr r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d30:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001d34:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001d38:	20000168 	.word	0x20000168

08001d3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC1_2_IRQHandler>
	...

08001d40 <TLC_Update>:

uint16_t leds[24] = {}; // todo en 0, le pongo valores con FillArray
uint8_t spi_send[SPI_BYTE_AMOUNT]={};

void TLC_Update(void)
{
 8001d40:	b570      	push	{r4, r5, r6, lr}
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI

    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_SET);
 8001d42:	2201      	movs	r2, #1
 8001d44:	2102      	movs	r1, #2
 8001d46:	481a      	ldr	r0, [pc, #104]	; (8001db0 <TLC_Update+0x70>)
 8001d48:	f7fe fbe8 	bl	800051c <HAL_GPIO_WritePin>

    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 8001d4c:	2200      	movs	r2, #0
	uint8_t si = 0;//Lo uso para el vector a enviar via SPI
 8001d4e:	4611      	mov	r1, r2
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 8001d50:	e017      	b.n	8001d82 <TLC_Update+0x42>
    {
        uint8_t send1 = 0;
        uint8_t send = leds[i] >> 4; // mando MSB
 8001d52:	4d18      	ldr	r5, [pc, #96]	; (8001db4 <TLC_Update+0x74>)
 8001d54:	f835 3012 	ldrh.w	r3, [r5, r2, lsl #1]
 8001d58:	f3c3 1407 	ubfx	r4, r3, #4, #8

        spi_send[si]=send;//
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <TLC_Update+0x78>)
 8001d5e:	5444      	strb	r4, [r0, r1]
        si++;
 8001d60:	1c4c      	adds	r4, r1, #1
 8001d62:	b2e4      	uxtb	r4, r4

        send = (leds[i] & 0x000F);
 8001d64:	b2db      	uxtb	r3, r3
        send <<= 4;
        send1 = (leds[i+1]) >> 8;
 8001d66:	1c56      	adds	r6, r2, #1
 8001d68:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
        send |= send1; //me quedo con 4 bits menos significativos del canal i y 4 bits más significativos del canal i-1
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8

        spi_send[si]=send;//
 8001d72:	5503      	strb	r3, [r0, r4]
        si++;
 8001d74:	1c8b      	adds	r3, r1, #2
 8001d76:	b2db      	uxtb	r3, r3


        send = leds[i+1];//borro 4 bits más significativos del canal i-1 y mando LSB del canal i-1

        spi_send[si]=send;//
 8001d78:	54c5      	strb	r5, [r0, r3]
        si++;
 8001d7a:	3103      	adds	r1, #3
 8001d7c:	b2c9      	uxtb	r1, r1
    for (int8_t i = 0; i < TOTAL_CHANNELS; i += 2) // lleno
 8001d7e:	3202      	adds	r2, #2
 8001d80:	b252      	sxtb	r2, r2
 8001d82:	2a17      	cmp	r2, #23
 8001d84:	dde5      	ble.n	8001d52 <TLC_Update+0x12>

    }

    TLC_Write(spi_send);
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <TLC_Update+0x78>)
 8001d88:	f7ff feae 	bl	8001ae8 <TLC_Write>

    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_SET);
 8001d8c:	4c08      	ldr	r4, [pc, #32]	; (8001db0 <TLC_Update+0x70>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	2108      	movs	r1, #8
 8001d92:	4620      	mov	r0, r4
 8001d94:	f7fe fbc2 	bl	800051c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_XLAT_GPIO_Port, TLC5947_XLAT_Pin, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7fe fbbd 	bl	800051c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(TLC5947_BLANK_GPIO_Port, TLC5947_BLANK_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7fe fbb8 	bl	800051c <HAL_GPIO_WritePin>

}
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
 8001dae:	bf00      	nop
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20000030 	.word	0x20000030
 8001db8:	20000064 	.word	0x20000064

08001dbc <FillArray>:
void FillArray(uint8_t colorIntensity)
{
	static uint8_t position = 0, increment = 3,array_index = 0;
	static uint16_t intensity = 4095;

	  if(colorIntensity == 48)
 8001dbc:	2830      	cmp	r0, #48	; 0x30
 8001dbe:	d011      	beq.n	8001de4 <FillArray+0x28>
		  //0
		  position = BLUE;//RED

	  if(colorIntensity == 49)
 8001dc0:	2831      	cmp	r0, #49	; 0x31
 8001dc2:	d013      	beq.n	8001dec <FillArray+0x30>
		  //1
		  position = GREEN;//GREEN

	  if(colorIntensity == 50)
 8001dc4:	2832      	cmp	r0, #50	; 0x32
 8001dc6:	d015      	beq.n	8001df4 <FillArray+0x38>
		  //2
		  position = RED;//BLUE

	  if(colorIntensity == 52)
 8001dc8:	2834      	cmp	r0, #52	; 0x34
 8001dca:	d017      	beq.n	8001dfc <FillArray+0x40>
		  //HIGH - 4
		  intensity = 4095;

	  if(colorIntensity == 53)
 8001dcc:	2835      	cmp	r0, #53	; 0x35
 8001dce:	d01a      	beq.n	8001e06 <FillArray+0x4a>
		  //MID - 5
		  intensity = 1024;

	  if(colorIntensity == 54)
 8001dd0:	2836      	cmp	r0, #54	; 0x36
 8001dd2:	d01d      	beq.n	8001e10 <FillArray+0x54>
		  //LOW - 6
		  intensity = 32;

if(position >-1 && position<3)
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <FillArray+0x94>)
 8001dd6:	7818      	ldrb	r0, [r3, #0]
 8001dd8:	2802      	cmp	r0, #2
 8001dda:	d828      	bhi.n	8001e2e <FillArray+0x72>
{

	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <FillArray+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
 8001de2:	e020      	b.n	8001e26 <FillArray+0x6a>
		  position = BLUE;//RED
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <FillArray+0x94>)
 8001de6:	2232      	movs	r2, #50	; 0x32
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e7e9      	b.n	8001dc0 <FillArray+0x4>
		  position = GREEN;//GREEN
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <FillArray+0x94>)
 8001dee:	2231      	movs	r2, #49	; 0x31
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e7e7      	b.n	8001dc4 <FillArray+0x8>
		  position = RED;//BLUE
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <FillArray+0x94>)
 8001df6:	2230      	movs	r2, #48	; 0x30
 8001df8:	701a      	strb	r2, [r3, #0]
 8001dfa:	e7e5      	b.n	8001dc8 <FillArray+0xc>
		  intensity = 4095;
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <FillArray+0x9c>)
 8001dfe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e02:	801a      	strh	r2, [r3, #0]
 8001e04:	e7e2      	b.n	8001dcc <FillArray+0x10>
		  intensity = 1024;
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <FillArray+0x9c>)
 8001e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0c:	801a      	strh	r2, [r3, #0]
 8001e0e:	e7df      	b.n	8001dd0 <FillArray+0x14>
		  intensity = 32;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <FillArray+0x9c>)
 8001e12:	2220      	movs	r2, #32
 8001e14:	801a      	strh	r2, [r3, #0]
 8001e16:	e7dd      	b.n	8001dd4 <FillArray+0x18>
		leds[array_index] = 0;//all previous values are erased
 8001e18:	4a10      	ldr	r2, [pc, #64]	; (8001e5c <FillArray+0xa0>)
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index= 0; array_index<TOTAL_CHANNELS;array_index++)
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <FillArray+0x98>)
 8001e24:	7013      	strb	r3, [r2, #0]
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <FillArray+0x98>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b17      	cmp	r3, #23
 8001e2c:	d9f4      	bls.n	8001e18 <FillArray+0x5c>
}




	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <FillArray+0x98>)
 8001e30:	7018      	strb	r0, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <FillArray+0x88>
		leds[array_index] = intensity;
 8001e34:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <FillArray+0x9c>)
 8001e36:	8811      	ldrh	r1, [r2, #0]
 8001e38:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <FillArray+0xa0>)
 8001e3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (array_index=position; array_index<TOTAL_CHANNELS;array_index+=increment)
 8001e3e:	3303      	adds	r3, #3
 8001e40:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <FillArray+0x98>)
 8001e42:	7013      	strb	r3, [r2, #0]
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <FillArray+0x98>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b17      	cmp	r3, #23
 8001e4a:	d9f3      	bls.n	8001e34 <FillArray+0x78>

}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	20000060 	.word	0x20000060
 8001e54:	2000002d 	.word	0x2000002d
 8001e58:	2000000c 	.word	0x2000000c
 8001e5c:	20000030 	.word	0x20000030

08001e60 <__libc_init_array>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	2500      	movs	r5, #0
 8001e64:	4e0c      	ldr	r6, [pc, #48]	; (8001e98 <__libc_init_array+0x38>)
 8001e66:	4c0d      	ldr	r4, [pc, #52]	; (8001e9c <__libc_init_array+0x3c>)
 8001e68:	1ba4      	subs	r4, r4, r6
 8001e6a:	10a4      	asrs	r4, r4, #2
 8001e6c:	42a5      	cmp	r5, r4
 8001e6e:	d109      	bne.n	8001e84 <__libc_init_array+0x24>
 8001e70:	f000 f81a 	bl	8001ea8 <_init>
 8001e74:	2500      	movs	r5, #0
 8001e76:	4e0a      	ldr	r6, [pc, #40]	; (8001ea0 <__libc_init_array+0x40>)
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <__libc_init_array+0x44>)
 8001e7a:	1ba4      	subs	r4, r4, r6
 8001e7c:	10a4      	asrs	r4, r4, #2
 8001e7e:	42a5      	cmp	r5, r4
 8001e80:	d105      	bne.n	8001e8e <__libc_init_array+0x2e>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e88:	4798      	blx	r3
 8001e8a:	3501      	adds	r5, #1
 8001e8c:	e7ee      	b.n	8001e6c <__libc_init_array+0xc>
 8001e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e92:	4798      	blx	r3
 8001e94:	3501      	adds	r5, #1
 8001e96:	e7f2      	b.n	8001e7e <__libc_init_array+0x1e>
 8001e98:	08001ef4 	.word	0x08001ef4
 8001e9c:	08001ef4 	.word	0x08001ef4
 8001ea0:	08001ef4 	.word	0x08001ef4
 8001ea4:	08001ef8 	.word	0x08001ef8

08001ea8 <_init>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	bf00      	nop
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr

08001eb4 <_fini>:
 8001eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb6:	bf00      	nop
 8001eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eba:	bc08      	pop	{r3}
 8001ebc:	469e      	mov	lr, r3
 8001ebe:	4770      	bx	lr
